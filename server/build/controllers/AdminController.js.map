{"version":3,"sources":["../../src/controllers/AdminController.js"],"names":["requests","models","users","AdminController","req","res","id","body","decode","findAll","where","adminId","then","clientRequests","length","clientsInfo","forEach","request","getClient","userId","clientInfo","push","user","message","catch","requestId","parseInt","params","find","update","updatedAt","status","updatedRequest"],"mappings":"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","file":"AdminController.js","sourcesContent":["\r\nimport models from './../models/index';\r\nimport { handleResponse } from './../services/services';\r\n\r\nconst { requests, users } = models;\r\nconst AdminController = class {\r\n  // get all request for a logged in user\r\n  static getAllRequests(req, res) {\r\n    const { id } = req.body.decode;\r\n    return requests\r\n    .findAll({\r\n      where: {\r\n        adminId: id,\r\n      },\r\n    })\r\n    .then((clientRequests) => {\r\n      if (clientRequests) {\r\n        if (clientRequests.length === 0) {\r\n          return handleResponse(res, 200, []);\r\n        }\r\n        const clientsInfo = [];\r\n        clientRequests.forEach((request) => {\r\n          return users\r\n            .getClient(request.userId)\r\n            .then((clientInfo) => {\r\n              return clientInfo;\r\n            })\r\n            .then(clientInfo => {\r\n              if (clientInfo) {\r\n                clientsInfo.push({\r\n                  request,\r\n                  user: clientInfo,\r\n                });\r\n              } else {\r\n                clientsInfo.push({\r\n                  request,\r\n                  user: { message: 'user not found' },\r\n              });\r\n              }\r\n              if (clientsInfo.length === clientRequests.length) {\r\n                return handleResponse(res, 200, clientsInfo);\r\n              }\r\n            })\r\n            .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\r\n        })\r\n      }\r\n    })\r\n    .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\r\n  }\r\n\r\n  static rejectRequest(req, res) {\r\n    const requestId = parseInt(req.params.requestId, 10);\r\n    const { id } = req.body.decode;\r\n    return requests\r\n      .find({\r\n        where: {\r\n          id: requestId,\r\n          adminId: parseInt(id, 10),\r\n        },\r\n      })\r\n      .then((request) => {\r\n        if (request) {\r\n          return requests\r\n          .update(\r\n            {\r\n              id: request.id,\r\n            },\r\n            {\r\n              updatedAt: 'now()',\r\n              status: 'rejected',\r\n            },\r\n          )\r\n          .then(updatedRequest => handleResponse(res, 200, updatedRequest))\r\n          .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\r\n        }\r\n        return handleResponse(res, 404, 'Request does not exist');\r\n      })\r\n      .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\r\n  }\r\n\r\n  static approveRequest(req, res) {\r\n    const requestId = parseInt(req.params.requestId, 10);\r\n    const { id } = req.body.decode;\r\n    return requests\r\n      .find({\r\n        where: {\r\n          id: requestId,\r\n          adminId: parseInt(id, 10),\r\n        },\r\n      })\r\n      .then((request) => {\r\n        if (request) {\r\n          return requests\r\n          .update(\r\n            {\r\n              id: request.id,\r\n            },\r\n            {\r\n              updatedAt: 'now()',\r\n              status: 'pending',\r\n            },\r\n          )\r\n          .then(updatedRequest => handleResponse(res, 200, updatedRequest))\r\n          .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\r\n        }\r\n        return handleResponse(res, 404, 'Request does not exist');\r\n      })\r\n      .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\r\n  }\r\n\r\n  static resolveRequest(req, res) {\r\n    const requestId = parseInt(req.params.requestId, 10);\r\n    const { id } = req.body.decode;\r\n    return requests\r\n      .find({\r\n        where: {\r\n          id: requestId,\r\n          adminId: parseInt(id, 10),\r\n        },\r\n      })\r\n      .then((request) => {\r\n        if (request) {\r\n          return requests\r\n          .update(\r\n            {\r\n              id: request.id,\r\n            },\r\n            {\r\n              updatedAt: 'now()',\r\n              status: 'resolved',\r\n            },\r\n          )\r\n          .then(updatedRequest => handleResponse(res, 200, updatedRequest))\r\n          .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\r\n        }\r\n        return handleResponse(res, 404, 'Request does not exist');\r\n      })\r\n      .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\r\n  }\r\n};\r\nexport default AdminController;\r\n"]}