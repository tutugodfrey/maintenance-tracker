{"version":3,"sources":["../../src/controllers/AdminController.js"],"names":["requests","models","users","AdminController","req","res","id","body","decode","findAll","where","adminId","then","clientRequests","length","clientsInfo","forEach","request","getClient","userId","clientInfo","push","user","message","catch","requestId","parseInt","params","find","update","updatedAt","status","updatedRequest"],"mappings":"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","file":"AdminController.js","sourcesContent":["\nimport models from './../models/index';\nimport { handleResponse } from './../services/services';\n\nconst { requests, users } = models;\n/* eslint-disable consistent-return */\nconst AdminController = class {\n  // get all request for a logged in user\n  static getAllRequests(req, res) {\n    const { id } = req.body.decode;\n    return requests\n      .findAll({\n        where: {\n          adminId: id,\n        },\n      })\n      .then((clientRequests) => {\n        if (clientRequests) {\n          if (clientRequests.length === 0) {\n            return handleResponse(res, 200, []);\n          }\n          const clientsInfo = [];\n          clientRequests.forEach((request) => {\n            return users\n              .getClient(request.userId)\n              .then((clientInfo) => {\n                return clientInfo;\n              })\n              .then((clientInfo) => {\n                if (clientInfo) {\n                  clientsInfo.push({\n                    request,\n                    user: clientInfo,\n                  });\n                } else {\n                  clientsInfo.push({\n                    request,\n                    user: { message: 'user not found' },\n                  });\n                }\n                if (clientsInfo.length === clientRequests.length) {\n                  return handleResponse(res, 200, clientsInfo);\n                }\n              })\n              .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\n          });\n        }\n        // return handleResponse(res, 200, []);\n      })\n      .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\n  }\n\n  static rejectRequest(req, res) {\n    const requestId = parseInt(req.params.requestId, 10);\n    const { id } = req.body.decode;\n    return requests\n      .find({\n        where: {\n          id: requestId,\n          adminId: parseInt(id, 10),\n        },\n      })\n      .then((request) => {\n        if (request) {\n          return requests\n            .update(\n              {\n                id: request.id,\n              },\n              {\n                updatedAt: 'now()',\n                status: 'rejected',\n              },\n            )\n            .then((updatedRequest) => {\n              if (updatedRequest) {\n                return users\n                  .getClient(updatedRequest.userId)\n                  .then((user) => {\n                    if (user) {\n                      return handleResponse(res, 200, {\n                        user,\n                        request: updatedRequest,\n                      });\n                    }\n                    return handleResponse(res, 200, {\n                      user: { message: 'user not found' },\n                      request: updatedRequest,\n                    });\n                  })\n                  .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\n              }\n            })\n            .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\n        }\n        return handleResponse(res, 404, 'request not found');\n      })\n      .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\n  }\n\n  static approveRequest(req, res) {\n    const requestId = parseInt(req.params.requestId, 10);\n    const { id } = req.body.decode;\n    return requests\n      .find({\n        where: {\n          id: requestId,\n          adminId: parseInt(id, 10),\n        },\n      })\n      .then((request) => {\n        if (request) {\n          return requests\n            .update(\n              {\n                id: request.id,\n              },\n              {\n                updatedAt: 'now()',\n                status: 'pending',\n              },\n            )\n            .then((updatedRequest) => {\n              if (updatedRequest) {\n                return users\n                  .getClient(updatedRequest.userId)\n                  .then((user) => {\n                    if (user) {\n                      return handleResponse(res, 200, {\n                        user,\n                        request: updatedRequest,\n                      });\n                    }\n                    return handleResponse(res, 200, {\n                      user: { message: 'user not found' },\n                      request: updatedRequest,\n                    });\n                  })\n                  .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\n              }\n            })\n            .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\n        }\n        return handleResponse(res, 404, 'request not found');\n      })\n      .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\n  }\n\n  static resolveRequest(req, res) {\n    const requestId = parseInt(req.params.requestId, 10);\n    const { id } = req.body.decode;\n    return requests\n      .find({\n        where: {\n          id: requestId,\n          adminId: parseInt(id, 10),\n        },\n      })\n      .then((request) => {\n        if (request) {\n          return requests\n            .update(\n              {\n                id: request.id,\n              },\n              {\n                updatedAt: 'now()',\n                status: 'resolved',\n              },\n            )\n            .then((updatedRequest) => {\n              if (updatedRequest) {\n                return users\n                  .getClient(updatedRequest.userId)\n                  .then((user) => {\n                    if (user) {\n                      return handleResponse(res, 200, {\n                        user,\n                        request: updatedRequest,\n                      });\n                    }\n                    return handleResponse(res, 200, {\n                      user: { message: 'user not found' },\n                      request: updatedRequest,\n                    });\n                  })\n                  .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\n              }\n            })\n            .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\n        }\n        return handleResponse(res, 404, 'request not found');\n      })\n      .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\n  }\n};\nexport default AdminController;\n"]}