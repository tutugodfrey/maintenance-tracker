{"version":3,"sources":["../../src/controllers/AdminController.js"],"names":["requests","models","AdminController","req","res","body","decode","isAdmin","id","status","send","message","findAll","where","adminId","parseInt","then","allRequests","catch","requestId","params","find","request","update","updatedAt","updatedRequest","error"],"mappings":"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","file":"AdminController.js","sourcesContent":["\r\nimport models from './../models/index';\r\n\r\nconst { requests } = models;\r\nconst AdminController = class {\r\n  // get all request for a logged in user\r\n  static getAllRequests(req, res) {\r\n    const {\r\n      isAdmin,\r\n      id,\r\n    } = req.body.decode;\r\n    if (!isAdmin) {\r\n      return res.status(402).send({ message: 'you are not authorized to perform this action' });\r\n    }\r\n    return requests\r\n      .findAll({\r\n        where: {\r\n          adminId: parseInt(id, 10),\r\n        },\r\n      })\r\n      .then(allRequests => res.status(200).send(allRequests))\r\n      .catch(() => res.status(500).send({ message: 'some went wrong' }));\r\n  }\r\n\r\n  static rejectRequest(req, res) {\r\n    const requestId = parseInt(req.params.requestId, 10);\r\n    const {\r\n      isAdmin,\r\n      id,\r\n    } = req.body.decode;\r\n    if (!isAdmin) {\r\n      return res.status(402).send({ message: 'you are not permitted to perform this action' });\r\n    }\r\n    if (!requestId) {\r\n      return res.status(400).send({ message: 'missiging required field' });\r\n    }\r\n\r\n    return requests\r\n      .find({\r\n        where: {\r\n          id: requestId,\r\n          adminId: parseInt(id, 10),\r\n        },\r\n      })\r\n      .then((request) => {\r\n        return requests\r\n          .update(\r\n            {\r\n              id: request.id,\r\n            },\r\n            {\r\n              updatedAt: 'now()',\r\n              status: 'rejected',\r\n            },\r\n          )\r\n          .then(updatedRequest => res.status(200).send(updatedRequest));\r\n      })\r\n      .catch(error => res.status(404).send(error));\r\n  }\r\n\r\n  static approveRequest(req, res) {\r\n    const requestId = parseInt(req.params.requestId, 10);\r\n    const {\r\n      isAdmin,\r\n      id,\r\n    } = req.body.decode;\r\n    if (!isAdmin) {\r\n      return res.status(402).send({ message: 'you are not permitted to perform this action' });\r\n    }\r\n    if (!requestId) {\r\n      return res.status(400).send({ message: 'missiging required field' });\r\n    }\r\n\r\n    return requests\r\n      .find({\r\n        where: {\r\n          id: requestId,\r\n          adminId: parseInt(id, 10),\r\n        },\r\n      })\r\n      .then((request) => {\r\n        return requests\r\n          .update(\r\n            {\r\n              id: request.id,\r\n            },\r\n            {\r\n              updatedAt: 'now()',\r\n              status: 'pending',\r\n            },\r\n          )\r\n          .then(updatedRequest => res.status(200).send(updatedRequest));\r\n      })\r\n      .catch(error => res.status(404).send(error));\r\n  }\r\n\r\n  static resolveRequest(req, res) {\r\n    const requestId = parseInt(req.params.requestId, 10);\r\n    const {\r\n      isAdmin,\r\n      id,\r\n    } = req.body.decode;\r\n    if (!isAdmin) {\r\n      return res.status(402).send({ message: 'you are not permitted to perform this action' });\r\n    }\r\n    if (!requestId) {\r\n      return res.status(400).send({ message: 'missiging required field' });\r\n    }\r\n    return requests\r\n      .find({\r\n        where: {\r\n          id: requestId,\r\n          adminId: parseInt(id, 10),\r\n        },\r\n      })\r\n      .then((request) => {\r\n        return requests\r\n          .update(\r\n            {\r\n              id: request.id,\r\n            },\r\n            {\r\n              updatedAt: 'now()',\r\n              status: 'resolved',\r\n            },\r\n          )\r\n          .then(updatedRequest => res.status(200).send(updatedRequest));\r\n      })\r\n      .catch(error => res.status(404).send(error));\r\n  }\r\n};\r\nexport default AdminController;\r\n"]}