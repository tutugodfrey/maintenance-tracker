{"version":3,"sources":["../../src/controllers/AdminController.js"],"names":["requests","models","users","AdminController","req","res","body","decode","isAdmin","id","status","send","message","findAll","where","adminId","then","clientRequests","length","clientsInfo","forEach","request","getClient","userId","clientInfo","push","user","catch","error","requestId","parseInt","params","find","update","updatedAt","updatedRequest"],"mappings":"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","file":"AdminController.js","sourcesContent":["\r\nimport models from './../models/index';\r\n\r\nconst { requests, users } = models;\r\nconst AdminController = class {\r\n  // get all request for a logged in user\r\n  static getAllRequests(req, res) {\r\n    const {\r\n      isAdmin,\r\n      id,\r\n    } = req.body.decode;\r\n    if (!isAdmin) {\r\n      return res.status(401).send({ message: 'you are not authorized to perform this action' });\r\n    }\r\n    return requests\r\n    .findAll({\r\n      where: {\r\n        adminId: id,\r\n      },\r\n    })\r\n    .then((clientRequests) => {\r\n      if (clientRequests) {\r\n        if (clientRequests.length === 0) {\r\n          return res.status(200).send([])\r\n        }\r\n        const clientsInfo = [];\r\n        clientRequests.forEach((request) => {\r\n          return users\r\n            .getClient(request.userId)\r\n            .then((clientInfo) => {\r\n              return clientInfo;\r\n            })\r\n            .then(clientInfo => {\r\n              if (clientInfo) {\r\n                clientsInfo.push({\r\n                  request,\r\n                  user: clientInfo,\r\n                });\r\n              } else {\r\n                clientsInfo.push({\r\n                  request,\r\n                  user: { message: 'user not found' },\r\n              });\r\n              }\r\n              if (clientsInfo.length === clientRequests.length) {\r\n                return res.status(200).send(clientsInfo)\r\n              }\r\n            })\r\n            .catch(error => res.status(500).send(error));\r\n        })\r\n      }\r\n    })\r\n    .catch(error => res.status(500).send({ message: 'something went wrong. please try again' }))\r\n  }\r\n\r\n  static rejectRequest(req, res) {\r\n    const requestId = parseInt(req.params.requestId, 10);\r\n    const {\r\n      isAdmin,\r\n      id,\r\n    } = req.body.decode;\r\n    if (!isAdmin) {\r\n      return res.status(401).send({ message: 'you are not permitted to perform this action' });\r\n    }\r\n    if (!requestId) {\r\n      return res.status(400).send({ message: 'missiging required field' });\r\n    }\r\n\r\n    return requests\r\n      .find({\r\n        where: {\r\n          id: requestId,\r\n          adminId: parseInt(id, 10),\r\n        },\r\n      })\r\n      .then((request) => {\r\n        return requests\r\n          .update(\r\n            {\r\n              id: request.id,\r\n            },\r\n            {\r\n              updatedAt: 'now()',\r\n              status: 'rejected',\r\n            },\r\n          )\r\n          .then(updatedRequest => res.status(200).send(updatedRequest));\r\n      })\r\n      .catch(error => res.status(404).send(error));\r\n  }\r\n\r\n  static approveRequest(req, res) {\r\n    const requestId = parseInt(req.params.requestId, 10);\r\n    const {\r\n      isAdmin,\r\n      id,\r\n    } = req.body.decode;\r\n    if (!isAdmin) {\r\n      return res.status(401).send({ message: 'you are not permitted to perform this action' });\r\n    }\r\n    if (!requestId) {\r\n      return res.status(400).send({ message: 'missiging required field' });\r\n    }\r\n\r\n    return requests\r\n      .find({\r\n        where: {\r\n          id: requestId,\r\n          adminId: parseInt(id, 10),\r\n        },\r\n      })\r\n      .then((request) => {\r\n        return requests\r\n          .update(\r\n            {\r\n              id: request.id,\r\n            },\r\n            {\r\n              updatedAt: 'now()',\r\n              status: 'pending',\r\n            },\r\n          )\r\n          .then(updatedRequest => res.status(200).send(updatedRequest));\r\n      })\r\n      .catch(error => res.status(404).send(error));\r\n  }\r\n\r\n  static resolveRequest(req, res) {\r\n    const requestId = parseInt(req.params.requestId, 10);\r\n    const {\r\n      isAdmin,\r\n      id,\r\n    } = req.body.decode;\r\n    if (!isAdmin) {\r\n      return res.status(401).send({ message: 'you are not permitted to perform this action' });\r\n    }\r\n    if (!requestId) {\r\n      return res.status(400).send({ message: 'missiging required field' });\r\n    }\r\n    return requests\r\n      .find({\r\n        where: {\r\n          id: requestId,\r\n          adminId: parseInt(id, 10),\r\n        },\r\n      })\r\n      .then((request) => {\r\n        return requests\r\n          .update(\r\n            {\r\n              id: request.id,\r\n            },\r\n            {\r\n              updatedAt: 'now()',\r\n              status: 'resolved',\r\n            },\r\n          )\r\n          .then(updatedRequest => res.status(200).send(updatedRequest));\r\n      })\r\n      .catch(error => res.status(404).send(error));\r\n  }\r\n};\r\nexport default AdminController;\r\n"]}