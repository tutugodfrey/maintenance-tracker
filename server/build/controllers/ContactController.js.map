{"version":3,"sources":["../../src/controllers/ContactController.js"],"names":["users","models","contacts","ContactController","req","res","body","receiverId","title","message","senderId","decode","id","findById","then","user","create","newMessage","catch","userId","parseInt","findAll","where","type","messages","length","clientsInfo","forEach","messageObj","getClient","sender","receiver","push"],"mappings":"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","file":"ContactController.js","sourcesContent":["import models from './../models/index';\r\nimport { handleResponse } from './../services/Services';\r\n\r\nconst { users, contacts } = models;\r\nconst ContactController = class {\r\n  // create a new message\r\n  static addMessage(req, res) {\r\n    const {\r\n      receiverId,\r\n      title,\r\n      message,\r\n    } = req.body;\r\n\r\n    // sender is user with token\r\n    const senderId = req.body.decode.id;\r\n    return users\r\n      .findById(senderId)\r\n      .then((user) => {\r\n        if (user) {\r\n          return contacts\r\n            .create({\r\n              receiverId,\r\n              senderId,\r\n              message,\r\n              title,\r\n            })\r\n            .then((newMessage) => {\r\n              handleResponse(res, 201, newMessage);\r\n            })\r\n            .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\r\n        }\r\n        return handleResponse(res, 404, 'Your identity could not be verified. Please make sure you are logged in');\r\n      })\r\n      .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\r\n  }\r\n\r\n  static getMessages(req, res) {\r\n    const userId = parseInt(req.body.decode.id, 10);\r\n    return contacts\r\n      .findAll({\r\n        where: {\r\n          senderId: userId,\r\n          receiverId: userId,\r\n        },\r\n        type: 'or',\r\n      })\r\n      .then((messages) => { \r\n        if (messages) {\r\n          // no messages has been send or received\r\n          if (messages.length === 0) {\r\n            return handleResponse(res, 200, []);\r\n          }\r\n          const clientsInfo = [];\r\n          messages.forEach((message) => {\r\n            // object to hold message sender and receiver\r\n            const messageObj = {};\r\n            messageObj.message = message;\r\n\r\n            // get info of message sender\r\n            return users\r\n              .getClient(message.senderId)\r\n              .then((sender) => {\r\n                return sender;\r\n              })\r\n              .then(sender => {\r\n                if (sender) {\r\n                  messageObj.sender = sender;\r\n                } else {\r\n                  messageObj.sender = { message: 'user not found' };\r\n                }\r\n              })\r\n              .then(() => {\r\n                // get info of message receiver\r\n                return users\r\n                  .getClient(message.receiverId)\r\n                  .then((receiver) => {\r\n                    return receiver;\r\n                  })\r\n                  .then(receiver => {\r\n                    if (receiver) {\r\n                      messageObj.receiver = receiver;\r\n                    } else {\r\n                      messageObj.receiver = { message: 'user not found' };\r\n                    }\r\n\r\n                    // push messageObj to collection\r\n                    clientsInfo.push(messageObj);\r\n                    if (clientsInfo.length === messages.length) {\r\n                      return handleResponse(res, 200, clientsInfo);\r\n                    }\r\n                  })\r\n              })\r\n          });\r\n        }\r\n      })\r\n      .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\r\n  }\r\n};\r\n\r\nexport default ContactController;\r\n"]}