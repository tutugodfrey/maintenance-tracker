{"version":3,"sources":["../../src/controllers/ContactController.js"],"names":["users","models","contacts","ContactController","req","res","body","receiverId","title","message","senderId","decode","id","parseInt","status","send","trim","findById","then","user","create","newMessage","catch","error","messag","userId","isAdmin","findAll","where","type","messages","length","clientsInfo","forEach","messageObj","getClient","senderid","sender","receiverid","receiver","push"],"mappings":"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","file":"ContactController.js","sourcesContent":["import models from './../models/index';\r\n\r\nconst { users, contacts } = models;\r\nconst ContactController = class {\r\n  // create a new message\r\n  static addMessage(req, res) {\r\n    const {\r\n      receiverId,\r\n      title,\r\n      message,\r\n    } = req.body;\r\n\r\n    // sender is user with token\r\n    const senderId = req.body.decode.id;\r\n    if (!parseInt(senderId, 10)) {\r\n      return res.status(400).send({ message: 'you are authorized to perform this action. please make sure you are logged in' });\r\n    }\r\n    if (!parseInt(receiverId, 10)) {\r\n      return res.status(400).send({ message: 'missing required field' });\r\n    }\r\n    if (message.trim() === '' || title.trim() === '') {\r\n      return res.status(400).send({ message: 'missing required field' });\r\n    }\r\n    return users\r\n      .findById(senderId)\r\n      .then((user) => {\r\n        if (user) {\r\n          return contacts\r\n            .create({\r\n              receiverId,\r\n              senderId,\r\n              message,\r\n              title,\r\n            })\r\n            .then((newMessage) => {\r\n              res.status(201).send(newMessage);\r\n            })\r\n            .catch(error => res.status(400).send(error));\r\n        }\r\n        return res.status(201).send({ messag: 'Your identity could not be verified. Please make sure you are logged in' });\r\n      })\r\n      .catch(error => res.status(404).send(error));\r\n  }\r\n\r\n  static getMessages(req, res) {\r\n    const userId = parseInt(req.body.decode.id, 10);\r\n    const { isAdmin } = req.body.decode;\r\n    if (!(userId || isAdmin)) {\r\n      return res.status(400).send({ message: 'you are not authorized to perform this action. please make sure you are logged in' });\r\n    }\r\n    return contacts\r\n      .findAll({\r\n        where: {\r\n          senderId: userId,\r\n          receiverId: userId,\r\n        },\r\n        type: 'or',\r\n      })\r\n      .then((messages) => { \r\n        if (messages) {\r\n          // no messages has been send or received\r\n          if (messages.length === 0) {\r\n            return res.status(200).send([])\r\n          }\r\n          const clientsInfo = [];\r\n          messages.forEach((message) => {\r\n            // object to hold message sender and receiver\r\n            const messageObj = {};\r\n            messageObj.message = message;\r\n\r\n            // get info of message sender\r\n            return users\r\n              .getClient(message.senderid)\r\n              .then((sender) => {\r\n                return sender;\r\n              })\r\n              .then(sender => {\r\n                if (sender) {\r\n                  messageObj.sender = sender;\r\n                } else {\r\n                  messageObj.sender = { message: 'user not found' };\r\n                }\r\n              })\r\n              .then(() => {\r\n                // get info of message receiver\r\n                return users\r\n                  .getClient(message.receiverid)\r\n                  .then((receiver) => {\r\n                    return receiver;\r\n                  })\r\n                  .then(receiver => {\r\n                    if (receiver) {\r\n                      messageObj.receiver = receiver;\r\n                    } else {\r\n                      messageObj.receiver = { message: 'user not found' };\r\n                    }\r\n\r\n                    // push messageObj to collection\r\n                    clientsInfo.push(messageObj);\r\n                    if (clientsInfo.length === messages.length) {\r\n                      return res.status(200).send(clientsInfo)\r\n                    }\r\n                  })\r\n              })\r\n          });\r\n        }\r\n      })\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n};\r\n\r\nexport default ContactController;\r\n"]}