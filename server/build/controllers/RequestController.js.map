{"version":3,"sources":["../../src/controllers/RequestController.js"],"names":["requests","models","users","RequestController","req","res","body","category","description","address","urgent","adminId","userId","findById","parseInt","then","user","create","issueDate","updatedAt","status","request","catch","requestId","params","decode","id","find","where","getClient","client","message","findAll","clientRequests","length","clientsInfo","forEach","clientInfo","push","update","newRequest","destroy","rows"],"mappings":"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","file":"RequestController.js","sourcesContent":["\r\nimport models from './../models/index';\r\nimport { handleResponse } from './../services/Services';\r\n\r\nconst { requests, users } = models;\r\nconst RequestController = class {\r\n  // add a new request\r\n  static addRequest(req, res) {\r\n    const {\r\n      category,\r\n      description,\r\n      address,\r\n      urgent,\r\n      adminId,\r\n      userId,\r\n    } = req.body;\r\n\r\n    return users.findById(parseInt(userId, 10))\r\n      .then((user) => {\r\n        if (user) {\r\n          return requests\r\n            .create({\r\n              userId,\r\n              category,\r\n              description,\r\n              address,\r\n              adminId,\r\n              issueDate: 'now()',\r\n              updatedAt: 'now()',\r\n              status: 'awaiting confirmation',\r\n              urgent: urgent || false,\r\n            })\r\n            .then(request => handleResponse(res, 201, request))\r\n            .catch(() => handleResponse(res, 500, 'something went wrong! please try again later'));\r\n        }\r\n        return handleResponse(res, 401, 'user identity not verified! please make sure you are logged in')\r\n      })\r\n      .catch(() => handleResponse(res, 500, 'something went wrong! please try again later'));\r\n  }\r\n\r\n  // get a signle requests for a logged in user\r\n  static getOneRequest(req, res) {\r\n    const requestId = parseInt(req.params.requestId, 10);\r\n    const userId = parseInt(req.body.decode.id, 10);\r\n    return requests\r\n      .find({\r\n        where: {\r\n          userId,\r\n          id: requestId,\r\n        },\r\n      })\r\n      .then((request) => {\r\n        if (!request) {\r\n          return handleResponse(res,404, 'request not found');\r\n        }\r\n        return users\r\n        .getClient(request.userId)\r\n        .then((client) => {\r\n          if (client) {\r\n            return handleResponse(res, 200,  {\r\n              request,\r\n              user: client,\r\n            });\r\n          }\r\n          return handleResponse(res, 200,  {\r\n            request,\r\n            user: { message: 'user not found' },\r\n          });\r\n        })\r\n      })\r\n      .catch(() =>  handleResponse(res, 500, 'something went wrong. please try again'));\r\n  }\r\n\r\n  // get all request for a logged in user\r\n  static getAllRequests(req, res) {\r\n    const userId = parseInt(req.body.decode.id, 10);\r\n    return requests\r\n      .findAll({\r\n        where: {\r\n          userId,\r\n        },\r\n      })\r\n      .then((clientRequests) => {\r\n        if (clientRequests) {\r\n          if (clientRequests.length === 0) {\r\n            handleResponse(res, 200, []);\r\n          }\r\n          const clientsInfo = [];\r\n          clientRequests.forEach((request) => {\r\n            return users\r\n              .getClient(request.adminId)\r\n              .then((clientInfo) => {\r\n                return clientInfo;\r\n              })\r\n              .then(clientInfo => {\r\n                if (clientInfo) {\r\n                  clientsInfo.push({\r\n                    request,\r\n                    user: clientInfo,\r\n                  });\r\n                } else {\r\n                  clientsInfo.push({\r\n                    request,\r\n                    user: { message: 'user not found' },\r\n                });\r\n                }\r\n                if (clientsInfo.length === clientRequests.length) {\r\n                  return handleResponse(res, 200, clientsInfo );\r\n                }\r\n              })\r\n              .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\r\n          })\r\n        }\r\n      })\r\n      .catch(() =>  handleResponse(res, 500, 'something went wrong. please try again'));\r\n  }\r\n\r\n  // update a request\r\n  static updateRequest(req, res) {\r\n    const {\r\n      category,\r\n      description,\r\n      address,\r\n      adminId,\r\n      urgent,\r\n    } = req.body;\r\n    const requestId = parseInt(req.params.requestId, 10);\r\n    const userId = parseInt(req.body.decode.id, 10);\r\n    return requests\r\n      .find({\r\n        where: {\r\n          userId,\r\n          id: requestId,\r\n        },\r\n      })\r\n      .then((request) => {\r\n        if (request) {\r\n          // users should not be able to modify the status of a request\r\n          if (request.status === 'approved' || request.status === 'resolved') {\r\n            return handleResponse(res, 200, 'request cannot be modify after it has been approved or resolved')\r\n          }\r\n          return requests\r\n            .update(\r\n              {\r\n                id: request.id,\r\n              },\r\n              {\r\n                updatedAt: 'now()',\r\n                category: category || request.category,\r\n                description: description || request.description,\r\n                address: address || request.address,\r\n                adminId: adminId || request.adminId,\r\n                urgent: urgent || request.urgent,\r\n              },\r\n            )\r\n            .then(newRequest => handleResponse(res, 200, newRequest))\r\n            .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\r\n        }\r\n        return handleResponse(res, 404, 'requests not found')\r\n      })\r\n      .catch(() => handleResponse(res, 505, 'something went wrong. please try again'));\r\n  }\r\n\r\n  static deleteRequest(req, res) {\r\n    const requestId = parseInt(req.params.requestId, 10);\r\n    const userId = parseInt(req.body.decode.id, 10);\r\n    return requests\r\n      .destroy({\r\n        where: {\r\n          userId: userId,\r\n          id: requestId,\r\n        },\r\n      })\r\n      .then((rows) => {\r\n        if (rows.length === 0) {\r\n          return handleResponse(res, 404, 'request not found, not action taken')\r\n        }\r\n        return handleResponse(res, 200, 'request has been deleted');\r\n      })\r\n      .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\r\n  }\r\n};\r\nexport default RequestController;\r\n"]}