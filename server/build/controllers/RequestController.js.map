{"version":3,"sources":["../../src/controllers/RequestController.js"],"names":["requests","models","users","RequestController","req","res","body","category","description","address","urgent","adminId","userId","findById","parseInt","then","user","admin","serviceName","create","issueDate","updatedAt","status","request","catch","requestId","params","decode","id","find","where","getClient","client","message","findAll","clientRequests","length","clientsInfo","forEach","clientInfo","push","update","newRequest","destroy","rows"],"mappings":"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","file":"RequestController.js","sourcesContent":["\nimport models from './../models/index';\nimport { handleResponse } from './../services/services';\n\nconst { requests, users } = models;\n/* eslint-disable consistent-return */\nconst RequestController = class {\n  // add a new request\n  static addRequest(req, res) {\n    const {\n      category,\n      description,\n      address,\n      urgent,\n      adminId,\n      userId,\n    } = req.body;\n\n    return users.findById(parseInt(userId, 10))\n      .then((user) => {\n        if (user) {\n          return users\n            .findById(parseInt(adminId, 10))\n            .then((admin) => {\n              if (admin && admin.serviceName) {\n                return requests\n                  .create({\n                    userId,\n                    category,\n                    description,\n                    address,\n                    adminId,\n                    issueDate: 'now()',\n                    updatedAt: 'now()',\n                    status: 'awaiting confirmation',\n                    urgent: urgent || false,\n                  })\n                  .then(request => handleResponse(res, 201, request))\n                  .catch(() => handleResponse(res, 500, 'something went wrong! please try again later'));\n              }\n              return handleResponse(res, 404, 'service not found');\n            });\n        }\n        return handleResponse(res, 401, 'user identity not verified! please make sure you are logged in');\n      })\n      .catch(() => handleResponse(res, 500, 'something went wrong! please try again later'));\n  }\n\n  // get a signle requests for a logged in user\n  static getOneRequest(req, res) {\n    const requestId = parseInt(req.params.requestId, 10);\n    const userId = parseInt(req.body.decode.id, 10);\n    return requests\n      .find({\n        where: {\n          userId,\n          id: requestId,\n        },\n      })\n      .then((request) => {\n        if (!request) {\n          return handleResponse(res, 404, 'request not found');\n        }\n        return users\n          .getClient(request.adminId)\n          .then((client) => {\n            if (client) {\n              return handleResponse(res, 200, {\n                request,\n                user: client,\n              });\n            }\n            return handleResponse(res, 200, {\n              request,\n              user: { message: 'user not found' },\n            });\n          });\n      })\n      .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\n  }\n\n  // get all request for a logged in user\n  static getAllRequests(req, res) {\n    const userId = parseInt(req.body.decode.id, 10);\n    return requests\n      .findAll({\n        where: {\n          userId,\n        },\n      })\n      .then((clientRequests) => {\n        if (clientRequests) {\n          if (clientRequests.length === 0) {\n            return handleResponse(res, 200, []);\n          }\n          const clientsInfo = [];\n          clientRequests.forEach((request) => {\n            return users\n              .getClient(request.adminId)\n              .then((clientInfo) => {\n                return clientInfo;\n              })\n              .then((clientInfo) => {\n                if (clientInfo) {\n                  clientsInfo.push({\n                    request,\n                    user: clientInfo,\n                  });\n                } else {\n                  clientsInfo.push({\n                    request,\n                    user: { message: 'user not found' },\n                  });\n                }\n                if (clientsInfo.length === clientRequests.length) {\n                  return handleResponse(res, 200, clientsInfo);\n                }\n              })\n              .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\n          });\n        }\n      })\n      .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\n  }\n\n  // update a request\n  static updateRequest(req, res) {\n    const {\n      category,\n      description,\n      address,\n      adminId,\n      urgent,\n    } = req.body;\n    const requestId = parseInt(req.params.requestId, 10);\n    const userId = parseInt(req.body.decode.id, 10);\n    return requests\n      .find({\n        where: {\n          userId,\n          id: requestId,\n        },\n      })\n      .then((request) => {\n        if (request) {\n          // users should not be able to modify the status of a request\n          if (request.status === 'pending' || request.status === 'resolved') {\n            return handleResponse(res, 200, 'request cannot be modify after it has been approved or resolved');\n          }\n          return requests\n            .update(\n              {\n                id: request.id,\n              },\n              {\n                updatedAt: 'now()',\n                category: category || request.category,\n                description: description || request.description,\n                address: address || request.address,\n                adminId: adminId || request.adminId,\n                urgent: urgent || request.urgent,\n              },\n            )\n            .then((newRequest) => {\n              // get the associated admin\n              return users\n                .getClient(newRequest.adminId)\n                .then((admin) => {\n                  if (admin) {\n                    return handleResponse(res, 200, {\n                      request: newRequest,\n                      user: admin,\n                    });\n                  }\n                  return handleResponse(res, 200, {\n                    request: newRequest,\n                    user: { message: 'user not found' },\n                  });\n                })\n                .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\n            })\n            .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\n        }\n        return handleResponse(res, 404, 'request not found');\n      })\n      .catch(() => handleResponse(res, 505, 'something went wrong. please try again'));\n  }\n\n  static deleteRequest(req, res) {\n    const requestId = parseInt(req.params.requestId, 10);\n    const userId = parseInt(req.body.decode.id, 10);\n    return requests\n      .destroy({\n        where: {\n          userId,\n          id: requestId,\n        },\n      })\n      .then((rows) => {\n        if (rows.length === 0) {\n          return handleResponse(res, 404, 'request not found, not action taken');\n        }\n        return handleResponse(res, 200, 'request has been deleted');\n      })\n      .catch(() => handleResponse(res, 500, 'something went wrong. please try again'));\n  }\n};\nexport default RequestController;\n"]}