{"version":3,"sources":["../../src/controllers/RequestController.js"],"names":["requests","models","users","RequestController","req","res","id","body","decode","userId","category","description","address","urgent","adminId","parseInt","trim","status","send","message","findById","then","user","create","issueDate","updatedAt","request","catch","error","requestId","params","find","where","findAll","clientRequests","length","clientsInfo","forEach","getClient","adminid","clientInfo","push","update","newRequest","destroy","rows"],"mappings":"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","file":"RequestController.js","sourcesContent":["\r\nimport models from './../models/index';\r\n\r\nconst { requests, users } = models;\r\nconst RequestController = class {\r\n  // add a new request\r\n  static addRequest(req, res) {\r\n    const { id } = req.body.decode;\r\n    const userId = id;\r\n    const {\r\n      category,\r\n      description,\r\n      address,\r\n      urgent,\r\n      adminId,\r\n    } = req.body;\r\n\r\n    if (!parseInt(userId, 10) || description.trim() === '' || address.trim() === '' || category.trim() === '') {\r\n      return res.status(400).send({ message: 'missing required field' });\r\n    }\r\n    if (!urgent && urgent.trim() !== '') {\r\n      return res.status(400).send({ message: 'typeError field urgent must be a boolean' });\r\n    }\r\n    if (!parseInt(adminId)) {\r\n      return res.status(400).send({ message: 'please select a service'})\r\n    }\r\n\r\n    return users.findById(parseInt(userId, 10))\r\n      .then((user) => {\r\n        if (user) {\r\n          requests\r\n            .create({\r\n              userId,\r\n              category,\r\n              description,\r\n              address,\r\n              adminId,\r\n              issueDate: 'now()',\r\n              updatedAt: 'now()',\r\n              status: 'awaiting confirmation',\r\n              urgent: urgent || false,\r\n            })\r\n            .then(request => res.status(201).send(request))\r\n            .catch(error => res.status(400).send(error));\r\n        }\r\n      })\r\n      .catch(error => res.status(404).send(error));\r\n  }\r\n\r\n  // get a signle requests for a logged in user\r\n  static getOneRequest(req, res) {\r\n    const requestId = parseInt(req.params.requestId, 10);\r\n    const userId = parseInt(req.body.decode.id, 10);\r\n    if (!requestId || !userId) {\r\n      return res.status(400).send({ message: 'missing required field' });\r\n    }\r\n    return requests\r\n      .find({\r\n        where: {\r\n          userId,\r\n          id: requestId,\r\n        },\r\n      })\r\n      .then((request) => {\r\n        if (!request) {\r\n          return res.status(404).send({ message: 'request not found' });\r\n        }\r\n        return res.status(200).send(request);\r\n      })\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n\r\n  // get all request for a logged in user\r\n  static getAllRequests(req, res) {\r\n    const userId = parseInt(req.body.decode.id, 10);\r\n    if (!userId) {\r\n      return res.status(400).send({ message: 'missing required field' });\r\n    }\r\n    return requests\r\n      .findAll({\r\n        where: {\r\n          userId,\r\n        },\r\n      })\r\n      .then((clientRequests) => {\r\n        if (clientRequests) {\r\n          if (clientRequests.length === 0) {\r\n            return res.status(200).send([])\r\n          }\r\n          const clientsInfo = [];\r\n          clientRequests.forEach((request) => {\r\n            return users\r\n              .getClient(request.adminid)\r\n              .then((clientInfo) => {\r\n                return clientInfo;\r\n              })\r\n              .then(clientInfo => {\r\n                if (clientInfo) {\r\n                  clientsInfo.push({\r\n                    request,\r\n                    user: clientInfo,\r\n                  });\r\n                } else {\r\n                  clientsInfo.push({\r\n                    request,\r\n                    user: { message: 'user not found' },\r\n                });\r\n                }\r\n                if (clientsInfo.length === clientRequests.length) {\r\n                  return res.status(200).send(clientsInfo)\r\n                }\r\n                \r\n              })\r\n              .catch(error => res.status(500).send(error));\r\n          })\r\n        }\r\n      })\r\n      .catch(error => res.status(500).send({ message: 'something went wrong. please try again' }))\r\n  }\r\n\r\n  // update a request\r\n  static updateRequest(req, res) {\r\n    const {\r\n      category,\r\n      description,\r\n      address,\r\n      adminId,\r\n      urgent,\r\n    } = req.body;\r\n    const requestId = parseInt(req.params.requestId, 10);\r\n    const userId = parseInt(req.body.decode.id, 10);\r\n    if (!requestId || !userId) {\r\n      return res.status(400).send({ message: 'missing required field' });\r\n    }\r\n    if (category === 'select' || category === 'Select') {\r\n      return res.status(400).send({ message: 'Please select a category for your repair request'})\r\n    }\r\n    if (!parseInt(adminId)) {\r\n      return res.status(400).send({ message: 'please select a service provider'})\r\n    }\r\n    return requests\r\n      .find({\r\n        where: {\r\n          userId,\r\n          id: requestId,\r\n        },\r\n      })\r\n      .then((request) => {\r\n        // users should not be able to modify the status of a request\r\n        if (request.status === 'approved' || request.status === 'resolved') {\r\n          return res.status(200).send({ message: 'request cannot be modify after it has been approved or resolved' });\r\n        }\r\n        return requests\r\n          .update(\r\n            {\r\n              id: request.id,\r\n            },\r\n            {\r\n              updatedAt: 'now()',\r\n              category: category || request.category,\r\n              description: description || request.description,\r\n              address: address || request.address,\r\n              adminId: adminId || request.adminid,\r\n              urgent: urgent || request.urgent,\r\n            },\r\n          )\r\n          .then(newRequest => res.status(200).send(newRequest))\r\n          .catch(error => res.status(500).send(error));\r\n      })\r\n      .catch(error => res.status(404).send(error));\r\n  }\r\n\r\n  static deleteRequest(req, res) {\r\n    const requestId = parseInt(req.params.requestId, 10);\r\n    const userId = parseInt(req.body.decode.id, 10);\r\n    if (!requestId || !userId) {\r\n      return res.status(400).send({ message: 'missing required field' });\r\n    }\r\n    return requests\r\n      .destroy({\r\n        where: {\r\n          userId,\r\n          id: requestId,\r\n        },\r\n      })\r\n      .then((rows) => {\r\n        if (rows.length === 0) {\r\n          res.status(404).send({ message: 'request not found, not action taken' });\r\n        }\r\n        res.status(200).send({ message: 'request has been deleted' });\r\n      })\r\n      .catch(error => res.status(404).send(error));\r\n  }\r\n};\r\nexport default RequestController;\r\n"]}