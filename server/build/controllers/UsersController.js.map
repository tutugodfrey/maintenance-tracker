{"version":3,"sources":["../../src/controllers/UsersController.js"],"names":["dotenv","config","users","models","UsersController","req","res","body","fullname","username","email","address","phone","password","isAdmin","serviceName","imgUrl","find","where","type","then","user","salt","bcrypt","genSaltSync","hashedPassword","hashSync","create","Boolean","createdUser","authenKeys","id","token","jwt","sign","process","env","SECRET_KEY","expiresIn","catch","passwordConfirmed","compareSync","findServiceName","serviceNames"],"mappings":"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","file":"UsersController.js","sourcesContent":["import dotenv from 'dotenv-safe';\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\nimport models from './../models/index';\r\nimport { handleResponse } from './../services/services';\r\n\r\ndotenv.config();\r\n\r\nconst { users } = models;\r\nconst UsersController = class {\r\n  // create a new user account\r\n  static signup(req, res) {\r\n    const {\r\n      fullname,\r\n      username,\r\n      email,\r\n      address,\r\n      phone,\r\n      password,\r\n      isAdmin,\r\n      serviceName,\r\n      imgUrl,\r\n    } = req.body;\r\n\r\n    return users\r\n      .find({\r\n        where: {\r\n          username,\r\n          email,\r\n        },\r\n        type: 'or',\r\n      })\r\n      .then((user) => {\r\n        if (!user) {\r\n          const salt = bcrypt.genSaltSync(10);\r\n          const hashedPassword = bcrypt.hashSync(password, salt);\r\n          return users\r\n            .create({\r\n              fullname,\r\n              email,\r\n              username,\r\n              address,\r\n              serviceName,\r\n              phone,\r\n              imgUrl,\r\n              password: hashedPassword,\r\n              isAdmin: Boolean(isAdmin) || false,\r\n            })\r\n            .then((createdUser) => {\r\n              const authenKeys = {\r\n                fullname: createdUser.fullname,\r\n                email: createdUser.email,\r\n                username: createdUser.username,\r\n                phone: createdUser.phone,\r\n                imgUrl: createdUser.imgUrl,\r\n                id: createdUser.id,\r\n                isAdmin: createdUser.isAdmin,\r\n                serviceName: createdUser.serviceName,\r\n              };\r\n              const token = jwt.sign(authenKeys, process.env.SECRET_KEY, { expiresIn: '48h' });\r\n              handleResponse(res, 201, {\r\n                token,\r\n                fullname: createdUser.fullname,\r\n                email: createdUser.email,\r\n                username: createdUser.username,\r\n                imgUrl: createdUser.imgUrl,\r\n                id: createdUser.id,\r\n                isAdmin: createdUser.isAdmin,\r\n                serviceName: createdUser.serviceName,\r\n              });\r\n            })\r\n            .catch(() => handleResponse(res, 500, 'something went wrong! try again later'));\r\n        }\r\n        return handleResponse(res, 409, 'user already exist');\r\n      })\r\n      .catch(() => handleResponse(res, 500, 'something went wrong! try again later'));\r\n  }\r\n\r\n  // signin controller\r\n  static signin(req, res) {\r\n    const {\r\n      username,\r\n      password,\r\n    } = req.body;\r\n\r\n    return users\r\n      .find({\r\n        where: {\r\n          username,\r\n        },\r\n      })\r\n      .then((user) => {\r\n        if (user) {\r\n          let passwordConfirmed = false;\r\n          const hashedPassword = user.password;\r\n          passwordConfirmed = bcrypt.compareSync(password, hashedPassword);\r\n          if (passwordConfirmed) {\r\n            const authenKeys = {\r\n              username: user.username,\r\n              fullname: user.fullname,\r\n              isAdmin: user.isAdmin,\r\n              id: user.id,\r\n              imgUrl: user.imgUrl,\r\n              serviceName: user.serviceName,\r\n            };\r\n            const token = jwt.sign(authenKeys, process.env.SECRET_KEY, { expiresIn: '48h' });\r\n            return handleResponse(res, 200, {\r\n              token,\r\n              fullname: user.fullname,\r\n              email: user.email,\r\n              username: user.username,\r\n              imgUrl: user.imgUrl,\r\n              id: user.id,\r\n              isAdmin: user.isAdmin,\r\n              serviceName: user.serviceName,\r\n            });\r\n          }\r\n          return handleResponse(res, 401, 'authentication fail! check your username or password');\r\n        }\r\n        return handleResponse(res, 401, 'authentication fail! check your username or password');\r\n      })\r\n      .catch(() => handleResponse(res, 500, 'something went wrong! try again later'));\r\n  }\r\n\r\n  static getServiceName(req, res) {\r\n    return users\r\n      .findServiceName()\r\n      .then((serviceNames) => {\r\n        if (serviceNames) {\r\n          return handleResponse(res, 200, serviceNames);\r\n        }\r\n        return handleResponse(res, 404, 'service not avialable yet');\r\n      })\r\n      .catch(() => handleResponse(res, 500, 'something went wrong! try again later'));\r\n  }\r\n};\r\n\r\nexport default UsersController;\r\n"]}