{"version":3,"sources":["../../src/controllers/UsersController.js"],"names":["dotenv","config","users","models","UsersController","req","res","body","fullname","username","email","address","phone","password","isAdmin","serviceName","imgUrl","find","where","type","then","user","salt","bcrypt","genSaltSync","hashedPassword","hashSync","create","Boolean","createdUser","authenKeys","id","token","jwt","sign","process","env","SECRET_KEY","expiresIn","catch","passwordConfirmed","compareSync","findServiceName","serviceNames"],"mappings":"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","file":"UsersController.js","sourcesContent":["import dotenv from 'dotenv-safe';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcrypt';\nimport models from './../models/index';\nimport { handleResponse } from './../services/services';\n\ndotenv.config();\n\nconst { users } = models;\nconst UsersController = class {\n  // create a new user account\n  static signup(req, res) {\n    const {\n      fullname,\n      username,\n      email,\n      address,\n      phone,\n      password,\n      isAdmin,\n      serviceName,\n      imgUrl,\n    } = req.body;\n\n    return users\n      .find({\n        where: {\n          username,\n          email,\n        },\n        type: 'or',\n      })\n      .then((user) => {\n        if (!user) {\n          const salt = bcrypt.genSaltSync(10);\n          const hashedPassword = bcrypt.hashSync(password, salt);\n          return users\n            .create({\n              fullname,\n              email,\n              username,\n              address,\n              serviceName,\n              phone,\n              imgUrl,\n              password: hashedPassword,\n              isAdmin: Boolean(isAdmin) || false,\n            })\n            .then((createdUser) => {\n              const authenKeys = {\n                fullname: createdUser.fullname,\n                email: createdUser.email,\n                username: createdUser.username,\n                phone: createdUser.phone,\n                imgUrl: createdUser.imgUrl,\n                id: createdUser.id,\n                isAdmin: createdUser.isAdmin,\n                serviceName: createdUser.serviceName,\n              };\n              const token = jwt.sign(authenKeys, process.env.SECRET_KEY, { expiresIn: '48h' });\n              handleResponse(res, 201, {\n                token,\n                fullname: createdUser.fullname,\n                email: createdUser.email,\n                username: createdUser.username,\n                imgUrl: createdUser.imgUrl,\n                id: createdUser.id,\n                isAdmin: createdUser.isAdmin,\n                serviceName: createdUser.serviceName,\n              });\n            })\n            .catch(() => handleResponse(res, 500, 'something went wrong! try again later'));\n        }\n        return handleResponse(res, 409, 'user already exist');\n      })\n      .catch(() => handleResponse(res, 500, 'something went wrong! try again later'));\n  }\n\n  // signin controller\n  static signin(req, res) {\n    const {\n      username,\n      password,\n    } = req.body;\n\n    return users\n      .find({\n        where: {\n          username,\n        },\n      })\n      .then((user) => {\n        if (user) {\n          let passwordConfirmed = false;\n          const hashedPassword = user.password;\n          passwordConfirmed = bcrypt.compareSync(password, hashedPassword);\n          if (passwordConfirmed) {\n            const authenKeys = {\n              username: user.username,\n              email: user.email,\n              fullname: user.fullname,\n              isAdmin: user.isAdmin,\n              id: user.id,\n              imgUrl: user.imgUrl,\n              serviceName: user.serviceName,\n            };\n            const token = jwt.sign(authenKeys, process.env.SECRET_KEY, { expiresIn: '48h' });\n            return handleResponse(res, 200, {\n              token,\n              fullname: user.fullname,\n              email: user.email,\n              username: user.username,\n              imgUrl: user.imgUrl,\n              id: user.id,\n              isAdmin: user.isAdmin,\n              serviceName: user.serviceName,\n            });\n          }\n          return handleResponse(res, 401, 'authentication fail! check your username or password');\n        }\n        return handleResponse(res, 401, 'authentication fail! check your username or password');\n      })\n      .catch(() => handleResponse(res, 500, 'something went wrong! try again later'));\n  }\n\n  static getServiceName(req, res) {\n    return users\n      .findServiceName()\n      .then((serviceNames) => {\n        if (serviceNames) {\n          return handleResponse(res, 200, serviceNames);\n        }\n        return handleResponse(res, 404, 'service not avialable yet');\n      })\n      .catch(() => handleResponse(res, 500, 'something went wrong! try again later'));\n  }\n};\n\nexport default UsersController;\n"]}