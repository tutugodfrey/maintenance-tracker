{"version":3,"sources":["../../src/controllers/UsersController.js"],"names":["dotenv","config","users","models","UsersController","req","res","body","fullname","username","email","address","phone","password","confirmPassword","isAdmin","serviceName","trim","status","send","message","emailRegExp","match","length","Boolean","file","find","where","then","user","bcrypt","genSalt","err","salt","hash","hashErr","create","imgUrl","signup","authenKeys","imgurl","id","isadmin","token","jwt","sign","process","env","SECRET_KEY","expiresIn","catch","error","type","destination","Services","getImgUrl","path","passwordConfirmed","hashedPassword","compareSync","success","findServiceName","serviceNames"],"mappings":"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","file":"UsersController.js","sourcesContent":["import dotenv from 'dotenv-safe';\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\nimport models from './../models/index';\r\nimport Services from './../helpers/Services';\r\n\r\ndotenv.config();\r\n\r\nconst { users } = models;\r\nconst UsersController = class {\r\n  // create a new user account\r\n  static signup(req, res) {\r\n    const {\r\n      fullname,\r\n      username,\r\n      email,\r\n      address,\r\n      phone,\r\n      password,\r\n      confirmPassword,\r\n      isAdmin,\r\n    } = req.body;\r\n    let { serviceName } = req.body;\r\n    // validate input\r\n    if (username.trim() === '' || fullname.trim() === '' || email.trim() === ''\r\n    || password.trim() === '' || confirmPassword.trim() === '') {\r\n      return res.status(400).send({ message: 'missing required field' });\r\n    }\r\n    const emailRegExp = /\\w+@\\w+\\.(net|com|org)/;\r\n    if (!email.match(emailRegExp)) {\r\n      return res.status(400).send({ message: 'typeError: invalid email format' });\r\n    }\r\n\r\n    if (password.length < 6 || confirmPassword.length < 6) {\r\n      return res.status(400).send({ message: 'length of password must not be less than 6' });\r\n    }\r\n\r\n    if (password !== confirmPassword) {\r\n      return res.status(400).send({ message: 'password does not match' });\r\n    }\r\n\r\n    if (address.trim() === '') {\r\n      return res.status(400).send({ message: 'missing required field' });\r\n    }\r\n    if (!isAdmin && isAdmin.trim() !== '') {\r\n      return res.status(400).send({ message: 'isAdmin must be a true if set' });\r\n    }\r\n\r\n    if (!isAdmin) {\r\n      serviceName = '';\r\n    }\r\n\r\n    if (Boolean(isAdmin) && serviceName.trim() === '') {\r\n      return res.status(400).send({ message: 'please provide a service name for users to recognize your services' });\r\n    }\r\n    // console.log(req.body)\r\n    if (!req.file) {\r\n      return users\r\n        .find({\r\n          where: {\r\n            username,\r\n            email,\r\n          },\r\n        })\r\n        .then((user) => {\r\n          if (!user) {\r\n            bcrypt.genSalt(10, (err, salt) => {\r\n              bcrypt.hash(password, salt, (hashErr, hash) => {\r\n                users\r\n                  .create({\r\n                    fullname,\r\n                    email,\r\n                    username,\r\n                    address,\r\n                    phone,\r\n                    serviceName,\r\n                    password: hash,\r\n                    isAdmin: Boolean(isAdmin) || false,\r\n                    imgUrl: 'no/file/uploaded',\r\n                  })\r\n                  .then((signup) => {\r\n                    const authenKeys = {\r\n                      fullname: signup.fullname,\r\n                      email: signup.email,\r\n                      username: signup.username,\r\n                      imgUrl: signup.imgurl,\r\n                      id: signup.id,\r\n                      isAdmin: signup.isadmin,\r\n                    };\r\n                    const token = jwt.sign(authenKeys, process.env.SECRET_KEY, { expiresIn: '48h' });\r\n                    res.status(201).send({\r\n                      token,\r\n                      email: signup.email,\r\n                      username: signup.username,\r\n                      imgUrl: signup.imgurl,\r\n                      id: signup.id,\r\n                      isAdmin: signup.isadmin,\r\n                    });\r\n                  })\r\n                  .catch(error => res.status(400).send({ error }));\r\n              });\r\n            });\r\n          } else {\r\n            res.status(409).send({ message: 'user already exist' });\r\n          }\r\n        })\r\n        .catch(error => res.status(500).send(error));\r\n    }\r\n    return users\r\n      .find({\r\n        where: {\r\n          username,\r\n          email,\r\n        },\r\n        type: 'or',\r\n      })\r\n      .then((user) => {\r\n        if (!user) {\r\n          // handle uploaded profile pix\r\n          const destination = Services.getImgUrl(req.file.path);\r\n          bcrypt.genSalt(10, (err, salt) => {\r\n            bcrypt.hash(password, salt, (hashErr, hash) => {\r\n              users\r\n                .create({\r\n                  fullname,\r\n                  email,\r\n                  username,\r\n                  address,\r\n                  serviceName,\r\n                  phone,\r\n                  imgUrl: destination,\r\n                  password: hash,\r\n                  isAdmin: Boolean(isAdmin) || false,\r\n                })\r\n                .then((signup) => {\r\n                  const authenKeys = {\r\n                    fullname: signup.fullname,\r\n                    email: signup.email,\r\n                    username: signup.username,\r\n                    phone: signup.phone,\r\n                    imgUrl: signup.imgurl,\r\n                    id: signup.id,\r\n                    isAdmin: signup.isadmin,\r\n                  };\r\n                  const token = jwt.sign(authenKeys, process.env.SECRET_KEY, { expiresIn: '48h' });\r\n                  res.status(201).send({\r\n                    token,\r\n                    fullname: signup.fullname,\r\n                    email: signup.email,\r\n                    username: signup.username,\r\n                    imgUrl: signup.imgurl,\r\n                    id: signup.id,\r\n                    isAdmin: signup.isadmin,\r\n                  });\r\n                })\r\n                .catch(error => res.status(400).send({ error }));\r\n            });\r\n          });\r\n        } else {\r\n          res.status(409).send({ message: 'user already exist' });\r\n        }\r\n      })\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n\r\n  // signin controller\r\n  static signin(req, res) {\r\n    return users\r\n      .find({\r\n        where: {\r\n          username: req.body.username,\r\n        },\r\n      })\r\n      .then((user) => {\r\n        if (user) {\r\n          let passwordConfirmed = false;\r\n          const hashedPassword = user.password;\r\n          const { password } = req.body;\r\n          passwordConfirmed = bcrypt.compareSync(password, hashedPassword);\r\n          if (passwordConfirmed) {\r\n            const authenKeys = {\r\n              username: user.username,\r\n              fullname: user.fullname,\r\n              isAdmin: user.isadmin,\r\n              id: user.id,\r\n              imgUrl: user.imgurl,\r\n            };\r\n            const token = jwt.sign(authenKeys, process.env.SECRET_KEY, { expiresIn: '48h' });\r\n            res.status(200).send({\r\n              token,\r\n              success: true,\r\n              fullname: user.fullname,\r\n              email: user.email,\r\n              username: user.username,\r\n              imgUrl: user.imgurl,\r\n              id: user.id,\r\n              isAdmin: user.isadmin,\r\n            });\r\n          } else {\r\n            res.status(400).send({ message: 'authentication fail! check your username or password' });\r\n          }\r\n        } else {\r\n          res.status(400).send({ message: 'authentication fail! check your username or password' });\r\n        }\r\n      })\r\n      .catch(error => res.status(400).send(error));\r\n  }\r\n\r\n  static getServiceName(req, res) {\r\n    return users\r\n      .findServiceName()\r\n      .then((serviceNames) => {\r\n        if (serviceNames) {\r\n          res.status(200).send(serviceNames);\r\n        }\r\n        res.status(404).send({ message: 'service not avialable yet' });\r\n      })\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n};\r\n\r\nexport default UsersController;\r\n"]}