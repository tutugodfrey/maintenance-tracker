{"version":3,"sources":["../../src/test/contactTest.js"],"names":["server","Server","app","expressServer","expect","chai","use","chaiHttp","signedInUser","message4","title","message","userId","senderId","message5","receiverId","adminUser","id","regularUser1","createdMessage1","createdMessage2","describe","it","request","post","send","username","password","then","res","Object","assign","body","to","have","status","be","an","property","token","a","userMessage","set","message3","get","length","at","least","regularUser2","equal","adminMessage"],"mappings":"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","file":"contactTest.js","sourcesContent":["import chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport Server from './../app';\r\nimport { adminUser, regularUser1, regularUser2 } from './signupTest';\r\n\r\nconst server = new Server();\r\nconst app = server.expressServer();\r\nconst { expect } = chai;\r\nchai.use(chaiHttp);\r\nconst signedInUser = {};\r\nconst message4 = {\r\n  title: 'Apologise',\r\n  message: 'Please we will attend to it right away',\r\n  userId: 0,\r\n  senderId: 7,\r\n};\r\n\r\nconst message5 = {\r\n  title: 'unresolved request',\r\n  message: ' ',\r\n  receiverId: adminUser.id,\r\n  senderId: regularUser1.id,\r\n};\r\n\r\nconst createdMessage1 = {};\r\nconst createdMessage2 = {};\r\n\r\n// tests for the contact model\r\nexport default describe('contacts', () => {\r\n  describe('user send message', () => {\r\n    it('should signin a User in and give a token', () => {\r\n      return chai.request(app)\r\n        .post('/api/v1/auth/signin')\r\n        .send({\r\n          username: regularUser1.username,\r\n          password: '123456',\r\n        })\r\n        .then((res) => {\r\n          Object.assign(signedInUser, res.body);\r\n          expect(res).to.have.status(200);\r\n          expect(res.body).to.be.an('Object');\r\n          expect(res.body).to.have.property('token');\r\n          expect(res.body.token).to.be.a('string');\r\n        });\r\n    });\r\n\r\n    describe('user sending messages', () => {\r\n      it('users should be able to send message to the admin', () => {\r\n        const userMessage = {\r\n          title: 'unresolved request',\r\n          message: 'request to replace wall socket was not attended to',\r\n          receiverId: adminUser.id,\r\n          senderId: signedInUser.id,\r\n        };\r\n        return chai.request(app)\r\n          .post('/api/v1/contacts')\r\n          .set('token', signedInUser.token)\r\n          .send(userMessage)\r\n          .then((res) => {\r\n            Object.assign(createdMessage1, res.body);\r\n            expect(res).to.have.status(201);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      });\r\n      // failing here\r\n      it('should return bad request if required fields are not presents', () => {\r\n        const message3 = {\r\n          title: 'Apologise',\r\n          message: '',\r\n          senderId: regularUser1.id,\r\n          receiverId: adminUser.id,\r\n        };\r\n        return chai.request(app)\r\n          .post('/api/v1/contacts')\r\n          .set('token', signedInUser.token)\r\n          .send(message3)\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      });\r\n\r\n      it('should not create a message for a sender that does not exist', () => {\r\n        return chai.request(app)\r\n          .post('/api/v1/contacts')\r\n          .set('token', signedInUser.token)\r\n          .send(message4)\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      });\r\n\r\n      it('should not create a message if no message is posted', () => {\r\n        return chai.request(app)\r\n          .post('/api/v1/contacts')\r\n          .set('token', signedInUser.token)\r\n          .send(message5)\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      });\r\n    });\r\n\r\n    describe('get messages', () => {\r\n      it('should return all messages for the given userId', () => {\r\n        return chai.request(app)\r\n          .get(`/api/v1/contacts?userId=${regularUser1.id}`)\r\n          .set('token', signedInUser.token)\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('array');\r\n            expect(res.body.length).to.be.at.least(1);\r\n          });\r\n      });\r\n\r\n      it('should return an empty array if no message exist for the given userId', () => {\r\n        return chai.request(app)\r\n          .get('/api/v1/contacts')\r\n          // regularuser2 does not have any messages\r\n          .set('token', regularUser2.token)\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('array');\r\n            expect(res.body.length).to.equal(0);\r\n          });\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('admin messages', () => {\r\n    it('should signin a User in and give a token', () => {\r\n      return chai.request(app)\r\n        .post('/api/v1/auth/signin')\r\n        .send({\r\n          username: adminUser.username,\r\n          password: '123456',\r\n        })\r\n        .then((res) => {\r\n          Object.assign(signedInUser, res.body);\r\n          expect(res).to.have.status(200);\r\n          expect(res.body).to.be.an('Object');\r\n          expect(res.body).to.have.property('token');\r\n          expect(res.body.token).to.be.a('string');\r\n        });\r\n    });\r\n\r\n    describe('admin reply messages', () => {\r\n      it('admin should be able to reply a message', () => {\r\n        const adminMessage = {\r\n          title: 'Apologise',\r\n          message: 'Please we will attend to it right away',\r\n          receiverId: regularUser1.id,\r\n          senderId: adminUser.id,\r\n        };\r\n        return chai.request(app)\r\n          .post('/api/v1/contacts')\r\n          .set('token', signedInUser.token)\r\n          .send(adminMessage)\r\n          .then((res) => {\r\n            Object.assign(createdMessage2, res.body);\r\n            expect(res).to.have.status(201);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      });\r\n    });\r\n    // failing here\r\n    it('should return bad request if required fields are not presents', () => {\r\n      const message3 = {\r\n        title: 'Apologise',\r\n        message: '',\r\n        receiverId: regularUser1.id,\r\n        senderId: adminUser.id,\r\n      };\r\n      return chai.request(app)\r\n        .post('/api/v1/contacts')\r\n        .set('token', signedInUser.token)\r\n        .send(message3)\r\n        .then((res) => {\r\n          expect(res).to.have.status(400);\r\n          expect(res.body).to.be.an('object');\r\n        });\r\n    });\r\n\r\n    it('should not create a message for a sender that does not exist', () => {\r\n      return chai.request(app)\r\n        .post('/api/v1/contacts')\r\n        .set('token', signedInUser.token)\r\n        .send(message4)\r\n        .then((res) => {\r\n          expect(res).to.have.status(400);\r\n          expect(res.body).to.be.an('object');\r\n        });\r\n    });\r\n\r\n    it('should not create a message if no message is posted', () => {\r\n      return chai.request(app)\r\n        .post('/api/v1/contacts')\r\n        .set('token', signedInUser.token)\r\n        .send(message5)\r\n        .then((res) => {\r\n          expect(res).to.have.status(400);\r\n          expect(res.body).to.be.an('object');\r\n        });\r\n    });\r\n  });\r\n\r\n  describe('admin get message', () => {\r\n    it('should return all messages if isAdmin === true', () => {\r\n      return chai.request(app)\r\n        .get('/api/v1/contacts?isAdmin=true')\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(200);\r\n          expect(res.body).to.be.an('array');\r\n          expect(res.body.length).to.equal(2);\r\n        });\r\n    });\r\n  });\r\n});\r\n\r\n"]}