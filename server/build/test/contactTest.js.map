{"version":3,"sources":["../../src/test/contactTest.js"],"names":["expect","chai","use","chaiHttp","signedInUser","userMessage","title","message","receiverId","adminUser","id","adminMessage","regularUser1","createdMessage1","createdMessage2","describe","it","request","app","post","send","username","password","then","res","Object","assign","body","to","have","status","be","an","property","token","a","set","equal","senderId","get","length","at","least","regularUser2"],"mappings":"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","file":"contactTest.js","sourcesContent":["import chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport app from './../app';\nimport { adminUser, regularUser1, regularUser2 } from './signupTest';\n\nconst { expect } = chai;\nchai.use(chaiHttp);\nconst signedInUser = {};\n\nconst userMessage = {\n  title: 'unresolved request',\n  message: '',\n  receiverId: adminUser.id,\n};\n\nconst adminMessage = {\n  title: 'Apologise',\n  message: 'Please we will attend to it right away',\n  receiverId: regularUser1.id,\n};\n\nconst createdMessage1 = {};\nconst createdMessage2 = {};\n\n// tests for the contact model\nexport default describe('contacts controller', () => {\n  describe('user send message', () => {\n    it('should signin a User in and give a token', () => {\n      return chai.request(app)\n        .post('/api/v1/auth/signin')\n        .send({\n          username: regularUser1.username,\n          password: '123456',\n        })\n        .then((res) => {\n          Object.assign(signedInUser, res.body);\n          expect(res).to.have.status(200);\n          expect(res.body).to.be.an('Object');\n          expect(res.body).to.have.property('token');\n          expect(res.body.token).to.be.a('string');\n        });\n    });\n\n    it('should return bad request if message is null', () => {\n      return chai.request(app)\n        .post('/api/v1/contacts')\n        .set('token', signedInUser.token)\n        .send(userMessage)\n        .then((res) => {\n          expect(res).to.have.status(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.have.property('message');\n          expect(res.body.message).to.equal('missing required field');\n        });\n    });\n\n    it('should not create a message if receiverId is not provided', () => {\n      userMessage.receiverId = '';\n      userMessage.message = 'request to replace wall socket was not attended to';\n      return chai.request(app)\n        .post('/api/v1/contacts')\n        .set('token', signedInUser.token)\n        .send(userMessage)\n        .then((res) => {\n          expect(res).to.have.status(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.have.property('message');\n          expect(res.body.message).to.equal('missing required field');\n        });\n    });\n\n    it('should not create a message if receiver does not exist', () => {\n      userMessage.receiverId = 20;\n      return chai.request(app)\n        .post('/api/v1/contacts')\n        .set('token', signedInUser.token)\n        .send(userMessage)\n        .then((res) => {\n          expect(res).to.have.status(404);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.have.property('message');\n          expect(res.body.message).to.equal('receiver does not exist');\n        });\n    });\n\n    it('users should be able to send message to the admin', () => {\n      userMessage.receiverId = adminUser.id;\n      return chai.request(app)\n        .post('/api/v1/contacts')\n        .set('token', signedInUser.token)\n        .send(userMessage)\n        .then((res) => {\n          Object.assign(createdMessage1, res.body);\n          expect(res).to.have.status(201);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.have.property('message');\n          expect(res.body).to.have.property('senderId');\n          expect(res.body).to.have.property('receiverId');\n          expect(res.body).to.have.property('title');\n          expect(res.body.senderId).to.equal(signedInUser.id);\n        });\n    });\n  });\n\n  describe('admin reply users messages', () => {\n    it('should signin a User in and give a token', () => {\n      return chai.request(app)\n        .post('/api/v1/auth/signin')\n        .send({\n          username: adminUser.username,\n          password: '123456',\n        })\n        .then((res) => {\n          Object.assign(signedInUser, res.body);\n          expect(res).to.have.status(200);\n          expect(res.body).to.be.an('Object');\n          expect(res.body).to.have.property('token');\n          expect(res.body.token).to.be.a('string');\n        });\n    });\n\n    it('should return authentication error if token is invalid', () => {\n      return chai.request(app)\n        .post('/api/v1/contacts')\n        .set('token', 'signedInUser.tokeninvalidtoken')\n        .send(adminMessage)\n        .then((res) => {\n          expect(res).to.have.status(401);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.have.property('message');\n          expect(res.body.message).to.equal('authentication fail! invalid token');\n        });\n    });\n\n    it('admin should be able to reply a message', () => {\n      adminMessage.receiverId = regularUser1.id;\n      return chai.request(app)\n        .post('/api/v1/contacts')\n        .set('token', signedInUser.token)\n        .send(adminMessage)\n        .then((res) => {\n          Object.assign(createdMessage2, res.body);\n          expect(res).to.have.status(201);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.have.property('message');\n          expect(res.body).to.have.property('senderId');\n          expect(res.body).to.have.property('receiverId');\n          expect(res.body).to.have.property('title');\n          expect(res.body.senderId).to.equal(adminUser.id);\n        });\n    });\n  });\n\n  describe('get messages', () => {\n    it('should return all messages for the given userId', () => {\n      return chai.request(app)\n        .get('/api/v1/contacts')\n        .set('token', signedInUser.token)\n        .then((res) => {\n          expect(res).to.have.status(200);\n          expect(res.body).to.be.an('array');\n          expect(res.body.length).to.be.at.least(1);\n          expect(res.body[0]).to.have.property('message');\n          expect(res.body[0]).to.have.property('sender');\n          expect(res.body[0]).to.have.property('receiver');\n        });\n    });\n\n    it('should return an empty array if no message exist for the logged in user', () => {\n      return chai.request(app)\n        .get('/api/v1/contacts')\n        // regularuser2 does not have any messages\n        .set('token', regularUser2.token)\n        .then((res) => {\n          expect(res).to.have.status(200);\n          expect(res.body).to.be.an('array');\n          expect(res.body.length).to.equal(0);\n        });\n    });\n  });\n});\n\n"]}