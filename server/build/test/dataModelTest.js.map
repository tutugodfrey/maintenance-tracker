{"version":3,"sources":["../../src/test/dataModelTest.js"],"names":["expect","chai","users","DataModel","user1","fullname","email","address","incompleteUser1","user2","createdUser1","createdUser2","wrongdUser2","id","updateUser2","describe","it","to","be","a","an","instanceOf","modelName","create","then","user","eql","name","catch","error","message","Object","assign","update","newUser2","findById","singleModel","find","where","findAll","allUsers","length","equal","have","of","at","least","destroy"],"mappings":"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","file":"dataModelTest.js","sourcesContent":["\nimport chai from 'chai';\nimport DataModel from './../models/DataModel';\n\nconst { expect } = chai;\nconst users = new DataModel('users');\nconst user1 = {\n  fullname: 'jane doe',\n  email: 'jane_doe@somebody.com',\n  address: 'somewhere in the world',\n};\n\nconst incompleteUser1 = {\n  fullname: '',\n  email: 'jane_doe@somebody.com',\n  address: 'somewhere in the world',\n};\n\nconst user2 = {\n  fullname: 'alice',\n  email: 'alice@somebody.com',\n  address: 'lives in another planet',\n};\nconst createdUser1 = {};\nconst createdUser2 = {};\nconst wrongdUser2 = {\n  id: 2,\n  fullname: 'alice',\n  email: 'alice@somebody.com',\n  address: 'lives in another planet',\n};\nconst updateUser2 = {\n  fullname: 'alice bob',\n  address: 'now living in planet earth',\n};\n\nexport default describe('Data Model test', () => {\n  describe('DataModel', () => {\n    it('should export a function', () => {\n      expect(DataModel).to.be.a('function');\n    });\n  });\n\n  describe('Users', () => {\n    it('should export a function', () => {\n      expect(users).to.be.a('object');\n    });\n    it('should be an instance of DataModel', () => {\n      expect(users).to.be.an.instanceOf(DataModel);\n    });\n\n    it('should have property modelName that is of type string', () => {\n      expect(users.modelName).to.be.an('string');\n    });\n  });\n\n  describe('create method', () => {\n    it('should not create a new user if required is null', () => {\n      users.create(incompleteUser1)\n        .then((user) => {\n          expect(user).to.eql({\n            id: 1,\n            name: 'jane doe',\n            email: 'jane_doe@somebody.com',\n            address: 'somewhere in the world',\n          });\n        })\n        .catch((error) => {\n          expect(error).to.eql({ message: 'missing required field' });\n        });\n    });\n\n    it('it should create new user', () => {\n      users.create(user1)\n        .then((user) => {\n          Object.assign(createdUser1, user);\n          expect(user).to.eql({\n            id: 1,\n            name: 'jane doe',\n            email: 'jane_doe@somebody.com',\n            address: 'somewhere in the world',\n          });\n        });\n    });\n\n    it('it should create another user', () => {\n      users.create(user2)\n        .then((user) => {\n          Object.assign(createdUser2, user);\n          expect(user).to.eql({\n            id: 2,\n            name: 'alice',\n            email: 'alice@somebody.com',\n            address: 'lives in another planet',\n          });\n        });\n    });\n\n    it('should not create duplicate entry for unique keys', () => {\n      users.create(user2)\n        .then((user) => {\n          expect(user).to.eql({\n            id: 2,\n            name: 'alice',\n            email: 'alice@somebody.com',\n            address: 'lives in another planet',\n          });\n        })\n        .catch((error) => {\n          expect(error).to.eql({ message: 'duplicate entry for unique key' });\n        });\n    });\n  });\n\n  describe('update method', () => {\n    it('should update a model', () => {\n      users.update(createdUser2, updateUser2)\n        .then((newUser2) => {\n          expect(newUser2).to.eql({\n            id: 2,\n            email: 'alice@somebody.com',\n            name: 'alice bob',\n            address: 'now living in planet earth',\n          });\n        });\n    });\n\n    it('should not update a wrong model', () => {\n      users.update(wrongdUser2, updateUser2)\n        .then((newUser2) => {\n          expect(newUser2).to.eql({\n            id: 2,\n            email: 'alice@somebody.com',\n            name: 'alice bob',\n            address: 'now living in planet earth',\n          });\n        })\n        .catch((error) => {\n          expect(error).to.eql({ message: 'user not found' });\n        });\n    });\n\n    it('should fail if arguments are not objects', () => {\n      users.update('wrongdUser2', updateUser2)\n        .then((newUser2) => {\n          expect(newUser2).to.eql({\n            id: 2,\n            email: 'alice@somebody.com',\n            name: 'alice bob',\n            address: 'now living in planet earth',\n          });\n        })\n        .catch((error) => {\n          expect(error).to.eql({ message: 'invalid argument passed to update! expects argument1 and argument2 to be objects' });\n        });\n    });\n  });\n\n  describe('findById', () => {\n    it('should return the model with the given id', () => {\n      users.findById(1)\n        .then((user) => {\n          expect(user).to.eql({\n            id: 1,\n            name: 'jane doe',\n            email: 'jane_doe@somebody.com',\n            address: 'somewhere in the world',\n          });\n        });\n    });\n\n    it('should return not found if model with given id is not not found', () => {\n      users.findById(3)\n        .then((user) => {\n          expect(user).to.eql({\n            id: 1,\n            name: 'jane doe',\n            email: 'jane_doe@somebody.com',\n            address: 'somewhere in the world',\n          });\n        })\n        .catch((error) => {\n          expect(error).to.eql({ error: `${users.singleModel} not found` });\n        });\n    });\n  });\n\n  describe('find', () => {\n    it('should find a model that meet the given conditions', () => {\n      //  console.log(users)\n      users.find({\n        where: {\n          name: 'alice bob',\n        },\n      })\n        .then((user) => {\n          expect(user).to.eql({\n            id: 2,\n            email: 'alice@somebody.com',\n            name: 'alice bob',\n            address: 'now living in planet earth',\n          });\n        });\n    });\n\n    it('should only return a model that meet all conditions', () => {\n      users.find({\n        where: {\n          name: 'alice bob',\n          id: 4,\n        },\n      })\n        .then((user) => {\n          expect(user).to.eql({\n            id: 2,\n            email: 'alice@somebody.com',\n            name: 'alice bob',\n            address: 'now living in planet earth',\n          });\n        })\n        .catch((error) => {\n          expect(error).to.eql({ message: 'user not found' });\n        });\n    });\n\n    it('should fail if no condition is specified', () => {\n      users.find()\n        .catch((error) => {\n          expect(error).to.eql({ message: 'missing object propertiy \\'where\\' to find model' });\n        });\n    });\n\n    it('should fail if condition does not have property \"where\"', () => {\n      users.find({})\n        .catch((error) => {\n          expect(error).to.eql({ message: 'missing object propertiy \\'where\\' to find model' });\n        });\n    });\n  });\n\n  describe('findAll', () => {\n    it('should return all models if no condition is specified', () => {\n      users.findAll()\n        .then((allUsers) => {\n          expect(allUsers).to.be.an('array');\n          expect(allUsers.length).to.equal(2);\n        });\n    });\n\n    it('should return all models that meets the specified conditions', () => {\n      users.findAll({\n        where: {\n          address: 'somewhere in the world',\n        },\n      })\n        .then((allUsers) => {\n          expect(allUsers).to.be.an('array');\n          expect(allUsers).to.have.length.of.at.least(1);\n        });\n    });\n\n    it('should return an empty array if models does not that meets the specified conditions', () => {\n      users.findAll({\n        where: {\n          address: 'somewhere the world',\n        },\n      })\n        .then((allUsers) => {\n          expect(allUsers).to.be.an('array');\n          expect(allUsers).to.have.length(0);\n        });\n    });\n  });\n  describe('destroy', () => {\n    it('should delete a model that meets the specified condition', () => {\n      users.destroy({\n        where: {\n          id: 1,\n        },\n      })\n        .then((message) => {\n          expect(message).to.eql({ message: 'user has been deleted' });\n        });\n    });\n\n    it('should do nothing if no model meet the specified condition', () => {\n      users.destroy({\n        where: {\n          name: 'linda',\n        },\n      })\n        .catch((message) => {\n          expect(message).to.eql({ message: `${users.singleModel} not found, not action taken` });\n        });\n    });\n  });\n});\n"]}