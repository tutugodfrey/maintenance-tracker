{"version":3,"sources":["../../src/test/userRequestTest.js"],"names":["expect","chai","use","chaiHttp","signedInUser","createdRequest1","createdRequest2","request4","category","description","urgent","address","userId","status","describe","it","request","app","post","send","username","regularUser1","password","then","res","Object","assign","body","to","have","be","an","property","token","a","get","set","eql","message","request1","adminId","adminUser","id","equal","any","keys","request2","request3","regularUser2","length","of","at","least","put","delete"],"mappings":"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","file":"userRequestTest.js","sourcesContent":["import chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport app from './../app';\r\nimport { regularUser1, regularUser2, adminUser } from './signupTest';\r\n\r\nconst { expect } = chai;\r\nchai.use(chaiHttp);\r\nconst signedInUser = {};\r\nconst createdRequest1 = {};\r\nconst createdRequest2 = {};\r\n\r\nconst request4 = {\r\n  category: 'electrical',\r\n  description: '',\r\n  urgent: true,\r\n  address: 'somewhere in the world',\r\n  userId: 2,\r\n  status: 'awaiting confirmation',\r\n};\r\n\r\nexport default describe('Users controller', () => {\r\n  it('should signin a User in and give a token', () => {\r\n    return chai.request(app)\r\n      .post('/api/v1/auth/signin')\r\n      .send({\r\n        username: regularUser1.username,\r\n        password: '123456',\r\n      })\r\n      .then((res) => {\r\n        Object.assign(signedInUser, res.body);\r\n        expect(res).to.have.status(200);\r\n        expect(res.body).to.be.an('Object');\r\n        expect(res.body).to.have.property('token');\r\n        expect(res.body.token).to.be.a('string');\r\n      });\r\n  });\r\n\r\n  describe('Empty request model', () => {\r\n    it('should return an empty array', () => {\r\n      return chai.request(app)\r\n        .get('/api/v1/users/requests')\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(200);\r\n        });\r\n    });\r\n\r\n    it('should return not found for the request id that does not exist', () => {\r\n      return chai.request(app)\r\n        .get('/api/v1/users/requests/1')\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(404);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body).to.eql({ message: 'request not found' });\r\n        });\r\n    });\r\n  });\r\n\r\n  describe('Create requests', () => {\r\n    it('should create a new request', () => {\r\n      const request1 = {\r\n        category: 'electrical',\r\n        description: 'Socket burned',\r\n        urgent: true,\r\n        address: 'somewhere in the world',\r\n        adminId: adminUser.id,\r\n      };\r\n      return chai.request(app)\r\n        .post('/api/v1/users/requests')\r\n        .set('token', signedInUser.token)\r\n        .send(request1)\r\n        .then((res) => {\r\n          Object.assign(createdRequest1, res.body);\r\n          expect(res).to.have.status(201);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body.id).to.equal(1);\r\n          expect(res.body).to.have.any.keys(['description', 'category', 'userId']);\r\n        });\r\n    });\r\n\r\n    it('should create a new request', () => {\r\n      const request2 = {\r\n        category: 'electrical',\r\n        description: 'Socket burned',\r\n        urgent: true,\r\n        address: 'somewhere in the world',\r\n        adminId: adminUser.id,\r\n      };\r\n      return chai.request(app)\r\n        .post('/api/v1/users/requests')\r\n        .set('token', signedInUser.token)\r\n        .send(request2)\r\n        .then((res) => {\r\n          Object.assign(createdRequest2, res.body);\r\n          expect(res).to.have.status(201);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body.id).to.equal(2);\r\n          expect(res.body).to.have.any.keys('description');\r\n          expect(res.body).to.have.any.keys('category');\r\n          expect(res.body).to.have.any.keys('userId');\r\n          expect(res.body).to.have.any.keys('adminId');\r\n        });\r\n    });\r\n    it('should not create request for users that does not exist', () => {\r\n      const request3 = {\r\n        category: 'electrical',\r\n        description: 'Socket burned',\r\n        urgent: true,\r\n        address: 'somewhere in the world',\r\n        userId: 9,\r\n      };\r\n      return chai.request(app)\r\n        .post('/api/v1/users/requests')\r\n        .set('token', signedInUser.token)\r\n        .send(request3)\r\n        .then((res) => {\r\n          expect(res).to.have.status(400);\r\n          expect(res.body).to.be.an('object');\r\n        });\r\n    });\r\n\r\n    it('should not create request if a required field is not present', () => {\r\n      return chai.request(app)\r\n        .post('/api/v1/users/requests')\r\n        .set('token', signedInUser.token)\r\n        .send(request4)\r\n        .then((res) => {\r\n          expect(res).to.have.status(400);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body).to.eql({ message: 'missing required field' });\r\n        });\r\n    });\r\n  });\r\n\r\n  // test for get ../users/requests/:requestId\r\n  describe('get one request', () => {\r\n    it('should return a request with the given id for a logged in user', () => {\r\n      const { id } = createdRequest1;\r\n      return chai.request(app)\r\n        .get(`/api/v1/users/requests/${id}`)\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(200);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body.request).to.have.any.keys('userId');\r\n        });\r\n    });\r\n\r\n    it('should return not found for requestId that does not exist for a logged in user', () => {\r\n      return chai.request(app)\r\n        .get('/api/v1/users/requests/20')\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(404);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body).to.eql({ message: 'request not found' });\r\n        });\r\n    });\r\n\r\n    it('should return not found for the requestId with no matching userId', () => {\r\n      const { id } = createdRequest1;\r\n      return chai.request(app)\r\n        .get(`/api/v1/users/requests/${id}`)\r\n        .set('token', regularUser2.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(404);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body).to.eql({ message: 'request not found' });\r\n        });\r\n    });\r\n\r\n    it('should return bad request if requestId is invalid', () => {\r\n      return chai.request(app)\r\n        .get('/api/v1/users/requests/0')\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(400);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body).to.eql({ message: 'missing required field' });\r\n        });\r\n    });\r\n\r\n    it('should return bad request if neither userId nor requestId is valid', () => {\r\n      return chai.request(app)\r\n        .get('/api/v1/users/requests/0')\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(400);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body).to.eql({ message: 'missing required field' });\r\n        });\r\n    });\r\n  });\r\n\r\n  // test for get ../users/requests\r\n  describe('get all request', () => {\r\n    it('should return all request for logged in user', () => {\r\n      return chai.request(app)\r\n        .get('/api/v1/users/requests')\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(200);\r\n          expect(res.body).to.be.an('array');\r\n          expect(res.body).to.have.length.of.at.least(1);\r\n          // expect(res.body[0].request).to.deep.include.members([createdRequest1]);\r\n        });\r\n    });\r\n\r\n    it('should return an empty array if no matching userId is found', () => {\r\n      return chai.request(app)\r\n        .get('/api/v1/users/requests')\r\n        .set('token', regularUser2.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(200);\r\n          expect(res.body).to.be.an('array');\r\n          expect(res.body.length).to.equal(0);\r\n        });\r\n    });\r\n  });\r\n\r\n  describe('Users request update', () => {\r\n    it('users should be able to modify the other field except the status of a request', () => {\r\n      const { id, adminId } = createdRequest1;\r\n      return chai.request(app)\r\n        .put(`/api/v1/users/requests/${id}`)\r\n        .set('token', signedInUser.token)\r\n        .send({\r\n          adminId: adminId,\r\n          description: 'wall socket got burned and need replacement',\r\n        })\r\n        .then((res) => {\r\n          expect(res).to.have.status(200);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body.description).to.equal('wall socket got burned and need replacement');\r\n        });\r\n    });\r\n\r\n    it('users should not be able to modify the status of a request', () => {\r\n      const { id, adminId } = createdRequest1;\r\n      return chai.request(app)\r\n        .put(`/api/v1/users/requests/${id}`)\r\n        .set('token', signedInUser.token)\r\n        .send({\r\n          adminId: adminId,\r\n          status: 'approved',\r\n        })\r\n        .then((res) => {\r\n          expect(res).to.have.status(200);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body.status).to.equal('awaiting confirmation');\r\n        });\r\n    });\r\n\r\n    it('should return not found for a request that does not exist', () => {\r\n      const { adminId } = createdRequest1;\r\n      return chai.request(app)\r\n        .put('/api/v1/users/requests/20')\r\n        .set('token', signedInUser.token)\r\n        .send({\r\n          adminId,\r\n          description: 'wall socket got burned and need replacement',\r\n        })\r\n        .then((res) => {\r\n          expect(res).to.have.status(404);\r\n          expect(res.body).to.be.an('object');\r\n        });\r\n    });\r\n\r\n    it('should return not found for a request if userId does not match', () => {\r\n      const { id, adminId } = createdRequest1;\r\n      return chai.request(app)\r\n        .put(`/api/v1/users/requests/${id}`)\r\n        .set('token', regularUser2.token)\r\n        .send({\r\n          adminId,\r\n          description: 'wall socket got burned and need replacement',\r\n        })\r\n        .then((res) => {\r\n          expect(res).to.have.status(404);\r\n          expect(res.body).to.be.an('object');\r\n        });\r\n    });\r\n  });\r\n\r\n  // test for delete ../users/requests/:requestId\r\n  describe('delete request', () => {\r\n    it('should delete a request', () => {\r\n      const { id } = createdRequest2;\r\n      return chai.request(app)\r\n        .delete(`/api/v1/users/requests/${id}`)\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(200);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body).to.eql({ message: 'request has been deleted' });\r\n        });\r\n    });\r\n\r\n    it('should return not found for a request that does not exist', () => {\r\n      return chai.request(app)\r\n        .delete('/api/v1/users/requests/15')\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(404);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body).to.eql({ message: 'request not found, not action taken' });\r\n        });\r\n    });\r\n\r\n    it('should return bad request if requestId is not specified params', () => {\r\n      return chai.request(app)\r\n        .delete('/api/v1/users/requests/0')\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(400);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body).to.eql({ message: 'missing required field' });\r\n        });\r\n    });\r\n\r\n    it('should return bad request if requestId and userId is invalid', () => {\r\n      return chai.request(app)\r\n        .delete('/api/v1/users/requests/0')\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(400);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body).to.eql({ message: 'missing required field' });\r\n        });\r\n    });\r\n  });\r\n});\r\n\r\nexport {\r\n  createdRequest1,\r\n  createdRequest2,\r\n};\r\n"]}