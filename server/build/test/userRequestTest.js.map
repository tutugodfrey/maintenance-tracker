{"version":3,"sources":["../../src/test/userRequestTest.js"],"names":["expect","chai","use","chaiHttp","signedInUser","createdRequest1","createdRequest2","request4","category","description","urgent","address","status","describe","it","request","app","post","send","username","regularUser1","password","then","res","Object","assign","body","to","have","be","an","property","token","a","isAdmin","equal","get","set","length","eql","message","request1","adminId","adminUser","id","any","keys","request2","request3","userId","user","serviceName","regularUser2","of","at","least","put","delete"],"mappings":"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","file":"userRequestTest.js","sourcesContent":["import chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport app from './../app';\nimport { regularUser1, regularUser2, adminUser } from './signupTest';\n\nconst { expect } = chai;\nchai.use(chaiHttp);\nconst signedInUser = {};\nconst createdRequest1 = {};\nconst createdRequest2 = {};\n\nconst request4 = {\n  category: 'electrical',\n  description: '',\n  urgent: true,\n  address: 'somewhere in the world',\n  status: 'awaiting confirmation',\n};\n\nexport default describe('Requests controller', () => {\n  it('should signin a User in and give a token', () => {\n    return chai.request(app)\n      .post('/api/v1/auth/signin')\n      .send({\n        username: regularUser1.username,\n        password: '123456',\n      })\n      .then((res) => {\n        Object.assign(signedInUser, res.body);\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('Object');\n        expect(res.body).to.have.property('token');\n        expect(res.body.token).to.be.a('string');\n        expect(res.body.isAdmin).to.equal(false);\n      });\n  });\n\n  describe('empty table', () => {\n    it('should return an empty array', () => {\n      return chai.request(app)\n        .get('/api/v1/users/requests')\n        .set('token', signedInUser.token)\n        .then((res) => {\n          expect(res).to.have.status(200);\n          expect(res.body).to.be.an('array');\n          expect(res.body.length).to.equal(0);\n        });\n    });\n\n    it('should return not found for the request id that does not exist', () => {\n      return chai.request(app)\n        .get('/api/v1/users/requests/1')\n        .set('token', signedInUser.token)\n        .then((res) => {\n          expect(res).to.have.status(404);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.eql({ message: 'request not found' });\n        });\n    });\n  });\n\n  describe('Create requests method', () => {\n    it('should create a new request', () => {\n      const request1 = {\n        category: 'electrical',\n        description: 'Socket burned',\n        urgent: true,\n        address: 'somewhere in the world',\n        adminId: adminUser.id,\n      };\n      return chai.request(app)\n        .post('/api/v1/users/requests')\n        .set('token', signedInUser.token)\n        .send(request1)\n        .then((res) => {\n          Object.assign(createdRequest1, res.body);\n          expect(res).to.have.status(201);\n          expect(res.body).to.be.an('object');\n          expect(res.body.id).to.equal(1);\n          expect(res.body).to.have.any.keys(['description', 'category', 'userId']);\n        });\n    });\n\n    it('should create a new request', () => {\n      const request2 = {\n        category: 'electrical',\n        description: 'Socket burned',\n        urgent: true,\n        address: 'somewhere in the world',\n        adminId: adminUser.id,\n      };\n      return chai.request(app)\n        .post('/api/v1/users/requests')\n        .set('token', signedInUser.token)\n        .send(request2)\n        .then((res) => {\n          Object.assign(createdRequest2, res.body);\n          expect(res).to.have.status(201);\n          expect(res.body).to.be.an('object');\n          expect(res.body.id).to.equal(2);\n          expect(res.body).to.have.any.keys('description');\n          expect(res.body).to.have.any.keys('category');\n          expect(res.body).to.have.any.keys('userId');\n          expect(res.body).to.have.any.keys('adminId');\n        });\n    });\n    it('should not create request for a service (adminId) that does not exist', () => {\n      const request3 = {\n        category: 'electrical',\n        description: 'Socket burned',\n        urgent: true,\n        address: 'somewhere in the world',\n        adminId: 9,\n      };\n      return chai.request(app)\n        .post('/api/v1/users/requests')\n        .set('token', signedInUser.token)\n        .send(request3)\n        .then((res) => {\n          expect(res).to.have.status(404);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.have.property('message');\n          expect(res.body.message).to.equal('service not found');\n        });\n    });\n\n    it('should not create request if a required field is not present', () => {\n      return chai.request(app)\n        .post('/api/v1/users/requests')\n        .set('token', signedInUser.token)\n        .send(request4)\n        .then((res) => {\n          expect(res).to.have.status(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.have.property('message');\n          expect(res.body).to.eql({ message: 'missing required field' });\n        });\n    });\n  });\n\n  // test for get ../users/requests/:requestId\n  describe('get one request method ', () => {\n    it('should return a request with the given id for a logged in user', () => {\n      const { id } = createdRequest1;\n      return chai.request(app)\n        .get(`/api/v1/users/requests/${id}`)\n        .set('token', signedInUser.token)\n        .then((res) => {\n          expect(res).to.have.status(200);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.have.property('request');\n          expect(res.body).to.have.property('user');\n          expect(res.body.request).to.have.any.keys('userId');\n          expect(res.body.request.userId).to.equal(signedInUser.id);\n          expect(res.body.user.serviceName).to.equal(adminUser.serviceName);\n        });\n    });\n\n    it('should return not found for requestId that does not exist for a logged in user', () => {\n      return chai.request(app)\n        .get('/api/v1/users/requests/20')\n        .set('token', signedInUser.token)\n        .then((res) => {\n          expect(res).to.have.status(404);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.have.property('message');\n          expect(res.body).to.eql({ message: 'request not found' });\n        });\n    });\n\n    it('should return not found for the requestId with no matching userId', () => {\n      const { id } = createdRequest1;\n      return chai.request(app)\n        .get(`/api/v1/users/requests/${id}`)\n        .set('token', regularUser2.token)\n        .then((res) => {\n          expect(res).to.have.status(404);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.have.property('message');\n          expect(res.body).to.eql({ message: 'request not found' });\n        });\n    });\n\n    it('should return bad request if requestId is invalid', () => {\n      return chai.request(app)\n        .get('/api/v1/users/requests/0')\n        .set('token', signedInUser.token)\n        .then((res) => {\n          expect(res).to.have.status(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.have.property('message');\n          expect(res.body).to.eql({ message: 'missing required field' });\n        });\n    });\n\n    it('should return authorization error when token is invalid', () => {\n      const { id } = createdRequest1;\n      return chai.request(app)\n        .get(`/api/v1/users/requests/${id}`)\n        .set('token', 'signedInUser.token.invalidtoken')\n        .then((res) => {\n          expect(res).to.have.status(401);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.have.property('message');\n          expect(res.body).to.eql({ message: 'authentication fail! invalid token' });\n        });\n    });\n  });\n\n  // test for get ../users/requests\n  describe('get all request', () => {\n    it('should return authorization error if token is invalid', () => {\n      return chai.request(app)\n        .get('/api/v1/users/requests')\n        .set('token', 'regularUser2.tokeninvalidtoken')\n        .then((res) => {\n          expect(res).to.have.status(401);\n          expect(res.body).to.be.an('Object');\n          expect(res.body).to.have.property('message');\n          expect(res.body.message).to.equal('authentication fail! invalid token');\n        });\n    });\n\n    it('should return authorization error if token is not provided', () => {\n      return chai.request(app)\n        .get('/api/v1/users/requests')\n        .then((res) => {\n          expect(res).to.have.status(401);\n          expect(res.body).to.be.an('Object');\n          expect(res.body).to.have.property('message');\n          expect(res.body.message).to.equal('authentication fail! please send a token');\n        });\n    });\n\n    it('should return all request for logged in user', () => {\n      return chai.request(app)\n        .get('/api/v1/users/requests')\n        .set('token', signedInUser.token)\n        .then((res) => {\n          expect(res).to.have.status(200);\n          expect(res.body).to.be.an('array');\n          expect(res.body).to.have.length.of.at.least(1);\n          expect(res.body[0]).to.have.property('request');\n          expect(res.body[0]).to.have.property('user');\n          expect(res.body[0].user).to.have.property('serviceName');\n          expect(res.body[0].user.serviceName).to.equal(adminUser.serviceName);\n          expect(res.body[0].request).to.eql(createdRequest1);\n        });\n    });\n\n    it('should return an empty array if no request exist for the logged in user', () => {\n      return chai.request(app)\n        .get('/api/v1/users/requests')\n        .set('token', regularUser2.token)\n        .then((res) => {\n          expect(res).to.have.status(200);\n          expect(res.body).to.be.an('array');\n          expect(res.body.length).to.equal(0);\n        });\n    });\n  });\n\n  describe('Update request method', () => {\n    it('users should be able to modify the other field except the status of a request', () => {\n      const { id, adminId } = createdRequest1;\n      return chai.request(app)\n        .put(`/api/v1/users/requests/${id}`)\n        .set('token', signedInUser.token)\n        .send({\n          adminId,\n          description: 'wall socket got burned and need replacement',\n        })\n        .then((res) => {\n          expect(res).to.have.status(200);\n          expect(res.body).to.be.an('object');\n          expect(res.body.request.description).to.equal('wall socket got burned and need replacement');\n        });\n    });\n\n    it('users should not modify the status of a request', () => {\n      const { id, adminId } = createdRequest1;\n      return chai.request(app)\n        .put(`/api/v1/users/requests/${id}`)\n        .set('token', signedInUser.token)\n        .send({\n          adminId,\n          status: 'approved',\n        })\n        .then((res) => {\n          expect(res).to.have.status(200);\n          expect(res.body).to.be.an('object');\n          expect(res.body.request.status).to.equal('awaiting confirmation');\n        });\n    });\n\n    it('should return not found for a request that does not exist', () => {\n      const { adminId } = createdRequest1;\n      return chai.request(app)\n        .put('/api/v1/users/requests/20')\n        .set('token', signedInUser.token)\n        .send({\n          adminId,\n          description: 'wall socket got burned and need replacement',\n        })\n        .then((res) => {\n          expect(res).to.have.status(404);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.have.property('message');\n          expect(res.body.message).to.equal('request not found');\n        });\n    });\n\n    it('should return authorization error for invalid token', () => {\n      const { id, adminId } = createdRequest1;\n      return chai.request(app)\n        .put(`/api/v1/users/requests/${id}`)\n        .set('token', 'regularUser2.tokeninvalidtoken')\n        .send({\n          adminId,\n          description: 'wall socket got burned and need replacement',\n        })\n        .then((res) => {\n          expect(res).to.have.status(401);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.have.property('message');\n          expect(res.body.message).to.equal('authentication fail! invalid token');\n        });\n    });\n  });\n\n  // test for delete ../users/requests/:requestId\n  describe('delete request method', () => {\n    it('should delete a request', () => {\n      const { id } = createdRequest2;\n      return chai.request(app)\n        .delete(`/api/v1/users/requests/${id}`)\n        .set('token', signedInUser.token)\n        .then((res) => {\n          expect(res).to.have.status(200);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.have.property('message');\n          expect(res.body).to.eql({ message: 'request has been deleted' });\n        });\n    });\n\n    it('should return not found for a request that does not exist', () => {\n      return chai.request(app)\n        .delete('/api/v1/users/requests/15')\n        .set('token', signedInUser.token)\n        .then((res) => {\n          expect(res).to.have.status(404);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.have.property('message');\n          expect(res.body).to.eql({ message: 'request not found, not action taken' });\n        });\n    });\n\n    it('should return bad request if requestId is not specified params', () => {\n      return chai.request(app)\n        .delete('/api/v1/users/requests/0')\n        .set('token', signedInUser.token)\n        .then((res) => {\n          expect(res).to.have.status(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.have.property('message');\n          expect(res.body).to.eql({ message: 'missing required field' });\n        });\n    });\n\n    it('should return bad request if requestId is not valid', () => {\n      return chai.request(app)\n        .delete('/api/v1/users/requests/0')\n        .set('token', signedInUser.token)\n        .then((res) => {\n          expect(res).to.have.status(400);\n          expect(res.body).to.be.an('object');\n          expect(res.body).to.have.property('message');\n          expect(res.body).to.eql({ message: 'missing required field' });\n        });\n    });\n  });\n});\n\nexport {\n  createdRequest1,\n  createdRequest2,\n};\n"]}