{"version":3,"sources":["../../src/controllers/RequestController.js"],"names":["requests","models","users","RequestController","req","res","body","userId","category","description","address","urgent","serviceName","parseInt","trim","status","send","message","issueDate","Services","getDate","dateRegExp","test","findById","then","user","create","updatedAt","request","catch","error","requestId","params","query","find","where","id","findAll","allRequests","type","update","newRequest","destroy"],"mappings":"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","file":"RequestController.js","sourcesContent":["\r\nimport models from './../models/index';\r\nimport Services from './../helpers/Services';\r\n\r\nconst { requests, users } = models;\r\nconst RequestController = class {\r\n  // add a new request\r\n  static addRequest(req, res) {\r\n    const {\r\n      userId,\r\n      category,\r\n      description,\r\n      address,\r\n      urgent,\r\n      serviceName,\r\n    } = req.body;\r\n\r\n    if (!parseInt(userId, 10) || description.trim() === '' || address.trim() === '' || category.trim() === '') {\r\n      return res.status(400).send({ message: 'missing required field' });\r\n    }\r\n    if (!urgent && urgent.trim() !== '') {\r\n      return res.status(400).send({ message: 'typeError field urgent must be a boolean' });\r\n    }\r\n    const issueDate = Services.getDate();\r\n    const dateRegExp = /\\d{4}-\\d{2}-\\d{2}/;\r\n    if (!dateRegExp.test(issueDate)) {\r\n      return res.status(500).send({ message: 'an error occur while processing your request' });\r\n    }\r\n    return users.findById(parseInt(userId, 10))\r\n      .then((user) => {\r\n        return requests\r\n          .create({\r\n            userId,\r\n            category,\r\n            description,\r\n            address,\r\n            issueDate: 'now()',\r\n            updatedAt: 'now()',\r\n            status: 'awaiting confirmation',\r\n            urgent: urgent || false,\r\n          })\r\n          .then((request) => {\r\n            return res.status(201).send(request);\r\n          })\r\n          .catch((error) => {\r\n            return res.status(400).send(error);\r\n          });\r\n      })\r\n      .catch(error => res.status(404).send(error));\r\n  }\r\n\r\n  // get a signle requests for a logged in user\r\n  static getOneRequest(req, res) {\r\n    const requestId = parseInt(req.params.requestId, 10);\r\n    const userId = parseInt(req.query.userId, 10);\r\n    if (!requestId || !userId) {\r\n      return res.status(400).send({ message: 'missing required field' });\r\n    }\r\n    return requests\r\n      .find({\r\n        where: {\r\n          userId,\r\n          id: requestId,\r\n        },\r\n      })\r\n      .then(request => res.status(200).send(request))\r\n      .catch(error => res.status(404).send(error));\r\n  }\r\n\r\n  // get all request for a logged in user\r\n  static getAllRequests(req, res) {\r\n    const userId = parseInt(req.query.userId, 10);\r\n    if (!userId) {\r\n      return res.status(400).send({ message: 'missing required field' });\r\n    }\r\n    return requests\r\n      .findAll({\r\n        where: {\r\n          userId,\r\n        },\r\n      })\r\n      .then(allRequests => res.status(200).send(allRequests))\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n\r\n  // update a request\r\n  static updateRequest(req, res) {\r\n    const {\r\n      category,\r\n      description,\r\n      address,\r\n      serviceName,\r\n      urgent,\r\n    } = req.body;\r\n    const requestId = parseInt(req.params.requestId, 10);\r\n    const userId = parseInt(req.query.userId, 10);\r\n    if (!requestId || !userId) {\r\n      return res.status(400).send({ message: 'missing required field' });\r\n    }\r\n    const updatedAt = Services.getDate();\r\n    const dateRegExp = /\\d{4}-\\d{2}-\\d{2}/;\r\n    if (!dateRegExp.test(updatedAt)) {\r\n      return res.status(500).send({ message: 'an error occur while processing your request' });\r\n    }\r\n    return requests\r\n      .find({\r\n        where: {\r\n          userId,\r\n          id: requestId,\r\n        },\r\n        type: 'or',\r\n      })\r\n      .then((request) => {\r\n        // users should not be able to modify the status of a request\r\n        if (request.status === 'approved' || request.status === 'resolved') {\r\n          return res.status(200).send({ message: 'request cannot be modify after it has been approved or resolved' });\r\n        }\r\n        return requests\r\n          .update(\r\n            request,\r\n            {\r\n              updatedAt: 'now()',\r\n              category: category || request.category,\r\n              description: description || request.description,\r\n              address: address || request.address,\r\n              serviceName: serviceName || request.serviceName,\r\n              urgent: urgent || request.urgent,\r\n            },\r\n          )\r\n          .then(newRequest => res.status(200).send(newRequest))\r\n          .catch(error => res.status(500).send(error));\r\n      })\r\n      .catch(error => res.status(404).send(error));\r\n  }\r\n\r\n  static deleteRequest(req, res) {\r\n    const requestId = parseInt(req.params.requestId, 10);\r\n    const userId = parseInt(req.query.userId, 10);\r\n    if (!requestId || !userId) {\r\n      return res.status(400).send({ message: 'missing required field' });\r\n    }\r\n    return requests\r\n      .destroy({\r\n        where: {\r\n          userId,\r\n          id: requestId,\r\n        },\r\n      })\r\n      .then(newRequest => res.status(200).send(newRequest))\r\n      .catch(error => res.status(404).send(error));\r\n  }\r\n};\r\nexport default RequestController;\r\n"]}