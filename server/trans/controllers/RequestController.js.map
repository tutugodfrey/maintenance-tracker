{"version":3,"sources":["../../src/controllers/RequestController.js"],"names":["requests","models","users","RequestController","req","res","body","userId","category","description","address","urgent","serviceName","parseInt","trim","status","send","message","findById","then","user","create","issueDate","updatedAt","request","catch","error","requestId","params","query","find","where","id","findAll","allRequests","update","newRequest","destroy","rows","length"],"mappings":"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","file":"RequestController.js","sourcesContent":["\r\nimport models from './../models/index';\r\nimport Services from './../helpers/Services';\r\n\r\nconst { requests, users } = models;\r\nconst RequestController = class {\r\n  // add a new request\r\n  static addRequest(req, res) {\r\n    const {\r\n      userId,\r\n      category,\r\n      description,\r\n      address,\r\n      urgent,\r\n      serviceName,\r\n    } = req.body;\r\n\r\n    if (!parseInt(userId, 10) || description.trim() === '' || address.trim() === '' || category.trim() === '') {\r\n      return res.status(400).send({ message: 'missing required field' });\r\n    }\r\n    if (!urgent && urgent.trim() !== '') {\r\n      return res.status(400).send({ message: 'typeError field urgent must be a boolean' });\r\n    }\r\n  \r\n    return users.findById(parseInt(userId, 10))\r\n      .then((user) => {\r\n        return requests\r\n          .create({\r\n            userId,\r\n            category,\r\n            description,\r\n            address,\r\n            serviceName,\r\n            issueDate: 'now()',\r\n            updatedAt: 'now()',\r\n            status: 'awaiting confirmation',\r\n            urgent: urgent || false,\r\n          })\r\n          .then((request) => {\r\n            return res.status(201).send(request);\r\n          })\r\n          .catch((error) => {\r\n            return res.status(400).send(error);\r\n          });\r\n      })\r\n      .catch(error => res.status(404).send(error));\r\n  }\r\n\r\n  // get a signle requests for a logged in user\r\n  static getOneRequest(req, res) {\r\n    const requestId = parseInt(req.params.requestId, 10);\r\n    const userId = parseInt(req.query.userId, 10);\r\n    if (!requestId || !userId) {\r\n      return res.status(400).send({ message: 'missing required field' });\r\n    }\r\n    return requests\r\n      .find({\r\n        where: {\r\n          userId,\r\n          id: requestId,\r\n        },\r\n      })\r\n      .then(request => {\r\n        if(!request) {\r\n          return res.status(404).send({ message: 'request not found' })\r\n        }\r\n        return res.status(200).send(request)\r\n      })\r\n     .catch(error => res.status(500).send( error));\r\n  }\r\n\r\n  // get all request for a logged in user\r\n  static getAllRequests(req, res) {\r\n    const userId = parseInt(req.query.userId, 10);\r\n    if (!userId) {\r\n      return res.status(400).send({ message: 'missing required field' });\r\n    }\r\n    return requests\r\n      .findAll({\r\n        where: {\r\n          userId,\r\n        },\r\n      })\r\n      .then(allRequests => res.status(200).send(allRequests))\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n\r\n  // update a request\r\n  static updateRequest(req, res) {\r\n    const {\r\n      category,\r\n      description,\r\n      address,\r\n      serviceName,\r\n      urgent,\r\n    } = req.body;\r\n    const requestId = parseInt(req.params.requestId, 10);\r\n    const userId = parseInt(req.query.userId, 10);\r\n    if (!requestId || !userId) {\r\n      return res.status(400).send({ message: 'missing required field' });\r\n    }\r\n    return requests\r\n      .find({\r\n        where: {\r\n          userId,\r\n          id: requestId,\r\n        },\r\n      })\r\n      .then((request) => {\r\n        // users should not be able to modify the status of a request\r\n        if (request.status === 'approved' || request.status === 'resolved') {\r\n          return res.status(200).send({ message: 'request cannot be modify after it has been approved or resolved' });\r\n        }\r\n        return requests\r\n          .update(\r\n            {\r\n              id: request.id,\r\n            },\r\n            {\r\n              updatedAt: 'now()',\r\n              category: category || request.category,\r\n              description: description || request.description,\r\n              address: address || request.address,\r\n              serviceName: serviceName || request.serviceName,\r\n              urgent: urgent || request.urgent,\r\n            },\r\n          )\r\n          .then(newRequest => res.status(200).send(newRequest))\r\n          .catch(error => res.status(500).send(error));\r\n      })\r\n      .catch(error => res.status(404).send(error));\r\n  }\r\n\r\n  static deleteRequest(req, res) {\r\n    const requestId = parseInt(req.params.requestId, 10);\r\n    const userId = parseInt(req.query.userId, 10);\r\n    if (!requestId || !userId) {\r\n      return res.status(400).send({ message: 'missing required field' });\r\n    }\r\n    return requests\r\n      .destroy({\r\n        where: {\r\n          userId,\r\n          id: requestId,\r\n        },\r\n      })\r\n      .then((rows) => {\r\n        if (rows.length === 0) {\r\n          return res.status(404).send({ message: 'request not found, not action taken' })\r\n        }\r\n        res.status(200).send({ message: 'request has been deleted' })\r\n    })\r\n      .catch(error => res.status(404).send(error));\r\n  }\r\n};\r\nexport default RequestController;\r\n"]}