{"version":3,"sources":["../../src/controllers/RequestController.js"],"names":["requests","models","users","RequestController","req","res","userId","parseInt","body","description","status","send","message","findById","then","user","create","category","department","urgency","request","catch","error","requestId","params","query","find","where","id","findAll","allRequests","update","newRequest","destroy"],"mappings":"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","file":"RequestController.js","sourcesContent":["\r\nimport models from './../models/index';\r\n\r\nconst { requests, users } = models;\r\nconst RequestController = class {\r\n  // add a new request\r\n  static addRequest(req, res) {\r\n    const userId = parseInt(req.body.userId, 10);\r\n    if (!(req.body.userId) || !(req.body.description)) {\r\n      return res.status(400).send({ message: 'missing required field' });\r\n    }\r\n    return users.findById(userId)\r\n      .then((user) => {\r\n        return requests\r\n          .create({\r\n            userId,\r\n            category: req.body.category,\r\n            description: req.body.description,\r\n            department: req.body.department,\r\n            urgency: req.body.urgency,\r\n            status: req.body.status,\r\n          })\r\n          .then((request) => {\r\n            return res.status(201).send({\r\n              request,\r\n              user,\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            return res.status(400).send(error);\r\n          });\r\n      })\r\n      .catch(error => res.status(404).send(error));\r\n  }\r\n\r\n  // get a signle requests for a logged in user\r\n  static getOneRequest(req, res) {\r\n    const requestId = parseInt(req.params.requestId, 10);\r\n    const userId = parseInt(req.query.userId, 10);\r\n    if (!requestId || !userId) {\r\n      return res.status(400).send({ message: 'missing required field' });\r\n    }\r\n    return requests\r\n      .find({\r\n        where: {\r\n          userId,\r\n          id: requestId,\r\n        },\r\n      })\r\n      .then(request => res.status(200).send(request))\r\n      .catch(error => res.status(404).send(error));\r\n  }\r\n\r\n  // get all request for a logged in user\r\n  static getAllRequests(req, res) {\r\n    const userId = parseInt(req.query.userId, 10);\r\n    if (!userId) {\r\n      return res.status(400).send({ message: 'missing required field' });\r\n    }\r\n    return requests\r\n      .findAll({\r\n        where: {\r\n          userId,\r\n        },\r\n      })\r\n      .then(allRequests => res.status(200).send(allRequests))\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n\r\n  // update a request\r\n  static updateRequest(req, res) {\r\n    const requestId = parseInt(req.params.requestId, 10);\r\n    if (!requestId) {\r\n      return res.status(400).send({ message: 'missing required field' });\r\n    }\r\n    return requests\r\n      .findById(requestId)\r\n      .then((request) => {\r\n        return requests\r\n          .update(\r\n            request,\r\n            {\r\n              category: req.body.category || request.category,\r\n              description: req.body.description || request.description,\r\n              department: req.body.department || request.department,\r\n              urgency: req.body.urgency || request.urgency,\r\n              status: req.body.status || request.status,\r\n            },\r\n          )\r\n          .then(newRequest => res.status(200).send(newRequest))\r\n          .catch(error => res.status(400).send(error));\r\n      })\r\n      .catch(error => res.status(404).send(error));\r\n  }\r\n\r\n  static deleteRequest(req, res) {\r\n    const requestId = parseInt(req.params.requestId, 10);\r\n    const userId = parseInt(req.query.userId, 10);\r\n    if (!requestId || !userId) {\r\n      return res.status(400).send({ message: 'missing required field' });\r\n    }\r\n    return requests\r\n      .destroy({\r\n        where: {\r\n          userId,\r\n          id: requestId,\r\n        },\r\n      })\r\n      .then(newRequest => res.status(200).send(newRequest))\r\n      .catch(error => res.status(404).send(error));\r\n  }\r\n};\r\nexport default RequestController;\r\n"]}