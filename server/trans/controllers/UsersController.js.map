{"version":3,"sources":["../../src/controllers/UsersController.js"],"names":["dotenv","config","users","models","UsersController","req","res","file","findAll","where","username","body","email","then","passwd1","passwd2","passwd","bcrypt","genSalt","err","salt","hash","hashErr","create","password","fullname","imgUrl","address","isAdmin","serviceName","signup","status","send","message","id","catch","error","destination","HelperFuncts","getImgUrl","path","find","user","passwordConfirmed","hashedPassword","compareSync","authenKey","token","jwt","sign","process","env","SECRET_KEY","expiresIn","success","userId"],"mappings":"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","file":"UsersController.js","sourcesContent":["import dotenv from 'dotenv-safe';\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\nimport models from './../models/index';\r\nimport HelperFuncts from './../helpers/HelperFuncts';\r\n\r\ndotenv.config();\r\nconst { users } = models;\r\nconst UsersController = class {\r\n  // create a new user account\r\n  static signup(req, res) {\r\n    if (!req.file) {\r\n      return users\r\n        .findAll({\r\n          where: {\r\n            username: req.body.username,\r\n            email: req.body.email,\r\n          },\r\n        })\r\n        .then(() => {\r\n          const { passwd1, passwd2 } = req.body;\r\n          let passwd;\r\n          if (passwd1 === passwd2) {\r\n            bcrypt.genSalt(10, (err, salt) => {\r\n              bcrypt.hash(passwd1, salt, (hashErr, hash) => {\r\n                passwd = hash;\r\n                users\r\n                  .create({\r\n                    password: passwd,\r\n                    fullname: req.body.fullname,\r\n                    email: req.body.email,\r\n                    username: req.body.username,\r\n                    imgUrl: 'no/file/uploaded',\r\n                    address: req.body.address,\r\n                    isAdmin: req.body.isAdmin,\r\n                    serviceName: req.body.serviceName,\r\n                  })\r\n                  .then((signup) => {\r\n                    res.status(201).send({\r\n                      message: 'signup successful',\r\n                      fullname: signup.fullname,\r\n                      email: signup.email,\r\n                      username: signup.username,\r\n                      imgUrl: signup.imgUrl,\r\n                      id: signup.id,\r\n                    });\r\n                  })\r\n                  .catch(() => res.status(400).send({ message: 'user already exist' }));\r\n              });\r\n            });\r\n          } else {\r\n            // password match fail\r\n            res.status(400).send({ message: 'password does not match' });\r\n          }\r\n        })\r\n        .catch(error => res.status(500).send(error));\r\n    }\r\n    return users\r\n      .findAll({\r\n        where: {\r\n          username: req.body.username,\r\n          email: req.body.email,\r\n        },\r\n      })\r\n      .then(() => {\r\n        // handle uploaded profile pix\r\n        const destination = HelperFuncts.getImgUrl(req.file.path);\r\n        const { passwd1, passwd2 } = req.body;\r\n        // const passwd2 = req.body.passwd2;\r\n        let passwd;\r\n        if (passwd1 === passwd2) {\r\n          bcrypt.genSalt(10, (err, salt) => {\r\n            bcrypt.hash(passwd1, salt, (hashErr, hash) => {\r\n              passwd = hash;\r\n              users\r\n                .create({\r\n                  password: passwd,\r\n                  fullname: req.body.fullname,\r\n                  email: req.body.email,\r\n                  username: req.body.username,\r\n                  imgUrl: destination,\r\n                  address: req.body.address,\r\n                  isAdmin: req.body.isAdmin,\r\n                  serviceName: req.body.serviceName,\r\n                })\r\n                .then((signup) => {\r\n                  res.status(201).send({\r\n                    message: 'signup successful',\r\n                    fullname: signup.fullname,\r\n                    email: signup.email,\r\n                    username: signup.username,\r\n                    imgUrl: signup.imgUrl,\r\n                    id: signup.id,\r\n                    isAdmin: signup.isAdmin,\r\n                  });\r\n                })\r\n                .catch(() => res.status(400).send({ message: 'user already exist' }));\r\n            });\r\n          });\r\n        } else {\r\n          // password match fail\r\n          res.status(400).send({ message: 'password does not match' });\r\n        }\r\n      })\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n\r\n  // signin controller\r\n  static signin(req, res) {\r\n    return users\r\n      .find({\r\n        where: {\r\n          username: req.body.username,\r\n        },\r\n      })\r\n      .then((user) => {\r\n        if (user) {\r\n          let passwordConfirmed = false;\r\n          const hashedPassword = user.password;\r\n          const { password } = req.body;\r\n          passwordConfirmed = bcrypt.compareSync(password, hashedPassword);\r\n          if (passwordConfirmed) {\r\n            const authenKey = user.username;\r\n            const token = jwt.sign({ authenKey }, process.env.SECRET_KEY, { expiresIn: '48h' });\r\n            res.status(200).send({\r\n              token,\r\n              success: true,\r\n              username: user.username,\r\n              isAdmin: user.isAdmin,\r\n              userId: user.id,\r\n              imgUrl: user.imgUrl,\r\n            });\r\n          } else {\r\n            res.status(400).send({ message: 'authentication fail! check your username or password' });\r\n          }\r\n        } else {\r\n          res.status(400).send({ message: 'authentication fail! check your username or password' });\r\n        }\r\n      })\r\n      .catch(error => res.status(400).send(error));\r\n  }\r\n};\r\n\r\nexport default UsersController;\r\n"]}