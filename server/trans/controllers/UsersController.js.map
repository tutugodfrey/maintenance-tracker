{"version":3,"sources":["../../src/controllers/UsersController.js"],"names":["dotenv","config","users","models","UsersController","req","res","body","fullname","username","email","phone","address","serviceName","password","confirmPassword","isAdmin","trim","status","send","message","emailRegExp","match","length","file","find","where","then","user","bcrypt","genSalt","err","salt","hash","hashErr","create","imgUrl","signup","authenKeys","id","token","jwt","sign","process","env","SECRET_KEY","expiresIn","catch","error","type","destination","Services","getImgUrl","path","imgurl","isadmin","passwordConfirmed","hashedPassword","compareSync","userId","success"],"mappings":"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","file":"UsersController.js","sourcesContent":["import dotenv from 'dotenv-safe';\r\nimport jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\nimport models from './../models/index';\r\nimport Services from './../helpers/Services';\r\n\r\ndotenv.config();\r\nconst { users } = models;\r\nconst UsersController = class {\r\n  // create a new user account\r\n  static signup(req, res) {\r\n    const {\r\n      fullname,\r\n      username,\r\n      email,\r\n      phone,\r\n      address,\r\n      serviceName,\r\n      password,\r\n      confirmPassword,\r\n      isAdmin,\r\n    } = req.body;\r\n    // validate input\r\n    if (username.trim() === '' || fullname.trim() === '' || email.trim() === ''\r\n    || password.trim() === '' || confirmPassword.trim() === '') {\r\n      return res.status(400).send({ message: 'missing required field' });\r\n    }\r\n    const emailRegExp = /\\w+@\\w+\\.(net|com|org)/;\r\n    if (!email.match(emailRegExp)) {\r\n      return res.status(400).send({ message: 'typeError: invalid email format' });\r\n    }\r\n\r\n    if (password.length < 6 || confirmPassword.length < 6) {\r\n      return res.status(400).send({ message: 'length of password must not be less than 6' });\r\n    }\r\n\r\n    if (password !== confirmPassword) {\r\n      return res.status(400).send({ message: 'password does not match' });\r\n    }\r\n\r\n    if (address.trim() === '') {\r\n      return res.status(400).send({ message: 'missing required field' });\r\n    }\r\n    if (!isAdmin && isAdmin.trim() !== '') {\r\n      return res.status(400).send({ message: 'isAdmin must be a true or false' });\r\n    }\r\n    // console.log(req.body)\r\n    if (!req.file) {\r\n      return users\r\n        .find({\r\n          where: {\r\n            username,\r\n            email,\r\n          },\r\n        })\r\n        .then((user) => {\r\n          if (!user) {\r\n            bcrypt.genSalt(10, (err, salt) => {\r\n              bcrypt.hash(password, salt, (hashErr, hash) => {\r\n                users\r\n                  .create({\r\n                    fullname,\r\n                    email,\r\n                    username,\r\n                    address,\r\n                    serviceName,\r\n                    password,\r\n                    isAdmin: isAdmin || false,\r\n                    imgUrl: 'no/file/uploaded',\r\n                  })\r\n                  .then((signup) => {\r\n                    const authenKeys = {\r\n                      fullname: signup.fullname,\r\n                      email: signup.email,\r\n                      username: signup.username,\r\n                      imgUrl: signup.imgUrl,\r\n                      id: signup.id,\r\n                      isAdmin: signup.isAdmin,\r\n                    };\r\n                    const token = jwt.sign(authenKeys, process.env.SECRET_KEY, { expiresIn: '48h' });\r\n                    res.status(201).send({\r\n                      token,\r\n                      message: 'signup successful',\r\n                      email: signup.email,\r\n                      username: signup.username,\r\n                      imgUrl: signup.imgUrl,\r\n                      id: signup.id,\r\n                      isAdmin: signup.isAdmin,\r\n                    });\r\n                  })\r\n                  .catch(error => res.status(400).send({ error }));\r\n              });\r\n            });\r\n          } else {\r\n            res.status(409).send({ message: 'user already exist' });\r\n          }\r\n        })\r\n        .catch(error => res.status(500).send(error));\r\n    }\r\n    return users\r\n      .find({\r\n        where: {\r\n          username,\r\n          email,\r\n        },\r\n        type: 'or',\r\n      })\r\n      .then((user) => {\r\n        if (!user) {\r\n          // handle uploaded profile pix\r\n          const destination = Services.getImgUrl(req.file.path);\r\n          // const passwd2 = req.body.passwd2;\r\n            bcrypt.genSalt(10, (err, salt) => {\r\n              bcrypt.hash(password, salt, (hashErr, hash) => {\r\n                users\r\n                  .create({\r\n                    fullname,\r\n                    email,\r\n                    username,\r\n                    address,\r\n                    isAdmin,\r\n                    serviceName,\r\n                    phone,\r\n                    imgUrl: destination,\r\n                    password: hash,\r\n                  })\r\n                  .then((signup) => {\r\n                    const authenKeys = {\r\n                      fullname: signup.fullname,\r\n                      email: signup.email,\r\n                      username: signup.username,\r\n                      imgUrl: signup.imgUrl,\r\n                      id: signup.id,\r\n                      isAdmin: signup.isAdmin,\r\n                    };\r\n                    const token = jwt.sign(authenKeys, process.env.SECRET_KEY, { expiresIn: '48h' });\r\n                    res.status(201).send({\r\n                      token,\r\n                      message: 'signup successful',\r\n                      fullname: signup.fullname,\r\n                      email: signup.email,\r\n                      username: signup.username,\r\n                      imgUrl: signup.imgurl,\r\n                      id: signup.id,\r\n                      isAdmin: signup.isadmin,\r\n                    });\r\n                  })\r\n                  .catch(error => res.status(400).send({ error }));\r\n              });\r\n            });\r\n        } else {\r\n          res.status(409).send({ message: 'user already exist' });\r\n        }\r\n      })\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n\r\n  // signin controller\r\n  static signin(req, res) {\r\n    return users\r\n      .find({\r\n        where: {\r\n          username: req.body.username,\r\n        },\r\n      })\r\n      .then((user) => {\r\n        if (user) {\r\n          let passwordConfirmed = false;\r\n          const hashedPassword = user.password;\r\n          const { password } = req.body;\r\n          passwordConfirmed = bcrypt.compareSync(password, hashedPassword);\r\n          if (passwordConfirmed) {\r\n            const authenKeys = {\r\n              username: user.username,\r\n              fullname: user.fullname,\r\n              isAdmin: user.isAdmin,\r\n              userId: user.id,\r\n              imgUrl: user.imgUrl,\r\n            };\r\n            const token = jwt.sign(authenKeys, process.env.SECRET_KEY, { expiresIn: '48h' });\r\n            res.status(200).send({\r\n              token,\r\n              success: true,\r\n              username: user.username,\r\n              fullname: user.fullname,\r\n              isAdmin: user.isAdmin,\r\n              userId: user.id,\r\n              imgUrl: user.imgUrl,\r\n            });\r\n          } else {\r\n            res.status(400).send({ message: 'authentication fail! check your username or password' });\r\n          }\r\n        } else {\r\n          res.status(400).send({ message: 'authentication fail! check your username or password' });\r\n        }\r\n      })\r\n      .catch(error => res.status(400).send(error));\r\n  }\r\n};\r\n\r\nexport default UsersController;\r\n"]}