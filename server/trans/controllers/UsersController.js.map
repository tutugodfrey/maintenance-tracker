{"version":3,"sources":["../../src/controllers/UsersController.js"],"names":["users","models","UsersController","req","res","file","findAll","where","username","body","email","then","user","length","status","send","message","passwd1","passwd2","passwd","bcrypt","genSalt","err","salt","hash","hashErr","create","password","fullname","imgUrl","address","isAdmin","serviceName","signup","id","catch","error","destination","HelperFuncts","getImgUrl","path"],"mappings":"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","file":"UsersController.js","sourcesContent":["import bcrypt from 'bcrypt';\r\nimport models from './../models/index';\r\nimport HelperFuncts from './../helpers/HelperFuncts';\r\n\r\nconst { users } = models;\r\nconst UsersController = class {\r\n  // create a new user account\r\n  static signup(req, res) {\r\n    if (!req.file) {\r\n      return users\r\n        .findAll({\r\n          where: {\r\n            username: req.body.username,\r\n            email: req.body.email,\r\n          },\r\n        })\r\n        .then((user) => {\r\n          if (user.length > 0) {\r\n            // username already exist\r\n            res.status(200).send({ message: 'user already exist' });\r\n          }\r\n          const { passwd1, passwd2 } = req.body;\r\n          let passwd;\r\n          if (passwd1 === passwd2) {\r\n            bcrypt.genSalt(10, (err, salt) => {\r\n              bcrypt.hash(passwd1, salt, (hashErr, hash) => {\r\n                passwd = hash;\r\n                users\r\n                  .create({\r\n                    password: passwd,\r\n                    fullname: req.body.fullname,\r\n                    email: req.body.email,\r\n                    username: req.body.username,\r\n                    imgUrl: 'no/file/uploaded',\r\n                    address: req.body.address,\r\n                    isAdmin: req.body.isAdmin,\r\n                    serviceName: req.body.serviceName,\r\n                  })\r\n                  .then((signup) => {\r\n                    res.status(201).send({\r\n                      message: 'signup successful',\r\n                      fullname: signup.fullname,\r\n                      email: signup.email,\r\n                      username: signup.username,\r\n                      imgUrl: signup.imgUrl,\r\n                      id: signup.id,\r\n                    });\r\n                  })\r\n                  .catch(error => res.status(400).send(error));\r\n              });\r\n            });\r\n          } else {\r\n            // password match fail\r\n            res.status(400).send({ message: 'password does not match' });\r\n          }\r\n        })\r\n        .catch(error => res.status(500).send(error));\r\n    }\r\n    return users\r\n      .findAll({\r\n        where: {\r\n          username: req.body.username,\r\n          email: req.body.email,\r\n        },\r\n      })\r\n      .then((user) => {\r\n        if (user.length > 0) {\r\n          // username already exist\r\n          res.status(200).send({ message: 'user already exist' });\r\n        }\r\n        // handle uploaded profile pix\r\n        const destination = HelperFuncts.getImgUrl(req.file.path);\r\n        const { passwd1, passwd2 } = req.body;\r\n        // const passwd2 = req.body.passwd2;\r\n        let passwd;\r\n        if (passwd1 === passwd2) {\r\n          bcrypt.genSalt(10, (err, salt) => {\r\n            bcrypt.hash(passwd1, salt, (hashErr, hash) => {\r\n              passwd = hash;\r\n              users\r\n                .create({\r\n                  password: passwd,\r\n                  fullname: req.body.fullname,\r\n                  email: req.body.email,\r\n                  username: req.body.username,\r\n                  imgUrl: destination,\r\n                  address: req.body.address,\r\n                  isAdmin: req.body.isAdmin,\r\n                  serviceName: req.body.serviceName,\r\n                })\r\n                .then((signup) => {\r\n                  res.status(201).send({\r\n                    message: 'signup successful',\r\n                    fullname: signup.fullname,\r\n                    email: signup.email,\r\n                    username: signup.username,\r\n                    imgUrl: signup.imgUrl,\r\n                    id: signup.id,\r\n                  });\r\n                })\r\n                .catch(error => res.status(400).send(error));\r\n            });\r\n          });\r\n        } else {\r\n          // password match fail\r\n          res.status(400).send({ message: 'password does not match' });\r\n        }\r\n      })\r\n      .catch(error => res.status(500).send(error));\r\n  }\r\n};\r\n\r\nexport default UsersController;\r\n"]}