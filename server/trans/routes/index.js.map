{"version":3,"sources":["../../src/routes/index.js"],"names":["UsersStorage","multer","diskStorage","destination","filename","req","file","cb","originalname","usersUpload","storage","Routes","UsersController","RequestController","ContactController","AdminController","app","get","res","status","send","message","use","next","token","headers","promise","Promise","resolve","reject","jwt","verify","process","env","SECRET_KEY","err","decode","post","single","signup","signin","getAllRequests","put","rejectRequest","approveRequest","resolveRequest","addRequest","getOneRequest","updateRequest","delete","deleteRequest","addMessage","getMessages"],"mappings":"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","file":"index.js","sourcesContent":["import multer from 'multer';\r\nimport jwt from 'jsonwebtoken';\r\nimport UsersController from './../controllers/UsersController';\r\nimport RequestController from './../controllers/RequestController';\r\nimport ContactController from './../controllers/ContactController';\r\nimport AdminController from './../controllers/AdminController';\r\n\r\nconst UsersStorage = multer.diskStorage({\r\n  destination: './public/users-photo/',\r\n  filename: (req, file, cb) => {\r\n    cb(null, file.originalname);\r\n  },\r\n});\r\nconst usersUpload = multer({ storage: UsersStorage });\r\n// const requestController = new RequestController();\r\nconst Routes = class {\r\n  constructor() {\r\n    this.UsersController = UsersController;\r\n    this.RequestController = RequestController;\r\n    this.ContactController = ContactController;\r\n    this.AdminController = AdminController;\r\n  }\r\n  /* eslint-disable class-methods-use-thiss */\r\n  routes(app) {\r\n    app.get('/', (req, res) => {\r\n      res.status(200).send({ message: 'welcome to the maintenance trackers' });\r\n    });\r\n\r\n    // secure api\r\n    app.use('/secure/', (req, res, next) => {\r\n      const { token } = req.headers;\r\n      /* eslint-disable no-unused-vars */\r\n      const promise = new Promise((resolve, reject) => {\r\n        if (token) {\r\n          jwt.verify(token, process.env.SECRET_KEY, (err, decode) => {\r\n            if (err) {\r\n              resolve(res.status(401).send('Invalid Token'));\r\n            } else {\r\n              resolve(next());\r\n            }\r\n          });\r\n        } else {\r\n          resolve(res.status(402).send('Please send a token'));\r\n        }\r\n      });\r\n      return promise;\r\n    });\r\n    // routes for us\r\n    app.post('/api/v1/auth/signup', usersUpload.single('profile-photo'), this.UsersController.signup);\r\n    app.post('/api/v1/auth/signin', this.UsersController.signin);\r\n\r\n    // admin routes\r\n    app.get('/secure/api/v1/requests', this.AdminController.getAllRequests);\r\n    app.put('/secure/api/v1/requests/:requestId/reject', this.AdminController.rejectRequest);\r\n    app.put('/secure/api/v1/requests/:requestId/approve', this.AdminController.approveRequest);\r\n    app.put('/secure/api/v1/requests/:requestId/resolve', this.AdminController.resolveRequest);\r\n\r\n    // user routes\r\n    app.post('/secure/api/v1/users/requests', this.RequestController.addRequest);\r\n    app.get('/secure/api/v1/users/requests/:requestId', this.RequestController.getOneRequest);\r\n    app.get('/secure/api/v1/users/requests', this.RequestController.getAllRequests);\r\n    app.put('/secure/api/v1/users/requests/:requestId', this.RequestController.updateRequest);\r\n    app.delete('/secure/api/v1/users/requests/:requestId', this.RequestController.deleteRequest);\r\n    // routes for contacts model\r\n    app.post('/secure/api/v1/contacts', this.ContactController.addMessage);\r\n    app.get('/secure/api/v1/contacts', this.ContactController.getMessages);\r\n  }\r\n};\r\n\r\nexport default Routes;\r\n"]}