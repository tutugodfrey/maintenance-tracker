{"version":3,"sources":["../../src/test/adminTest.js"],"names":["server","Server","app","expressServer","expect","chai","use","chaiHttp","signedInUser","describe","it","request","post","send","username","adminUser","password","then","res","Object","assign","body","to","have","status","be","an","property","token","a","get","set","length","of","at","least","put","createdRequest1","id","console","log"],"mappings":"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","file":"adminTest.js","sourcesContent":["import chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport Server from './../app';\r\nimport { adminUser } from './signupTest';\r\nimport { createdRequest1 } from './userRequestTest';\r\n\r\nconst server = new Server();\r\nconst app = server.expressServer();\r\nconst { expect } = chai;\r\nchai.use(chaiHttp);\r\nconst signedInUser = {};\r\n\r\nexport default describe('Admin Test', () => {\r\n  it('should signin a User in and give a token', () => {\r\n    return chai.request(app)\r\n      .post('/api/v1/auth/signin')\r\n      .send({\r\n        username: adminUser.username,\r\n        password: '123456',\r\n      })\r\n      .then((res) => {\r\n        Object.assign(signedInUser, res.body);\r\n        expect(res).to.have.status(200);\r\n        expect(res.body).to.be.an('Object');\r\n        expect(res.body).to.have.property('token');\r\n        expect(res.body.token).to.be.a('string');\r\n      });\r\n  });\r\n\r\n  describe('get all request', () => {\r\n    it('should return all request', () => {\r\n      return chai.request(app)\r\n        .get('/api/v1/requests?isAdmin=true')\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(200);\r\n          expect(res.body).to.be.an('array');\r\n          expect(res.body).to.have.length.of.at.least(1);\r\n        });\r\n    });\r\n\r\n    it('should return all request', () => {\r\n      return chai.request(app)\r\n        .get('/api/v1/requests?isAdmin=false')\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(402);\r\n        });\r\n    });\r\n  });\r\n\r\n  describe('Update a request', () => {\r\n    describe('approve request', () => {\r\n      /* Commented block here and below are critecal for the \r\n      for application functionality and so need attention as soon as possible.\r\n      they are commented out to enable working on other feature the the time limit to complete\r\n      the project\r\n      */\r\n\r\n      /*\r\n      it('should return all request', () => {\r\n        return chai.request(app)\r\n          .put(`/api/v1/requests/${createdRequest1.id}/approve?isAdmin=true`)\r\n          .set('token', signedInUser.token)\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.status).to.equal('pending');\r\n          });\r\n      });\r\n      */\r\n\r\n      it('should return all request', () => {\r\n        return chai.request(app)\r\n          .put(`/api/v1/requests/${createdRequest1.id}/approve?isAdmin=false`)\r\n          .set('token', signedInUser.token)\r\n          .then((res) => {\r\n            expect(res).to.have.status(402);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      });\r\n\r\n      it('should not update a request that does not exist', () => {\r\n        return chai.request(app)\r\n          .put('/api/v1/requests/10/approve?isAdmin=true')\r\n          .set('token', signedInUser.token)\r\n          .then((res) => {\r\n            expect(res).to.have.status(404);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      });\r\n\r\n      it('should return bad request if requestId is not set', () => {\r\n        return chai.request(app)\r\n          .put('/api/v1/requests/0/approve?isAdmin=true')\r\n          .set('token', signedInUser.token)\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      });\r\n    });\r\n\r\n    describe('reject request', () => {\r\n      /*\r\n      it('should reject a request', () => {\r\n        return chai.request(app)\r\n          .put(`/api/v1/requests/${createdRequest1.id}/disapprove?isAdmin=true`)\r\n          .set('token', signedInUser.token)\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.status).to.equal('rejected');\r\n          });\r\n      });\r\n      */\r\n\r\n      it('should return all request', () => {\r\n        console.log(\"created request\", createdRequest1)\r\n        return chai.request(app)\r\n          .put(`/api/v1/requests/${createdRequest1.id}/disapprove?isAdmin=false`)\r\n          .set('token', signedInUser.token)\r\n          .then((res) => {\r\n            expect(res).to.have.status(402);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      });\r\n\r\n      it('should not update a request that does not exist', () => {\r\n        return chai.request(app)\r\n          .put('/api/v1/requests/10/disapprove?isAdmin=true')\r\n          .set('token', signedInUser.token)\r\n          .then((res) => {\r\n            expect(res).to.have.status(404);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      });\r\n\r\n      it('should return bad request if requestId is not set', () => {\r\n        return chai.request(app)\r\n          .put('/api/v1/requests/0/disapprove?isAdmin=true')\r\n          .set('token', signedInUser.token)\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      });\r\n    });\r\n\r\n    describe('resolve request', () => {\r\n      /*\r\n      it('should mark a request as resolve', () => {\r\n        return chai.request(app)\r\n          .put(`/api/v1/requests/${createdRequest1.id}/resolve?isAdmin=true`)\r\n          .set('token', signedInUser.token)\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.status).to.equal('resolved');\r\n          });\r\n      });\r\n      */\r\n\r\n      it('should not resolve a reequest', () => {\r\n        return chai.request(app)\r\n          .put(`/api/v1/requests/${createdRequest1.id}/resolve?isAdmin=false`)\r\n          .set('token', signedInUser.token)\r\n          .then((res) => {\r\n            expect(res).to.have.status(402);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      });\r\n      /*\r\n      it('should not update a request that does not exist', () => {\r\n        return chai.request(app)\r\n          .put('/api/v1/requests/10/resolve?isAdmin=true')\r\n          .set('token', signedInUser.token)\r\n          .then((res) => {\r\n            expect(res).to.have.status(404);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      }); */\r\n\r\n      /*\r\n      it('should return bad request if requestId is not set', () => {\r\n        return chai.request(app)\r\n          .put('/api/v1/requests/0/resolve?isAdmin=true')\r\n          .set('token', signedInUser.token)\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      }); */\r\n    });\r\n  });\r\n});\r\n"]}