{"version":3,"sources":["../../src/test/contactTest.js"],"names":["server","Server","app","expressServer","expect","chai","use","chaiHttp","signedInUser","message4","title","message","userId","adminId","senderId","message5","regularUser1","id","adminUser","createdMessage1","createdMessage2","describe","it","request","post","send","username","password","then","res","Object","assign","body","to","have","status","be","an","property","token","a","userMessage","set","get","length","at","least","equal","adminMessage","eql"],"mappings":"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","file":"contactTest.js","sourcesContent":["import chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport Server from './../app';\r\nimport { adminUser, regularUser1 } from './signupTest';\r\n\r\nconst server = new Server();\r\nconst app = server.expressServer();\r\nconst { expect } = chai;\r\nchai.use(chaiHttp);\r\nconst signedInUser = {};\r\nconst message4 = {\r\n  title: 'Apologise',\r\n  message: 'Please we will attend to it right away',\r\n  userId: 0,\r\n  adminId: 0,\r\n  senderId: 7,\r\n};\r\n\r\nconst message5 = {\r\n  title: 'unresolved request',\r\n  message: ' ',\r\n  userId: regularUser1.id,\r\n  adminId: adminUser.id,\r\n  senderId: regularUser1.id,\r\n};\r\n\r\nconst createdMessage1 = {};\r\nconst createdMessage2 = {};\r\n\r\n// tests for the contact model\r\nexport default describe('contacts', () => {\r\n  describe('user send message', () => {\r\n    it('should signin a User in and give a token', () => {\r\n      return chai.request(app)\r\n        .post('/api/v1/auth/signin')\r\n        .send({\r\n          username: regularUser1.username,\r\n          password: '123456',\r\n        })\r\n        .then((res) => {\r\n          Object.assign(signedInUser, res.body);\r\n          expect(res).to.have.status(200);\r\n          expect(res.body).to.be.an('Object');\r\n          expect(res.body).to.have.property('token');\r\n          expect(res.body.token).to.be.a('string');\r\n        });\r\n    });\r\n\r\n    describe('user send messages', () => {\r\n      it('users should be able to send message to the admin', () => {\r\n        const userMessage = {\r\n          title: 'unresolved request',\r\n          message: 'request to replace wall socket was not attended to',\r\n          userId: signedInUser.userId,\r\n          adminId: adminUser.id,\r\n          senderId: signedInUser.userId,\r\n        };\r\n        return chai.request(app)\r\n          .post('/api/v1/contacts')\r\n          .set('token', signedInUser.token)\r\n          .send(userMessage)\r\n          .then((res) => {\r\n            Object.assign(createdMessage1, res.body);\r\n            expect(res).to.have.status(201);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      });\r\n      /*\r\n      it('should return bad request if required fields are not presents', () => {\r\n        const message3 = {\r\n          title: 'Apologise',\r\n          message: 'Please we will attend to it right away',\r\n          userId: regularUser1.id,\r\n          adminId: adminUser.id,\r\n          senderId: 7,\r\n        };\r\n        return chai.request(app)\r\n          .post('/api/v1/contacts')\r\n          .set('token', signedInUser.token)\r\n          .send(message3)\r\n          .then((res) => {\r\n            expect(res).to.have.status(404);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      }); */\r\n\r\n      it('should not create a message for a sender that does not exist', () => {\r\n        return chai.request(app)\r\n          .post('/api/v1/contacts')\r\n          .set('token', signedInUser.token)\r\n          .send(message4)\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      });\r\n\r\n      it('should not create a message if no message is posted', () => {\r\n        return chai.request(app)\r\n          .post('/api/v1/contacts')\r\n          .set('token', signedInUser.token)\r\n          .send(message5)\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      });\r\n    });\r\n\r\n    describe('get messages', () => {\r\n      it('should return all messages for the given userId', () => {\r\n        return chai.request(app)\r\n          .get(`/api/v1/contacts?userId=${regularUser1.id}`)\r\n          .set('token', signedInUser.token)\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('array');\r\n            expect(res.body.length).to.be.at.least(1);\r\n          });\r\n      });\r\n\r\n      it('should return an empty array if no message exist for the given userId', () => {\r\n        return chai.request(app)\r\n          .get('/api/v1/contacts?userId=9')\r\n          .set('token', signedInUser.token)\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('array');\r\n            expect(res.body.length).to.equal(0);\r\n          });\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('admin messages', () => {\r\n    it('should signin a User in and give a token', () => {\r\n      return chai.request(app)\r\n        .post('/api/v1/auth/signin')\r\n        .send({\r\n          username: adminUser.username,\r\n          password: '123456',\r\n        })\r\n        .then((res) => {\r\n          Object.assign(signedInUser, res.body);\r\n          expect(res).to.have.status(200);\r\n          expect(res.body).to.be.an('Object');\r\n          expect(res.body).to.have.property('token');\r\n          expect(res.body.token).to.be.a('string');\r\n        });\r\n    });\r\n\r\n    describe('admin reply messages', () => {\r\n      it('admin should be able to reply a message', () => {\r\n        const adminMessage = {\r\n          title: 'Apologise',\r\n          message: 'Please we will attend to it right away',\r\n          userId: regularUser1.id,\r\n          adminId: adminUser.id,\r\n          senderId: adminUser.id,\r\n        };\r\n        return chai.request(app)\r\n          .post('/api/v1/contacts')\r\n          .set('token', signedInUser.token)\r\n          .send(adminMessage)\r\n          .then((res) => {\r\n            Object.assign(createdMessage2, res.body);\r\n            expect(res).to.have.status(201);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      });\r\n    });\r\n    /*\r\n    it('should return bad request if required fields are not presents', () => {\r\n      const message3 = {\r\n        title: 'Apologise',\r\n        message: 'Please we will attend to it right away',\r\n        userId: regularUser1.id,\r\n        adminId: adminUser.id,\r\n        senderId: 7,\r\n      };\r\n      return chai.request(app)\r\n        .post('/api/v1/contacts')\r\n        .set('token', signedInUser.token)\r\n        .send(message3)\r\n        .then((res) => {\r\n          expect(res).to.have.status(404);\r\n          expect(res.body).to.be.an('object');\r\n        });\r\n    }); */\r\n\r\n    it('should not create a message for a sender that does not exist', () => {\r\n      return chai.request(app)\r\n        .post('/api/v1/contacts')\r\n        .set('token', signedInUser.token)\r\n        .send(message4)\r\n        .then((res) => {\r\n          expect(res).to.have.status(400);\r\n          expect(res.body).to.be.an('object');\r\n        });\r\n    });\r\n\r\n    it('should not create a message if no message is posted', () => {\r\n      return chai.request(app)\r\n        .post('/api/v1/contacts')\r\n        .set('token', signedInUser.token)\r\n        .send(message5)\r\n        .then((res) => {\r\n          expect(res).to.have.status(400);\r\n          expect(res.body).to.be.an('object');\r\n        });\r\n    });\r\n  });\r\n\r\n  describe('admin get message', () => {\r\n   \r\n   /* it('should return all messages if isAdmin === true', () => {\r\n      return chai.request(app)\r\n        .get('/api/v1/contacts?isAdmin=true')\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(200);\r\n          expect(res.body).to.be.an('array');\r\n          expect(res.body.length).to.equal(2);\r\n        });\r\n    }); */\r\n\r\n    it('should return bad request if neither isAdim or userId is not set', () => {\r\n      return chai.request(app)\r\n        .get('/api/v1/contacts?userId=&isAdmin=')\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(400);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body).to.eql({ message: 'missing required field' });\r\n        });\r\n    });\r\n  });\r\n});\r\n\r\n"]}