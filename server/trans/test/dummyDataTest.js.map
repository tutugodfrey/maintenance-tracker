{"version":3,"sources":["../../src/test/dummyDataTest.js"],"names":["expect","chai","users","DataModel","user1","name","email","address","incompleteUser1","user2","createdUser1","createdUser2","wrongdUser2","id","updateUser2","describe","it","to","be","a","an","instanceOf","modelName","uniqueKeys","requiredFields","model","create","then","user","eql","catch","error","message","Object","assign","length","equal","update","newUser2","findById","singleModel","find","where","findAll","allUsers","have","of","at","least","destroy"],"mappings":"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","file":"dummyDataTest.js","sourcesContent":["\r\nimport chai from 'chai';\r\nimport DataModel from './../models/DummyDataModel';\r\n\r\nconst { expect } = chai;\r\nconst users = new DataModel('users', ['email'], ['name', 'email']);\r\nconst user1 = {\r\n  name: 'jane doe',\r\n  email: 'jane_doe@somebody.com',\r\n  address: 'somewhere in the world',\r\n};\r\n\r\nconst incompleteUser1 = {\r\n  name: '',\r\n  email: 'jane_doe@somebody.com',\r\n  address: 'somewhere in the world',\r\n};\r\n\r\nconst user2 = {\r\n  name: 'alice',\r\n  email: 'alice@somebody.com',\r\n  address: 'lives in another planet',\r\n};\r\nconst createdUser1 = {};\r\nconst createdUser2 = {};\r\nconst wrongdUser2 = {\r\n  id: 2,\r\n  name: 'alice',\r\n  email: 'alice@somebody.com',\r\n  address: 'lives in another planet',\r\n};\r\nconst updateUser2 = {\r\n  name: 'alice bob',\r\n  address: 'now living in planet earth',\r\n};\r\n\r\ndescribe('Dummy Data Model', () => {\r\n  describe('DataModel', () => {\r\n    it('should export a function', () => {\r\n      expect(DataModel).to.be.a('function');\r\n    });\r\n  });\r\n\r\n  describe('Users', () => {\r\n    it('should export a function', () => {\r\n      expect(users).to.be.a('object');\r\n    });\r\n    it('should be an instance of DataModel', () => {\r\n      expect(users).to.be.an.instanceOf(DataModel);\r\n    });\r\n\r\n    it('should have property modelName that is of type string', () => {\r\n      expect(users.modelName).to.be.an('string');\r\n    });\r\n\r\n    it('should have property uniquekeys that is of type array', () => {\r\n      expect(users.uniqueKeys).to.be.an('array');\r\n    });\r\n\r\n    it('should have property requiredFields that is of type array', () => {\r\n      expect(users.requiredFields).to.be.an('array');\r\n    });\r\n  });\r\n\r\n  describe('create method', () => {\r\n    it('user model should be an array', () => {\r\n      expect(users.model).to.be.an('array');\r\n    });\r\n\r\n    it('should not create a new user if required is null', () => {\r\n      users.create(incompleteUser1)\r\n        .then((user) => {\r\n          expect(user).to.eql({\r\n            id: 1,\r\n            name: 'jane doe',\r\n            email: 'jane_doe@somebody.com',\r\n            address: 'somewhere in the world',\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          expect(error).to.eql({ message: 'missing required field' });\r\n        });\r\n    });\r\n\r\n    it('it should create new user', () => {\r\n      users.create(user1)\r\n        .then((user) => {\r\n          Object.assign(createdUser1, user);\r\n          expect(user).to.eql({\r\n            id: 1,\r\n            name: 'jane doe',\r\n            email: 'jane_doe@somebody.com',\r\n            address: 'somewhere in the world',\r\n          });\r\n        });\r\n    });\r\n\r\n    it('it should create another user', () => {\r\n      users.create(user2)\r\n        .then((user) => {\r\n          Object.assign(createdUser2, user);\r\n          expect(user).to.eql({\r\n            id: 2,\r\n            name: 'alice',\r\n            email: 'alice@somebody.com',\r\n            address: 'lives in another planet',\r\n          });\r\n        });\r\n    });\r\n\r\n    it('should not create duplicate entry for unique keys', () => {\r\n      users.create(user2)\r\n        .then((user) => {\r\n          expect(user).to.eql({\r\n            id: 2,\r\n            name: 'alice',\r\n            email: 'alice@somebody.com',\r\n            address: 'lives in another planet',\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          expect(error).to.eql({ message: 'duplicate entry for unique key' });\r\n        });\r\n    });\r\n\r\n    it('lenght of model should increase', () => {\r\n      expect(users.model.length).to.equal(2);\r\n    });\r\n  });\r\n\r\n  describe('update method', () => {\r\n    it('should update a model', () => {\r\n      users.update(createdUser2, updateUser2)\r\n        .then((newUser2) => {\r\n          expect(newUser2).to.eql({\r\n            id: 2,\r\n            email: 'alice@somebody.com',\r\n            name: 'alice bob',\r\n            address: 'now living in planet earth',\r\n          });\r\n        });\r\n    });\r\n\r\n    it('should not update a wrong model', () => {\r\n      users.update(wrongdUser2, updateUser2)\r\n        .then((newUser2) => {\r\n          expect(newUser2).to.eql({\r\n            id: 2,\r\n            email: 'alice@somebody.com',\r\n            name: 'alice bob',\r\n            address: 'now living in planet earth',\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          expect(error).to.eql({ message: 'user not found' });\r\n        });\r\n    });\r\n\r\n    it('should fail if arguments are not objects', () => {\r\n      users.update('wrongdUser2', updateUser2)\r\n        .then((newUser2) => {\r\n          expect(newUser2).to.eql({\r\n            id: 2,\r\n            email: 'alice@somebody.com',\r\n            name: 'alice bob',\r\n            address: 'now living in planet earth',\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          expect(error).to.eql({ message: 'invalid argument passed to update! expects argument1 and argument2 to be objects' });\r\n        });\r\n    });\r\n  });\r\n\r\n  describe('findById', () => {\r\n    it('should return the model with the given id', () => {\r\n      users.findById(1)\r\n        .then((user) => {\r\n          expect(user).to.eql({\r\n            id: 1,\r\n            name: 'jane doe',\r\n            email: 'jane_doe@somebody.com',\r\n            address: 'somewhere in the world',\r\n          });\r\n        });\r\n    });\r\n\r\n    it('should return not found if model with given id is not not found', () => {\r\n      users.findById(3)\r\n        .then((user) => {\r\n          expect(user).to.eql({\r\n            id: 1,\r\n            name: 'jane doe',\r\n            email: 'jane_doe@somebody.com',\r\n            address: 'somewhere in the world',\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          expect(error).to.eql({ error: `${users.singleModel} not found` });\r\n        });\r\n    });\r\n  });\r\n\r\n  describe('find', () => {\r\n    it('should find a model that meet the given conditions', () => {\r\n      //  console.log(users)\r\n      users.find({\r\n        where: {\r\n          name: 'alice bob',\r\n        },\r\n      })\r\n        .then((user) => {\r\n          expect(user).to.eql({\r\n            id: 2,\r\n            email: 'alice@somebody.com',\r\n            name: 'alice bob',\r\n            address: 'now living in planet earth',\r\n          });\r\n        });\r\n    });\r\n\r\n    it('should only return a model that meet all conditions', () => {\r\n      users.find({\r\n        where: {\r\n          name: 'alice bob',\r\n          id: 4,\r\n        },\r\n      })\r\n        .then((user) => {\r\n          expect(user).to.eql({\r\n            id: 2,\r\n            email: 'alice@somebody.com',\r\n            name: 'alice bob',\r\n            address: 'now living in planet earth',\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          expect(error).to.eql({ message: 'user not found' });\r\n        });\r\n    });\r\n\r\n    it('should fail if no condition is specified', () => {\r\n      users.find()\r\n        .catch((error) => {\r\n          expect(error).to.eql({ message: 'missing object propertiy \\'where\\' to find model' });\r\n        });\r\n    });\r\n\r\n    it('should fail if condition does not have property \"where\"', () => {\r\n      users.find({})\r\n        .catch((error) => {\r\n          expect(error).to.eql({ message: 'missing object propertiy \\'where\\' to find model' });\r\n        });\r\n    });\r\n  });\r\n\r\n  describe('findAll', () => {\r\n    it('should return all models if no condition is specified', () => {\r\n      users.findAll()\r\n        .then((allUsers) => {\r\n          expect(allUsers).to.be.an('array');\r\n          expect(allUsers.length).to.equal(2);\r\n        });\r\n    });\r\n\r\n    it('should return all models that meets the specified conditions', () => {\r\n      users.findAll({\r\n        where: {\r\n          address: 'somewhere in the world',\r\n        },\r\n      })\r\n        .then((allUsers) => {\r\n          expect(allUsers).to.be.an('array');\r\n          expect(allUsers).to.have.length.of.at.least(1);\r\n        });\r\n    });\r\n\r\n    it('should return an empty array if models does not that meets the specified conditions', () => {\r\n      users.findAll({\r\n        where: {\r\n          address: 'somewhere the world',\r\n        },\r\n      })\r\n        .then((allUsers) => {\r\n          expect(allUsers).to.be.an('array');\r\n          expect(allUsers).to.have.length(0);\r\n        });\r\n    });\r\n  });\r\n  describe('destroy', () => {\r\n    it('should delete a model that meets the specified condition', () => {\r\n      users.destroy({\r\n        where: {\r\n          id: 1,\r\n        },\r\n      })\r\n        .then((message) => {\r\n          expect(message).to.eql({ message: 'user has been deleted' });\r\n        });\r\n    });\r\n\r\n    it('should do nothing if no model meet the specified condition', () => {\r\n      users.destroy({\r\n        where: {\r\n          name: 'linda',\r\n        },\r\n      })\r\n        .catch((message) => {\r\n          expect(message).to.eql({ message: `${users.singleModel} not found, not action taken` });\r\n        });\r\n    });\r\n  });\r\n});\r\n"]}