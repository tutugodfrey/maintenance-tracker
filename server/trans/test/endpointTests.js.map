{"version":3,"sources":["../../src/test/endpointTests.js"],"names":["server","Server","app","expressServer","expect","chai","use","chaiHttp","request1","category","description","urgency","department","userId","status","request2","request3","request4","message1","title","message","adminId","senderId","message2","message3","message4","message5","adminUser","regularUser1","signedInUser","regularUser2","createdRequest1","createdRequest2","createdMessage1","createdMessage2","process","env","NODE_ENV","console","log","describe","it","request","get","then","res","to","have","body","be","an","eql","post","set","field","attach","Object","assign","isAdmin","equal","password","not","send","username","property","token","a","length","id","any","keys","of","at","least","deep","include","members","delete","put"],"mappings":"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","file":"endpointTests.js","sourcesContent":["import chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport Server from './../app';\r\n\r\nconst server = new Server();\r\nconst app = server.expressServer();\r\nconst { expect } = chai;\r\nchai.use(chaiHttp);\r\n\r\nconst request1 = {\r\n  category: 'electrical',\r\n  description: 'Socket burned',\r\n  urgency: 'urgent',\r\n  department: 'baking',\r\n  userId: 2,\r\n  status: 'pending',\r\n};\r\nconst request2 = {\r\n  category: 'electrical',\r\n  description: 'Socket burned',\r\n  urgency: 'urgent',\r\n  department: 'baking',\r\n  userId: 3,\r\n  status: 'pending',\r\n};\r\n\r\nconst request3 = {\r\n  category: 'electrical',\r\n  description: 'Socket burned',\r\n  urgency: 'urgent',\r\n  department: 'baking',\r\n  userId: 9,\r\n  status: 'pending',\r\n};\r\n\r\nconst request4 = {\r\n  category: 'electrical',\r\n  description: '',\r\n  urgency: 'urgent',\r\n  department: 'baking',\r\n  userId: 2,\r\n  status: 'pending',\r\n};\r\n\r\nconst message1 = {\r\n  title: 'unresolved request',\r\n  message: 'request to replace wall socket was not attended to',\r\n  userId: 2,\r\n  adminId: 1,\r\n  senderId: 2,\r\n};\r\n\r\nconst message2 = {\r\n  title: 'Apologise',\r\n  message: 'Please we will attend to it right away',\r\n  userId: 2,\r\n  adminId: 1,\r\n  senderId: 1,\r\n};\r\n\r\nconst message3 = {\r\n  title: 'Apologise',\r\n  message: 'Please we will attend to it right away',\r\n  userId: 2,\r\n  adminId: 1,\r\n  senderId: 7,\r\n};\r\n\r\nconst message4 = {\r\n  title: 'Apologise',\r\n  message: 'Please we will attend to it right away',\r\n  userId: 0,\r\n  adminId: 0,\r\n  senderId: 7,\r\n};\r\n\r\nconst message5 = {\r\n  title: 'unresolved request',\r\n  message: ' ',\r\n  userId: 2,\r\n  adminId: 1,\r\n  senderId: 2,\r\n};\r\n\r\nconst adminUser = {};\r\nconst regularUser1 = {};\r\nconst signedInUser = {};\r\nconst regularUser2 = {};\r\nconst createdRequest1 = {};\r\nconst createdRequest2 = {};\r\nconst createdMessage1 = {};\r\nconst createdMessage2 = {};\r\n\r\n// enforce test to run in test env\r\nif (process.env.NODE_ENV !== 'test') {\r\n  /* eslint-disable no-console */\r\n  console.log(`can't run test in non test env. you are in ${process.env.NODE_ENV} environment`);\r\n} else {\r\n  describe('API End Points', () => {\r\n    // test home route\r\n    describe('Home', () => {\r\n      it('should return welcome message', () => {\r\n        return chai.request(app)\r\n          .get('/')\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('Object');\r\n            expect(res.body).to.eql({ message: 'welcome to the maintenance trackers' });\r\n          });\r\n      });\r\n    });\r\n\r\n    describe('Users signup', () => {\r\n      describe('Admin User', () => {\r\n        it('should create new admin user', () => {\r\n          return chai.request(app)\r\n            .post('/api/v1/users/signup')\r\n            .set('Content-Type', 'multipart/form-data')\r\n            .field('fullname', 'john doe')\r\n            .field('username', 'johnd')\r\n            .field('email', 'johnd@yahoo.com')\r\n            .field('address', 'market road')\r\n            .field('serviceName', 'mk services')\r\n            .field('passwd1', '1234')\r\n            .field('passwd2', '1234')\r\n            .field('isAdmin', true)\r\n            .attach('profile-photo', './fileuploads/tutug.jpeg')\r\n            .then((res) => {\r\n              Object.assign(adminUser, res.body);\r\n              expect(res).to.have.status(201);\r\n              expect(res.body).to.be.an('Object');\r\n              expect(res.body.isAdmin).to.equal('true');\r\n            });\r\n        });\r\n      });\r\n\r\n      describe('Create regular User', () => {\r\n        it('should create new regular user', () => {\r\n          return chai.request(app)\r\n            .post('/api/v1/users/signup')\r\n            .set('Content-Type', 'multipart/form-data')\r\n            .field('fullname', 'brain walter')\r\n            .field('username', 'walterb')\r\n            .field('email', 'walterb@yahoo.com')\r\n            .field('address', 'market road')\r\n            .field('serviceName', 'mk services')\r\n            .field('passwd1', '1234')\r\n            .field('passwd2', '1234')\r\n            .field('isAdmin', false)\r\n            .attach('profile-photo', './fileuploads/tutug.jpeg')\r\n            .then((res) => {\r\n              Object.assign(regularUser1, res.body);\r\n              expect(res).to.have.status(201);\r\n              expect(res.body).to.be.an('Object');\r\n            });\r\n        });\r\n\r\n        it('file submission should be optional', () => {\r\n          return chai.request(app)\r\n            .post('/api/v1/users/signup')\r\n            .set('Content-Type', 'multipart/form-data')\r\n            .field('fullname', 'ryan bob')\r\n            .field('username', 'ryanb')\r\n            .field('email', 'raynb@yahoo.com')\r\n            .field('address', 'market road')\r\n            .field('serviceName', '')\r\n            .field('passwd1', '1234')\r\n            .field('passwd2', '1234')\r\n            .field('isAdmin', false)\r\n            .then((res) => {\r\n              Object.assign(regularUser2, res.body);\r\n              expect(res).to.have.status(201);\r\n              expect(res.body).to.be.an('Object');\r\n              expect(res.body.password).to.not.equal('1234');\r\n            });\r\n        });\r\n\r\n        it('username should be unique ', () => {\r\n          return chai.request(app)\r\n            .post('/api/v1/users/signup')\r\n            .set('Content-Type', 'multipart/form-data')\r\n            .field('fullname', 'walter brain')\r\n            .field('username', 'walterb')\r\n            .field('email', 'walterb@yahoo.com')\r\n            .field('address', 'market road')\r\n            .field('serviceName', 'mk services')\r\n            .field('passwd1', '1234')\r\n            .field('passwd2', '1234')\r\n            .field('isAdmin', false)\r\n            .attach('profile-photo', './fileuploads/tutug.jpeg')\r\n            .then((res) => {\r\n              expect(res).to.have.status(400);\r\n              expect(res.body).to.be.an('Object');\r\n              expect(res.body).to.eql({ message: 'user already exist' });\r\n            });\r\n        });\r\n\r\n        it('email should be unique ', () => {\r\n          return chai.request(app)\r\n            .post('/api/v1/users/signup')\r\n            .set('Content-Type', 'multipart/form-data')\r\n            .field('fullname', 'brain walter')\r\n            .field('username', 'walterbr')\r\n            .field('email', 'walterb@yahoo.com')\r\n            .field('address', 'market road')\r\n            .field('serviceName', 'mk services')\r\n            .field('passwd1', '1234')\r\n            .field('passwd2', '1234')\r\n            .field('isAdmin', false)\r\n            .attach('profile-photo', './fileuploads/tutug.jpeg')\r\n            .then((res) => {\r\n              expect(res).to.have.status(400);\r\n              expect(res.body).to.be.an('Object');\r\n              expect(res.body).to.eql({ message: 'user already exist' });\r\n            });\r\n        });\r\n\r\n        it('password, confirm-password should match', () => {\r\n          return chai.request(app)\r\n            .post('/api/v1/users/signup')\r\n            .set('Content-Type', 'multipart/form-data')\r\n            .field('fullname', 'brain walter')\r\n            .field('username', 'walterbr')\r\n            .field('email', 'walterbr@yahoo.com')\r\n            .field('address', 'market road')\r\n            .field('serviceName', 'mk services')\r\n            .field('passwd1', '12345')\r\n            .field('passwd2', '12349')\r\n            .field('isAdmin', false)\r\n            .attach('profile-photo', './fileuploads/tutug.jpeg')\r\n            .then((res) => {\r\n              expect(res).to.have.status(400);\r\n              expect(res.body).to.be.an('Object');\r\n              expect(res.body).to.eql({ message: 'password does not match' });\r\n            });\r\n        });\r\n      });\r\n    });\r\n\r\n    describe('Signin', () => {\r\n      it('should signin a User in and give a token', () => {\r\n        return chai.request(app)\r\n          .post('/api/v1/users/signin')\r\n          .send({\r\n            username: regularUser1.username,\r\n            password: '1234',\r\n          })\r\n          .then((res) => {\r\n            Object.assign(signedInUser, res.body);\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('Object');\r\n            expect(res.body).to.have.property('token');\r\n            expect(res.body.token).to.be.a('string');\r\n          });\r\n      });\r\n\r\n      it('should not signin a user if password is not correct', () => {\r\n        return chai.request(app)\r\n          .post('/api/v1/users/signin')\r\n          .send({\r\n            username: regularUser1.username,\r\n            password: '1345',\r\n          })\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('Object');\r\n          });\r\n      });\r\n\r\n      it('should not signin a user if password is not correct', () => {\r\n        return chai.request(app)\r\n          .post('/api/v1/users/signin')\r\n          .send({\r\n            username: 'someoneelse',\r\n            password: '1344',\r\n          })\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('Object');\r\n          });\r\n      });\r\n    });\r\n\r\n    describe('Empty request model', () => {\r\n      it('should return an empty array', () => {\r\n        return chai.request(app)\r\n          .get('/api/v1/users/requests')\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n          });\r\n      });\r\n      it('should return not found for the request id', () => {\r\n        return chai.request(app)\r\n          .get('/api/v1/users/requests/1')\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n\r\n      it('should return an empty array if no message exist for the model', () => {\r\n        return chai.request(app)\r\n          .get('/api/v1/contacts?isAdmin=true')\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('array');\r\n            expect(res.body.length).to.equal(0);\r\n          });\r\n      });\r\n    });\r\n\r\n    // test for post ../users/requests\r\n    describe('Create requests', () => {\r\n      it('should create a new request', () => {\r\n        return chai.request(app)\r\n          .post('/api/v1/users/requests')\r\n          .send(request1)\r\n          .then((res) => {\r\n            Object.assign(createdRequest1, res.body.request);\r\n            expect(res).to.have.status(201);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.request.id).to.equal(1);\r\n            expect(res.body.request).to.have.any.keys(['description', 'category', 'userId']);\r\n          });\r\n      });\r\n\r\n      it('should create a new request', () => {\r\n        return chai.request(app)\r\n          .post('/api/v1/users/requests')\r\n          .send(request2)\r\n          .then((res) => {\r\n            Object.assign(createdRequest2, res.body.request);\r\n            expect(res).to.have.status(201);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.request.id).to.equal(2);\r\n            expect(res.body.request).to.have.any.keys('description');\r\n            expect(res.body.request).to.have.any.keys('category');\r\n            expect(res.body.request).to.have.any.keys('userId');\r\n          });\r\n      });\r\n      it('should not create request for users that does not exist', () => {\r\n        return chai.request(app)\r\n          .post('/api/v1/users/requests')\r\n          .send(request3)\r\n          .then((res) => {\r\n            expect(res).to.have.status(404);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      });\r\n\r\n      it('should not create request if a required field is not present', () => {\r\n        return chai.request(app)\r\n          .post('/api/v1/users/requests')\r\n          .send(request4)\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n    });\r\n\r\n    // test for get ../users/requests/:requestId\r\n    describe('get one request', () => {\r\n      it('should return a request with the given id for a logged in user', () => {\r\n        const { id, userId } = createdRequest1;\r\n        return chai.request(app)\r\n          .get(`/api/v1/users/requests/${id}?userId=${userId}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.have.any.keys('userId');\r\n          });\r\n      });\r\n\r\n      it('should return not found for requestId that does not exist for a logged in user', () => {\r\n        const { userId } = createdRequest1;\r\n        return chai.request(app)\r\n          .get(`/api/v1/users/requests/5?userId=${userId}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(404);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'request not found' });\r\n          });\r\n      });\r\n\r\n      it('should return not found for the requestId with no matching userId', () => {\r\n        const { id } = createdRequest1;\r\n        return chai.request(app)\r\n          .get(`/api/v1/users/requests/${id}?userId=6`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(404);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'request not found' });\r\n          });\r\n      });\r\n\r\n      it('should return bad request if either userId nor requestId is invalid', () => {\r\n        const { id } = createdRequest1;\r\n        return chai.request(app)\r\n          .get(`/api/v1/users/requests/${id}?userId=0`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n\r\n      it('should return bad request if either userId nor requestId is invalid', () => {\r\n        const { userId } = createdRequest1;\r\n        return chai.request(app)\r\n          .get(`/api/v1/users/requests/0?userId=${userId}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n\r\n      it('should return bad request if neither userId nor requestId is valid', () => {\r\n        return chai.request(app)\r\n          .get('/api/v1/users/requests/0?userId=0')\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n    });\r\n\r\n    // test for get ../users/requests\r\n    describe('get all request', () => {\r\n      it('should return all request for logged in user', () => {\r\n        const { userId } = createdRequest1;\r\n        return chai.request(app)\r\n          .get(`/api/v1/users/requests?userId=${userId}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('array');\r\n            expect(res.body).to.have.length.of.at.least(1);\r\n            expect(res.body).to.deep.include.members([createdRequest1]);\r\n          });\r\n      });\r\n\r\n      it('should return an empty array if no matching userId is found', () => {\r\n        return chai.request(app)\r\n          .get('/api/v1/users/requests?userId=5')\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('array');\r\n            expect(res.body.length).to.equal(0);\r\n          });\r\n      });\r\n\r\n      it('should return bad request if userId is not supplied in query', () => {\r\n        return chai.request(app)\r\n          .get('/api/v1/users/requests')\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n    });\r\n\r\n    // test for delete ../users/requests/:requestId\r\n    describe('delete request', () => {\r\n      it('should delete a request', () => {\r\n        const { id, userId } = createdRequest2;\r\n        return chai.request(app)\r\n          .delete(`/api/v1/users/requests/${id}?userId=${userId}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'request has been deleted' });\r\n          });\r\n      });\r\n\r\n      it('should return not found request that does not exist', () => {\r\n        const { userId } = createdRequest2;\r\n        return chai.request(app)\r\n          .delete(`/api/v1/users/requests/4?userId=${userId}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(404);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'request not found, not action taken' });\r\n          });\r\n      });\r\n\r\n      it('should not delete a request belonging to another person', () => {\r\n        const { userId } = createdRequest2;\r\n        const { id } = createdRequest1;\r\n        return chai.request(app)\r\n          .delete(`/api/v1/users/requests/${id}?userId=${userId}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(404);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'request not found, not action taken' });\r\n          });\r\n      });\r\n\r\n      it('should return bad request if requestId is not specified params', () => {\r\n        const { userId } = createdRequest2;\r\n        return chai.request(app)\r\n          .delete(`/api/v1/users/requests/0?userId=${userId}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n\r\n      it('should return bad request if requestId and userId is invalid', () => {\r\n        return chai.request(app)\r\n          .delete('/api/v1/users/requests/0?userId=0')\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n\r\n      it('should return bad request if requestId is given but userId is not specified in query', () => {\r\n        const { id } = createdRequest2;\r\n        return chai.request(app)\r\n          .delete(`/api/v1/users/requests/${id}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n    });\r\n\r\n    // test for put ../users/requests/:requestId\r\n    describe('update request', () => {\r\n      describe('Users', () => {\r\n        it('users should be able to modify the other field except the status of a request', () => {\r\n          const { id, userId } = createdRequest1;\r\n          return chai.request(app)\r\n            .put(`/api/v1/users/requests/${id}?userId=${userId}`)\r\n            .send({\r\n              description: 'wall socket got burned and need replacement',\r\n            })\r\n            .then((res) => {\r\n              expect(res).to.have.status(200);\r\n              expect(res.body).to.be.an('object');\r\n              expect(res.body.description).to.equal('wall socket got burned and need replacement');\r\n            });\r\n        });\r\n\r\n        it('users should not be able to modify the status of a request', () => {\r\n          const { id, userId } = createdRequest1;\r\n          return chai.request(app)\r\n            .put(`/api/v1/users/requests/${id}?userId=${userId}&isAdmin=`)\r\n            .send({\r\n              status: 'approved',\r\n            })\r\n            .then((res) => {\r\n              expect(res).to.have.status(200);\r\n              expect(res.body).to.be.an('object');\r\n              expect(res.body.status).to.equal('pending');\r\n            });\r\n        });\r\n\r\n        it('should return not found for a request that does not exist', () => {\r\n          const { userId } = createdRequest1;\r\n          return chai.request(app)\r\n            .put(`/api/v1/users/requests/4?userId=${userId}`)\r\n            .send({\r\n              description: 'wall socket got burned and need replacement',\r\n            })\r\n            .then((res) => {\r\n              expect(res).to.have.status(404);\r\n              expect(res.body).to.be.an('object');\r\n            });\r\n        });\r\n\r\n        it('should return not found for a request with no matching userId', () => {\r\n          const { id } = createdRequest1;\r\n          return chai.request(app)\r\n            .put(`/api/v1/users/requests/${id}?userId=10`)\r\n            .send({\r\n              description: 'wall socket got burned and need replacement',\r\n            })\r\n            .then((res) => {\r\n              expect(res).to.have.status(404);\r\n              expect(res.body).to.be.an('object');\r\n            });\r\n        });\r\n      });\r\n\r\n      describe('Admin', () => {\r\n        it('admin should be able to modify the status of a request', () => {\r\n          const { id, userId } = createdRequest1;\r\n          return chai.request(app)\r\n            .put(`/api/v1/users/requests/${id}?userId=${userId}&isAdmin=true`)\r\n            .send({\r\n              status: 'approved',\r\n            })\r\n            .then((res) => {\r\n              expect(res).to.have.status(200);\r\n              expect(res.body).to.be.an('object');\r\n              expect(res.body.status).to.equal('approved');\r\n            });\r\n        });\r\n\r\n        it('admin should not be able to modify the other field except the status of a request', () => {\r\n          const { id, userId } = createdRequest1;\r\n          return chai.request(app)\r\n            .put(`/api/v1/users/requests/${id}?userId=${userId}&isAdmin=true`)\r\n            .send({\r\n              description: 'wall socket is bad and need replacement',\r\n            })\r\n            .then((res) => {\r\n              expect(res).to.have.status(200);\r\n              expect(res.body).to.be.an('object');\r\n              expect(res.body.description).to.equal('wall socket got burned and need replacement');\r\n            });\r\n        });\r\n\r\n        it('admin should not be able to modify a request that does not exist', () => {\r\n          const { userId } = createdRequest1;\r\n          return chai.request(app)\r\n            .put(`/api/v1/users/requests/5?userId=${userId}&isAdmin=true`)\r\n            .send({\r\n              status: 'rejected',\r\n            })\r\n            .then((res) => {\r\n              expect(res).to.have.status(404);\r\n              expect(res.body).to.be.an('object');\r\n            });\r\n        });\r\n\r\n        it('admin should not be able to modify a request with no matching userId', () => {\r\n          const { id } = createdRequest1;\r\n          return chai.request(app)\r\n            .put(`/api/v1/users/requests/${id}?userId=3&isAdmin=true`)\r\n            .send({\r\n              status: 'resolved',\r\n            })\r\n            .then((res) => {\r\n              expect(res).to.have.status(404);\r\n              expect(res.body).to.be.an('object');\r\n            });\r\n        });\r\n      });\r\n\r\n      it('should return bad request if userId is not present in query', () => {\r\n        return chai.request(app)\r\n          .put('/api/v1/users/requests/4')\r\n          .send({\r\n            status: 'approved',\r\n          })\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      });\r\n\r\n      it('should return bad request if requestId is not specified params', () => {\r\n        return chai.request(app)\r\n          .put('/api/v1/users/requests/0?userId={userId}')\r\n          .send({\r\n            status: 'approved',\r\n          })\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n\r\n      it('should return bad request if userId is not specified query', () => {\r\n        const { id } = createdRequest1;\r\n        return chai.request(app)\r\n          .put(`/api/v1/users/requests/${id}?userId=`)\r\n          .send({\r\n            status: 'approved',\r\n          })\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n\r\n      it('should not update if neither userId nor requestId exist', () => {\r\n        return chai.request(app)\r\n          .put('/api/v1/users/requests/6?userId=7')\r\n          .send({\r\n            status: 'approved',\r\n          })\r\n          .then((res) => {\r\n            expect(res).to.have.status(404);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      });\r\n    });\r\n\r\n    // tests for the contact model\r\n    describe('contacts', () => {\r\n      describe('add contacts messages', () => {\r\n        it('users should be able to send message to the admin', () => {\r\n          return chai.request(app)\r\n            .post('/api/v1/contacts')\r\n            .send(message1)\r\n            .then((res) => {\r\n              Object.assign(createdMessage1, res.body);\r\n              expect(res).to.have.status(201);\r\n              expect(res.body).to.be.an('object');\r\n            });\r\n        });\r\n\r\n        it('admin should be able to reply a message', () => {\r\n          return chai.request(app)\r\n            .post('/api/v1/contacts')\r\n            .send(message2)\r\n            .then((res) => {\r\n              Object.assign(createdMessage2, res.body);\r\n              expect(res).to.have.status(201);\r\n              expect(res.body).to.be.an('object');\r\n            });\r\n        });\r\n\r\n        it('should return bad request if required fields are not presents', () => {\r\n          return chai.request(app)\r\n            .post('/api/v1/contacts')\r\n            .send(message3)\r\n            .then((res) => {\r\n              expect(res).to.have.status(404);\r\n              expect(res.body).to.be.an('object');\r\n            });\r\n        });\r\n\r\n        it('should not create a message for a sender that does not exist', () => {\r\n          return chai.request(app)\r\n            .post('/api/v1/contacts')\r\n            .send(message4)\r\n            .then((res) => {\r\n              expect(res).to.have.status(400);\r\n              expect(res.body).to.be.an('object');\r\n            });\r\n        });\r\n\r\n        it('should not create a message if no message is posted', () => {\r\n          return chai.request(app)\r\n            .post('/api/v1/contacts')\r\n            .send(message5)\r\n            .then((res) => {\r\n              expect(res).to.have.status(400);\r\n              expect(res.body).to.be.an('object');\r\n            });\r\n        });\r\n      });\r\n\r\n      describe('get messages', () => {\r\n        it('should return all messages for the given userId', () => {\r\n          return chai.request(app)\r\n            .get('/api/v1/contacts?userId=2')\r\n            .then((res) => {\r\n              expect(res).to.have.status(200);\r\n              expect(res.body).to.be.an('array');\r\n              expect(res.body.length).to.equal(2);\r\n            });\r\n        });\r\n\r\n        it('should return an empty array if no message exist for the given userId', () => {\r\n          return chai.request(app)\r\n            .get('/api/v1/contacts?userId=9')\r\n            .then((res) => {\r\n              expect(res).to.have.status(200);\r\n              expect(res.body).to.be.an('array');\r\n              expect(res.body.length).to.equal(0);\r\n            });\r\n        });\r\n\r\n        it('should return all messages if isAdmin === true', () => {\r\n          return chai.request(app)\r\n            .get('/api/v1/contacts?isAdmin=true')\r\n            .then((res) => {\r\n              expect(res).to.have.status(200);\r\n              expect(res.body).to.be.an('array');\r\n              expect(res.body.length).to.equal(2);\r\n            });\r\n        });\r\n\r\n        it('should return bad request if neither isAdim or userId is not set', () => {\r\n          return chai.request(app)\r\n            .get('/api/v1/contacts?userId=&isAdmin=')\r\n            .then((res) => {\r\n              expect(res).to.have.status(400);\r\n              expect(res.body).to.be.an('object');\r\n              expect(res.body).to.eql({ message: 'missing required field' });\r\n            });\r\n        });\r\n      });\r\n    });\r\n  });\r\n}\r\n"]}