{"version":3,"sources":["../../src/test/endpointTests.js"],"names":["server","Server","app","expressServer","expect","chai","use","chaiHttp","request1","category","description","urgency","department","userId","status","request2","request3","request4","createdRequest1","createdRequest2","process","env","NODE_ENV","console","log","describe","it","request","get","then","res","to","have","body","be","an","eql","message","length","post","send","Object","assign","id","equal","any","keys","of","at","least","deep","include","members","put"],"mappings":"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","file":"endpointTests.js","sourcesContent":["import chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport Server from './../app';\r\n\r\nconst server = new Server();\r\nconst app = server.expressServer();\r\nconst { expect } = chai;\r\nchai.use(chaiHttp);\r\n\r\nconst request1 = {\r\n  category: 'electrical',\r\n  description: 'Socket  burned',\r\n  urgency: 'urgent',\r\n  department: 'baking',\r\n  userId: 1,\r\n  status: 'pending',\r\n};\r\nconst request2 = {\r\n  category: 'electrical',\r\n  description: 'Socket  burned',\r\n  urgency: 'urgent',\r\n  department: 'baking',\r\n  userId: 2,\r\n  status: 'pending',\r\n};\r\n\r\nconst request3 = {\r\n  category: 'electrical',\r\n  description: 'Socket  burned',\r\n  urgency: 'urgent',\r\n  department: 'baking',\r\n  userId: 4,\r\n  status: 'pending',\r\n};\r\n\r\nconst request4 = {\r\n  category: 'electrical',\r\n  description: '',\r\n  urgency: 'urgent',\r\n  department: 'baking',\r\n  userId: 2,\r\n  status: 'pending',\r\n};\r\nconst createdRequest1 = {};\r\nconst createdRequest2 = {};\r\n// enforce test to run in test env\r\nif (process.env.NODE_ENV !== 'test') {\r\n  /* eslint-disable no-console */\r\n  console.log(`can't run test in non test env. you are in ${process.env.NODE_ENV} environment`);\r\n} else {\r\n  describe('API End Points', () => {\r\n    // test home route\r\n    describe('Home', () => {\r\n      it('should return welcome message', () => {\r\n        return chai.request(app)\r\n          .get('/')\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('Object');\r\n            expect(res.body).to.eql({ message: 'welcome to the maintenance trackers' });\r\n          });\r\n      });\r\n    });\r\n\r\n    describe('Empty request model', () => {\r\n      it('should return an empty array', () => {\r\n        return chai.request(app)\r\n          .get('/api/v1/users/requests')\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('array');\r\n            expect(res.body).to.have.length(0);\r\n          });\r\n      });\r\n      it('should return not found for the request id', () => {\r\n        return chai.request(app)\r\n          .get('/api/v1/users/requests/1')\r\n          .then((res) => {\r\n            expect(res).to.have.status(404);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'request not found' });\r\n          });\r\n      });\r\n    });\r\n\r\n    // test for post ../users/requests\r\n    describe('Create requests', () => {\r\n      it('should create a new request', () => {\r\n        return chai.request(app)\r\n          .post('/api/v1/users/requests')\r\n          .send(request1)\r\n          .then((res) => {\r\n            Object.assign(createdRequest1, res.body.request);\r\n            expect(res).to.have.status(201);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.request.id).to.equal(1);\r\n            expect(res.body.request).to.have.any.keys(['description', 'category', 'userId']);\r\n          });\r\n      });\r\n\r\n      it('should create a new request', () => {\r\n        return chai.request(app)\r\n          .post('/api/v1/users/requests')\r\n          .send(request2)\r\n          .then((res) => {\r\n            Object.assign(createdRequest2, res.body.request);\r\n            expect(res).to.have.status(201);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.request.id).to.equal(2);\r\n            expect(res.body.request).to.have.any.keys('description');\r\n            expect(res.body.request).to.have.any.keys('category');\r\n            expect(res.body.request).to.have.any.keys('userId');\r\n          });\r\n      });\r\n      it('should not create request for users that does not exist', () => {\r\n        return chai.request(app)\r\n          .post('/api/v1/users/requests')\r\n          .send(request3)\r\n          .then((res) => {\r\n            expect(res).to.have.status(404);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      });\r\n\r\n      it('should not create request if a required field is not present', () => {\r\n        return chai.request(app)\r\n          .post('/api/v1/users/requests')\r\n          .send(request4)\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n    });\r\n\r\n    // test for get ../users/requests/:requestId\r\n    describe('get one request', () => {\r\n      it('should return a request with the givn id', () => {\r\n        const { id } = createdRequest1;\r\n        return chai.request(app)\r\n          .get(`/api/v1/users/requests/${id}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.have.any.keys('userId');\r\n          });\r\n      });\r\n\r\n      it('should return not found for the request that does not exist', () => {\r\n        return chai.request(app)\r\n          .get('/api/v1/users/requests/5')\r\n          .then((res) => {\r\n            expect(res).to.have.status(404);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'request not found' });\r\n          });\r\n      });\r\n\r\n      it('should return 400 error for bad request', () => {\r\n        return chai.request(app)\r\n          .get('/api/v1/users/requests/0')\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n    });\r\n\r\n    // test for get ../users/requests\r\n    describe('get one request', () => {\r\n      it('should return all request', () => {\r\n        return chai.request(app)\r\n          .get('/api/v1/users/requests')\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('array');\r\n            expect(res.body).to.have.length.of.at.least(2);\r\n            expect(res.body).to.deep.include.members([createdRequest1, createdRequest2]);\r\n          });\r\n      });\r\n    });\r\n\r\n    // test for put ../users/requests/:requestId\r\n    describe('get one request', () => {\r\n      it('should update a request', () => {\r\n        const { id } = createdRequest1;\r\n        return chai.request(app)\r\n          .put(`/api/v1/users/requests/${id}`)\r\n          .send({\r\n            status: 'approved',\r\n          })\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.status).to.equal('approved');\r\n          });\r\n      });\r\n\r\n      it('should return not found request that does not exist', () => {\r\n        return chai.request(app)\r\n          .put('/api/v1/users/requests/4')\r\n          .send({\r\n            status: 'approved',\r\n          })\r\n          .then((res) => {\r\n            expect(res).to.have.status(404);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      });\r\n\r\n      it('should return bad request if requestId is not specified params', () => {\r\n        return chai.request(app)\r\n          .put('/api/v1/users/requests/0')\r\n          .send({\r\n            status: 'approved',\r\n          })\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n    });\r\n  });\r\n}\r\n"]}