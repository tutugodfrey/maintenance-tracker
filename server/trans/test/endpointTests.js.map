{"version":3,"sources":["../../src/test/endpointTests.js"],"names":["server","Server","app","expressServer","expect","chai","use","chaiHttp","request1","category","description","urgency","department","userId","status","request2","request3","request4","message1","title","message","adminId","senderId","message2","message3","message4","message5","createdRequest1","createdRequest2","createdMessage1","createdMessage2","process","env","NODE_ENV","console","log","describe","it","request","get","then","res","to","have","body","be","an","eql","post","send","Object","assign","id","equal","any","keys","length","of","at","least","deep","include","members","delete","put"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,SAAS,IAAIC,aAAJ,EAAf;AACA,IAAMC,MAAMF,OAAOG,aAAP,EAAZ;IACQC,M,GAAWC,c,CAAXD,M;;AACRC,eAAKC,GAAL,CAASC,kBAAT;;AAEA,IAAMC,WAAW;AACfC,YAAU,YADK;AAEfC,eAAa,eAFE;AAGfC,WAAS,QAHM;AAIfC,cAAY,QAJG;AAKfC,UAAQ,CALO;AAMfC,UAAQ;AANO,CAAjB;AAQA,IAAMC,WAAW;AACfN,YAAU,YADK;AAEfC,eAAa,eAFE;AAGfC,WAAS,QAHM;AAIfC,cAAY,QAJG;AAKfC,UAAQ,CALO;AAMfC,UAAQ;AANO,CAAjB;;AASA,IAAME,WAAW;AACfP,YAAU,YADK;AAEfC,eAAa,eAFE;AAGfC,WAAS,QAHM;AAIfC,cAAY,QAJG;AAKfC,UAAQ,CALO;AAMfC,UAAQ;AANO,CAAjB;;AASA,IAAMG,WAAW;AACfR,YAAU,YADK;AAEfC,eAAa,EAFE;AAGfC,WAAS,QAHM;AAIfC,cAAY,QAJG;AAKfC,UAAQ,CALO;AAMfC,UAAQ;AANO,CAAjB;;AASA,IAAMI,WAAW;AACfC,SAAO,oBADQ;AAEfC,WAAS,oDAFM;AAGfP,UAAQ,CAHO;AAIfQ,WAAS,CAJM;AAKfC,YAAU;AALK,CAAjB;;AAQA,IAAMC,WAAW;AACfJ,SAAO,WADQ;AAEfC,WAAS,wCAFM;AAGfP,UAAQ,CAHO;AAIfQ,WAAS,CAJM;AAKfC,YAAU;AALK,CAAjB;;AAQA,IAAME,WAAW;AACfL,SAAO,WADQ;AAEfC,WAAS,wCAFM;AAGfP,UAAQ,CAHO;AAIfQ,WAAS,CAJM;AAKfC,YAAU;AALK,CAAjB;;AAQA,IAAMG,WAAW;AACfN,SAAO,WADQ;AAEfC,WAAS,wCAFM;AAGfP,UAAQ,CAHO;AAIfQ,WAAS,CAJM;AAKfC,YAAU;AALK,CAAjB;;AAQA,IAAMI,WAAW;AACfP,SAAO,oBADQ;AAEfC,WAAS,GAFM;AAGfP,UAAQ,CAHO;AAIfQ,WAAS,CAJM;AAKfC,YAAU;AALK,CAAjB;;AAQA,IAAMK,kBAAkB,EAAxB;AACA,IAAMC,kBAAkB,EAAxB;AACA,IAAMC,kBAAkB,EAAxB;AACA,IAAMC,kBAAkB,EAAxB;;AAEA;AACA,IAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACnC;AACAC,UAAQC,GAAR,kDAA0DJ,QAAQC,GAAR,CAAYC,QAAtE;AACD,CAHD,MAGO;AACLG,WAAS,gBAAT,EAA2B,YAAM;AAC/B;AACAA,aAAS,MAAT,EAAiB,YAAM;AACrBC,SAAG,+BAAH,EAAoC,YAAM;AACxC,eAAOhC,eAAKiC,OAAL,CAAapC,GAAb,EACJqC,GADI,CACA,GADA,EAEJC,IAFI,CAEC,UAACC,GAAD,EAAS;AACbrC,iBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACA1C,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBK,GAApB,CAAwB,EAAE3B,SAAS,qCAAX,EAAxB;AACD,SANI,CAAP;AAOD,OARD;AASD,KAVD;;AAYAgB,aAAS,qBAAT,EAAgC,YAAM;AACpCC,SAAG,8BAAH,EAAmC,YAAM;AACvC,eAAOhC,eAAKiC,OAAL,CAAapC,GAAb,EACJqC,GADI,CACA,wBADA,EAEJC,IAFI,CAEC,UAACC,GAAD,EAAS;AACbrC,iBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACD,SAJI,CAAP;AAKD,OAND;AAOAuB,SAAG,4CAAH,EAAiD,YAAM;AACrD,eAAOhC,eAAKiC,OAAL,CAAapC,GAAb,EACJqC,GADI,CACA,0BADA,EAEJC,IAFI,CAEC,UAACC,GAAD,EAAS;AACbrC,iBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACA1C,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBK,GAApB,CAAwB,EAAE3B,SAAS,wBAAX,EAAxB;AACD,SANI,CAAP;AAOD,OARD;AASD,KAjBD;;AAmBA;AACAgB,aAAS,iBAAT,EAA4B,YAAM;AAChCC,SAAG,6BAAH,EAAkC,YAAM;AACtC,eAAOhC,eAAKiC,OAAL,CAAapC,GAAb,EACJ8C,IADI,CACC,wBADD,EAEJC,IAFI,CAECzC,QAFD,EAGJgC,IAHI,CAGC,UAACC,GAAD,EAAS;AACbS,iBAAOC,MAAP,CAAcxB,eAAd,EAA+Bc,IAAIG,IAAJ,CAASN,OAAxC;AACAlC,iBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACA1C,iBAAOqC,IAAIG,IAAJ,CAASN,OAAT,CAAiBc,EAAxB,EAA4BV,EAA5B,CAA+BW,KAA/B,CAAqC,CAArC;AACAjD,iBAAOqC,IAAIG,IAAJ,CAASN,OAAhB,EAAyBI,EAAzB,CAA4BC,IAA5B,CAAiCW,GAAjC,CAAqCC,IAArC,CAA0C,CAAC,aAAD,EAAgB,UAAhB,EAA4B,QAA5B,CAA1C;AACD,SATI,CAAP;AAUD,OAXD;;AAaAlB,SAAG,6BAAH,EAAkC,YAAM;AACtC,eAAOhC,eAAKiC,OAAL,CAAapC,GAAb,EACJ8C,IADI,CACC,wBADD,EAEJC,IAFI,CAEClC,QAFD,EAGJyB,IAHI,CAGC,UAACC,GAAD,EAAS;AACbS,iBAAOC,MAAP,CAAcvB,eAAd,EAA+Ba,IAAIG,IAAJ,CAASN,OAAxC;AACAlC,iBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACA1C,iBAAOqC,IAAIG,IAAJ,CAASN,OAAT,CAAiBc,EAAxB,EAA4BV,EAA5B,CAA+BW,KAA/B,CAAqC,CAArC;AACAjD,iBAAOqC,IAAIG,IAAJ,CAASN,OAAhB,EAAyBI,EAAzB,CAA4BC,IAA5B,CAAiCW,GAAjC,CAAqCC,IAArC,CAA0C,aAA1C;AACAnD,iBAAOqC,IAAIG,IAAJ,CAASN,OAAhB,EAAyBI,EAAzB,CAA4BC,IAA5B,CAAiCW,GAAjC,CAAqCC,IAArC,CAA0C,UAA1C;AACAnD,iBAAOqC,IAAIG,IAAJ,CAASN,OAAhB,EAAyBI,EAAzB,CAA4BC,IAA5B,CAAiCW,GAAjC,CAAqCC,IAArC,CAA0C,QAA1C;AACD,SAXI,CAAP;AAYD,OAbD;AAcAlB,SAAG,yDAAH,EAA8D,YAAM;AAClE,eAAOhC,eAAKiC,OAAL,CAAapC,GAAb,EACJ8C,IADI,CACC,wBADD,EAEJC,IAFI,CAECjC,QAFD,EAGJwB,IAHI,CAGC,UAACC,GAAD,EAAS;AACbrC,iBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACD,SANI,CAAP;AAOD,OARD;;AAUAT,SAAG,8DAAH,EAAmE,YAAM;AACvE,eAAOhC,eAAKiC,OAAL,CAAapC,GAAb,EACJ8C,IADI,CACC,wBADD,EAEJC,IAFI,CAEChC,QAFD,EAGJuB,IAHI,CAGC,UAACC,GAAD,EAAS;AACbrC,iBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACA1C,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBK,GAApB,CAAwB,EAAE3B,SAAS,wBAAX,EAAxB;AACD,SAPI,CAAP;AAQD,OATD;AAUD,KAhDD;;AAkDA;AACAgB,aAAS,iBAAT,EAA4B,YAAM;AAChCC,SAAG,gEAAH,EAAqE,YAAM;AAAA,YACjEe,EADiE,GAClDzB,eADkD,CACjEyB,EADiE;AAAA,YAC7DvC,MAD6D,GAClDc,eADkD,CAC7Dd,MAD6D;;AAEzE,eAAOR,eAAKiC,OAAL,CAAapC,GAAb,EACJqC,GADI,6BAC0Ba,EAD1B,gBACuCvC,MADvC,EAEJ2B,IAFI,CAEC,UAACC,GAAD,EAAS;AACbrC,iBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACA1C,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBC,IAApB,CAAyBW,GAAzB,CAA6BC,IAA7B,CAAkC,QAAlC;AACD,SANI,CAAP;AAOD,OATD;;AAWAlB,SAAG,gFAAH,EAAqF,YAAM;AAAA,YACjFxB,MADiF,GACtEc,eADsE,CACjFd,MADiF;;AAEzF,eAAOR,eAAKiC,OAAL,CAAapC,GAAb,EACJqC,GADI,sCACmC1B,MADnC,EAEJ2B,IAFI,CAEC,UAACC,GAAD,EAAS;AACbrC,iBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACA1C,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBK,GAApB,CAAwB,EAAE3B,SAAS,mBAAX,EAAxB;AACD,SANI,CAAP;AAOD,OATD;;AAWAiB,SAAG,mEAAH,EAAwE,YAAM;AAAA,YACpEe,EADoE,GAC7DzB,eAD6D,CACpEyB,EADoE;;AAE5E,eAAO/C,eAAKiC,OAAL,CAAapC,GAAb,EACJqC,GADI,6BAC0Ba,EAD1B,gBAEJZ,IAFI,CAEC,UAACC,GAAD,EAAS;AACbrC,iBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACA1C,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBK,GAApB,CAAwB,EAAE3B,SAAS,mBAAX,EAAxB;AACD,SANI,CAAP;AAOD,OATD;;AAWAiB,SAAG,qEAAH,EAA0E,YAAM;AAAA,YACtEe,EADsE,GAC/DzB,eAD+D,CACtEyB,EADsE;;AAE9E,eAAO/C,eAAKiC,OAAL,CAAapC,GAAb,EACJqC,GADI,6BAC0Ba,EAD1B,gBAEJZ,IAFI,CAEC,UAACC,GAAD,EAAS;AACbrC,iBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACA1C,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBK,GAApB,CAAwB,EAAE3B,SAAS,wBAAX,EAAxB;AACD,SANI,CAAP;AAOD,OATD;;AAWAiB,SAAG,qEAAH,EAA0E,YAAM;AAAA,YACtExB,MADsE,GAC3Dc,eAD2D,CACtEd,MADsE;;AAE9E,eAAOR,eAAKiC,OAAL,CAAapC,GAAb,EACJqC,GADI,sCACmC1B,MADnC,EAEJ2B,IAFI,CAEC,UAACC,GAAD,EAAS;AACbrC,iBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACA1C,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBK,GAApB,CAAwB,EAAE3B,SAAS,wBAAX,EAAxB;AACD,SANI,CAAP;AAOD,OATD;;AAWAiB,SAAG,oEAAH,EAAyE,YAAM;AAC7E,eAAOhC,eAAKiC,OAAL,CAAapC,GAAb,EACJqC,GADI,CACA,mCADA,EAEJC,IAFI,CAEC,UAACC,GAAD,EAAS;AACbrC,iBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACA1C,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBK,GAApB,CAAwB,EAAE3B,SAAS,wBAAX,EAAxB;AACD,SANI,CAAP;AAOD,OARD;AASD,KAjED;;AAmEA;AACAgB,aAAS,iBAAT,EAA4B,YAAM;AAChCC,SAAG,8CAAH,EAAmD,YAAM;AAAA,YAC/CxB,MAD+C,GACpCc,eADoC,CAC/Cd,MAD+C;;AAEvD,eAAOR,eAAKiC,OAAL,CAAapC,GAAb,EACJqC,GADI,oCACiC1B,MADjC,EAEJ2B,IAFI,CAEC,UAACC,GAAD,EAAS;AACbrC,iBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,OAA1B;AACA1C,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBC,IAApB,CAAyBa,MAAzB,CAAgCC,EAAhC,CAAmCC,EAAnC,CAAsCC,KAAtC,CAA4C,CAA5C;AACAvD,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBkB,IAApB,CAAyBC,OAAzB,CAAiCC,OAAjC,CAAyC,CAACnC,eAAD,CAAzC;AACD,SAPI,CAAP;AAQD,OAVD;;AAYAU,SAAG,6DAAH,EAAkE,YAAM;AACtE,eAAOhC,eAAKiC,OAAL,CAAapC,GAAb,EACJqC,GADI,CACA,iCADA,EAEJC,IAFI,CAEC,UAACC,GAAD,EAAS;AACbrC,iBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,OAA1B;AACA1C,iBAAOqC,IAAIG,IAAJ,CAASY,MAAhB,EAAwBd,EAAxB,CAA2BW,KAA3B,CAAiC,CAAjC;AACD,SANI,CAAP;AAOD,OARD;;AAUAhB,SAAG,8DAAH,EAAmE,YAAM;AACvE,eAAOhC,eAAKiC,OAAL,CAAapC,GAAb,EACJqC,GADI,CACA,wBADA,EAEJC,IAFI,CAEC,UAACC,GAAD,EAAS;AACbrC,iBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACA1C,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBK,GAApB,CAAwB,EAAE3B,SAAS,wBAAX,EAAxB;AACD,SANI,CAAP;AAOD,OARD;AASD,KAhCD;;AAkCA;AACAgB,aAAS,gBAAT,EAA2B,YAAM;AAC/BC,SAAG,yBAAH,EAA8B,YAAM;AAAA,YAC1Be,EAD0B,GACXxB,eADW,CAC1BwB,EAD0B;AAAA,YACtBvC,MADsB,GACXe,eADW,CACtBf,MADsB;;AAElC,eAAOR,eAAKiC,OAAL,CAAapC,GAAb,EACJ6D,MADI,6BAC6BX,EAD7B,gBAC0CvC,MAD1C,EAEJ2B,IAFI,CAEC,UAACC,GAAD,EAAS;AACbrC,iBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACA1C,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBK,GAApB,CAAwB,EAAE3B,SAAS,0BAAX,EAAxB;AACD,SANI,CAAP;AAOD,OATD;;AAWAiB,SAAG,qDAAH,EAA0D,YAAM;AAAA,YACtDxB,MADsD,GAC3Ce,eAD2C,CACtDf,MADsD;;AAE9D,eAAOR,eAAKiC,OAAL,CAAapC,GAAb,EACJ6D,MADI,sCACsClD,MADtC,EAEJ2B,IAFI,CAEC,UAACC,GAAD,EAAS;AACbrC,iBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACA1C,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBK,GAApB,CAAwB,EAAE3B,SAAS,qCAAX,EAAxB;AACD,SANI,CAAP;AAOD,OATD;;AAWAiB,SAAG,yDAAH,EAA8D,YAAM;AAAA,YAC1DxB,MAD0D,GAC/Ce,eAD+C,CAC1Df,MAD0D;AAAA,YAE1DuC,EAF0D,GAEnDzB,eAFmD,CAE1DyB,EAF0D;;AAGlE,eAAO/C,eAAKiC,OAAL,CAAapC,GAAb,EACJ6D,MADI,6BAC6BX,EAD7B,gBAC0CvC,MAD1C,EAEJ2B,IAFI,CAEC,UAACC,GAAD,EAAS;AACbrC,iBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACA1C,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBK,GAApB,CAAwB,EAAE3B,SAAS,qCAAX,EAAxB;AACD,SANI,CAAP;AAOD,OAVD;;AAYAiB,SAAG,gEAAH,EAAqE,YAAM;AAAA,YACjExB,MADiE,GACtDe,eADsD,CACjEf,MADiE;;AAEzE,eAAOR,eAAKiC,OAAL,CAAapC,GAAb,EACJ6D,MADI,sCACsClD,MADtC,EAEJ2B,IAFI,CAEC,UAACC,GAAD,EAAS;AACbrC,iBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACA1C,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBK,GAApB,CAAwB,EAAE3B,SAAS,wBAAX,EAAxB;AACD,SANI,CAAP;AAOD,OATD;;AAWAiB,SAAG,8DAAH,EAAmE,YAAM;AACvE,eAAOhC,eAAKiC,OAAL,CAAapC,GAAb,EACJ6D,MADI,CACG,mCADH,EAEJvB,IAFI,CAEC,UAACC,GAAD,EAAS;AACbrC,iBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACA1C,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBK,GAApB,CAAwB,EAAE3B,SAAS,wBAAX,EAAxB;AACD,SANI,CAAP;AAOD,OARD;;AAUAiB,SAAG,sFAAH,EAA2F,YAAM;AAAA,YACvFe,EADuF,GAChFxB,eADgF,CACvFwB,EADuF;;AAE/F,eAAO/C,eAAKiC,OAAL,CAAapC,GAAb,EACJ6D,MADI,6BAC6BX,EAD7B,EAEJZ,IAFI,CAEC,UAACC,GAAD,EAAS;AACbrC,iBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACA1C,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBK,GAApB,CAAwB,EAAE3B,SAAS,wBAAX,EAAxB;AACD,SANI,CAAP;AAOD,OATD;AAUD,KAlED;;AAoEA;AACAgB,aAAS,gBAAT,EAA2B,YAAM;AAC/BA,eAAS,OAAT,EAAkB,YAAM;AACtBC,WAAG,+EAAH,EAAoF,YAAM;AAAA,cAChFe,EADgF,GACjEzB,eADiE,CAChFyB,EADgF;AAAA,cAC5EvC,MAD4E,GACjEc,eADiE,CAC5Ed,MAD4E;;AAExF,iBAAOR,eAAKiC,OAAL,CAAapC,GAAb,EACJ8D,GADI,6BAC0BZ,EAD1B,gBACuCvC,MADvC,EAEJoC,IAFI,CAEC;AACJvC,yBAAa;AADT,WAFD,EAKJ8B,IALI,CAKC,UAACC,GAAD,EAAS;AACbrC,mBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,mBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACA1C,mBAAOqC,IAAIG,IAAJ,CAASlC,WAAhB,EAA6BgC,EAA7B,CAAgCW,KAAhC,CAAsC,6CAAtC;AACD,WATI,CAAP;AAUD,SAZD;;AAcAhB,WAAG,4DAAH,EAAiE,YAAM;AAAA,cAC7De,EAD6D,GAC9CzB,eAD8C,CAC7DyB,EAD6D;AAAA,cACzDvC,MADyD,GAC9Cc,eAD8C,CACzDd,MADyD;;AAErE,iBAAOR,eAAKiC,OAAL,CAAapC,GAAb,EACJ8D,GADI,6BAC0BZ,EAD1B,gBACuCvC,MADvC,gBAEJoC,IAFI,CAEC;AACJnC,oBAAQ;AADJ,WAFD,EAKJ0B,IALI,CAKC,UAACC,GAAD,EAAS;AACbrC,mBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,mBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACA1C,mBAAOqC,IAAIG,IAAJ,CAAS9B,MAAhB,EAAwB4B,EAAxB,CAA2BW,KAA3B,CAAiC,SAAjC;AACD,WATI,CAAP;AAUD,SAZD;;AAcAhB,WAAG,2DAAH,EAAgE,YAAM;AAAA,cAC5DxB,MAD4D,GACjDc,eADiD,CAC5Dd,MAD4D;;AAEpE,iBAAOR,eAAKiC,OAAL,CAAapC,GAAb,EACJ8D,GADI,sCACmCnD,MADnC,EAEJoC,IAFI,CAEC;AACJvC,yBAAa;AADT,WAFD,EAKJ8B,IALI,CAKC,UAACC,GAAD,EAAS;AACbrC,mBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,mBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACD,WARI,CAAP;AASD,SAXD;;AAaAT,WAAG,+DAAH,EAAoE,YAAM;AAAA,cAChEe,EADgE,GACzDzB,eADyD,CAChEyB,EADgE;;AAExE,iBAAO/C,eAAKiC,OAAL,CAAapC,GAAb,EACJ8D,GADI,6BAC0BZ,EAD1B,iBAEJH,IAFI,CAEC;AACJvC,yBAAa;AADT,WAFD,EAKJ8B,IALI,CAKC,UAACC,GAAD,EAAS;AACbrC,mBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,mBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACD,WARI,CAAP;AASD,SAXD;AAYD,OAtDD;;AAwDAV,eAAS,OAAT,EAAkB,YAAM;AACtBC,WAAG,wDAAH,EAA6D,YAAM;AAAA,cACzDe,EADyD,GAC1CzB,eAD0C,CACzDyB,EADyD;AAAA,cACrDvC,MADqD,GAC1Cc,eAD0C,CACrDd,MADqD;;AAEjE,iBAAOR,eAAKiC,OAAL,CAAapC,GAAb,EACJ8D,GADI,6BAC0BZ,EAD1B,gBACuCvC,MADvC,oBAEJoC,IAFI,CAEC;AACJnC,oBAAQ;AADJ,WAFD,EAKJ0B,IALI,CAKC,UAACC,GAAD,EAAS;AACbrC,mBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,mBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACA1C,mBAAOqC,IAAIG,IAAJ,CAAS9B,MAAhB,EAAwB4B,EAAxB,CAA2BW,KAA3B,CAAiC,UAAjC;AACD,WATI,CAAP;AAUD,SAZD;;AAcAhB,WAAG,mFAAH,EAAwF,YAAM;AAAA,cACpFe,EADoF,GACrEzB,eADqE,CACpFyB,EADoF;AAAA,cAChFvC,MADgF,GACrEc,eADqE,CAChFd,MADgF;;AAE5F,iBAAOR,eAAKiC,OAAL,CAAapC,GAAb,EACJ8D,GADI,6BAC0BZ,EAD1B,gBACuCvC,MADvC,oBAEJoC,IAFI,CAEC;AACJvC,yBAAa;AADT,WAFD,EAKJ8B,IALI,CAKC,UAACC,GAAD,EAAS;AACbrC,mBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,mBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACA1C,mBAAOqC,IAAIG,IAAJ,CAASlC,WAAhB,EAA6BgC,EAA7B,CAAgCW,KAAhC,CAAsC,6CAAtC;AACD,WATI,CAAP;AAUD,SAZD;;AAcAhB,WAAG,kEAAH,EAAuE,YAAM;AAAA,cACnExB,MADmE,GACxDc,eADwD,CACnEd,MADmE;;AAE3E,iBAAOR,eAAKiC,OAAL,CAAapC,GAAb,EACJ8D,GADI,sCACmCnD,MADnC,oBAEJoC,IAFI,CAEC;AACJnC,oBAAQ;AADJ,WAFD,EAKJ0B,IALI,CAKC,UAACC,GAAD,EAAS;AACbrC,mBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,mBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACD,WARI,CAAP;AASD,SAXD;;AAaAT,WAAG,sEAAH,EAA2E,YAAM;AAAA,cACvEe,EADuE,GAChEzB,eADgE,CACvEyB,EADuE;;AAE/E,iBAAO/C,eAAKiC,OAAL,CAAapC,GAAb,EACJ8D,GADI,6BAC0BZ,EAD1B,6BAEJH,IAFI,CAEC;AACJnC,oBAAQ;AADJ,WAFD,EAKJ0B,IALI,CAKC,UAACC,GAAD,EAAS;AACbrC,mBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,mBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACD,WARI,CAAP;AASD,SAXD;AAYD,OAtDD;;AAwDAT,SAAG,6DAAH,EAAkE,YAAM;AACtE,eAAOhC,eAAKiC,OAAL,CAAapC,GAAb,EACJ8D,GADI,CACA,0BADA,EAEJf,IAFI,CAEC;AACJnC,kBAAQ;AADJ,SAFD,EAKJ0B,IALI,CAKC,UAACC,GAAD,EAAS;AACbrC,iBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACD,SARI,CAAP;AASD,OAVD;;AAYAT,SAAG,gEAAH,EAAqE,YAAM;AACzE,eAAOhC,eAAKiC,OAAL,CAAapC,GAAb,EACJ8D,GADI,CACA,0CADA,EAEJf,IAFI,CAEC;AACJnC,kBAAQ;AADJ,SAFD,EAKJ0B,IALI,CAKC,UAACC,GAAD,EAAS;AACbrC,iBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACA1C,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBK,GAApB,CAAwB,EAAE3B,SAAS,wBAAX,EAAxB;AACD,SATI,CAAP;AAUD,OAXD;;AAaAiB,SAAG,4DAAH,EAAiE,YAAM;AAAA,YAC7De,EAD6D,GACtDzB,eADsD,CAC7DyB,EAD6D;;AAErE,eAAO/C,eAAKiC,OAAL,CAAapC,GAAb,EACJ8D,GADI,6BAC0BZ,EAD1B,eAEJH,IAFI,CAEC;AACJnC,kBAAQ;AADJ,SAFD,EAKJ0B,IALI,CAKC,UAACC,GAAD,EAAS;AACbrC,iBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACA1C,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBK,GAApB,CAAwB,EAAE3B,SAAS,wBAAX,EAAxB;AACD,SATI,CAAP;AAUD,OAZD;;AAcAiB,SAAG,yDAAH,EAA8D,YAAM;AAClE,eAAOhC,eAAKiC,OAAL,CAAapC,GAAb,EACJ8D,GADI,CACA,mCADA,EAEJf,IAFI,CAEC;AACJnC,kBAAQ;AADJ,SAFD,EAKJ0B,IALI,CAKC,UAACC,GAAD,EAAS;AACbrC,iBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,iBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACD,SARI,CAAP;AASD,OAVD;AAWD,KAnKD;;AAqKA;AACAV,aAAS,UAAT,EAAqB,YAAM;AACzBA,eAAS,uBAAT,EAAkC,YAAM;AACtCC,WAAG,mDAAH,EAAwD,YAAM;AAC5D,iBAAOhC,eAAKiC,OAAL,CAAapC,GAAb,EACJ8C,IADI,CACC,kBADD,EAEJC,IAFI,CAEC/B,QAFD,EAGJsB,IAHI,CAGC,UAACC,GAAD,EAAS;AACbS,mBAAOC,MAAP,CAActB,eAAd,EAA+BY,IAAIG,IAAnC;AACAxC,mBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,mBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACD,WAPI,CAAP;AAQD,SATD;;AAWAT,WAAG,yCAAH,EAA8C,YAAM;AAClD,iBAAOhC,eAAKiC,OAAL,CAAapC,GAAb,EACJ8C,IADI,CACC,kBADD,EAEJC,IAFI,CAEC1B,QAFD,EAGJiB,IAHI,CAGC,UAACC,GAAD,EAAS;AACbS,mBAAOC,MAAP,CAAcrB,eAAd,EAA+BW,IAAIG,IAAnC;AACAxC,mBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,mBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACD,WAPI,CAAP;AAQD,SATD;;AAWAT,WAAG,+DAAH,EAAoE,YAAM;AACxE,iBAAOhC,eAAKiC,OAAL,CAAapC,GAAb,EACJ8C,IADI,CACC,kBADD,EAEJC,IAFI,CAECzB,QAFD,EAGJgB,IAHI,CAGC,UAACC,GAAD,EAAS;AACbrC,mBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,mBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACD,WANI,CAAP;AAOD,SARD;;AAUAT,WAAG,8DAAH,EAAmE,YAAM;AACvE,iBAAOhC,eAAKiC,OAAL,CAAapC,GAAb,EACJ8C,IADI,CACC,kBADD,EAEJC,IAFI,CAECxB,QAFD,EAGJe,IAHI,CAGC,UAACC,GAAD,EAAS;AACbrC,mBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,mBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACD,WANI,CAAP;AAOD,SARD;;AAUAT,WAAG,qDAAH,EAA0D,YAAM;AAC9D,iBAAOhC,eAAKiC,OAAL,CAAapC,GAAb,EACJ8C,IADI,CACC,kBADD,EAEJC,IAFI,CAECvB,QAFD,EAGJc,IAHI,CAGC,UAACC,GAAD,EAAS;AACbrC,mBAAOqC,GAAP,EAAYC,EAAZ,CAAeC,IAAf,CAAoB7B,MAApB,CAA2B,GAA3B;AACAV,mBAAOqC,IAAIG,IAAX,EAAiBF,EAAjB,CAAoBG,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACD,WANI,CAAP;AAOD,SARD;AASD,OApDD;AAqDD,KAtDD;AAuDD,GA9dD;AA+dD","file":"endpointTests.js","sourcesContent":["import chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport Server from './../app';\r\n\r\nconst server = new Server();\r\nconst app = server.expressServer();\r\nconst { expect } = chai;\r\nchai.use(chaiHttp);\r\n\r\nconst request1 = {\r\n  category: 'electrical',\r\n  description: 'Socket burned',\r\n  urgency: 'urgent',\r\n  department: 'baking',\r\n  userId: 2,\r\n  status: 'pending',\r\n};\r\nconst request2 = {\r\n  category: 'electrical',\r\n  description: 'Socket burned',\r\n  urgency: 'urgent',\r\n  department: 'baking',\r\n  userId: 3,\r\n  status: 'pending',\r\n};\r\n\r\nconst request3 = {\r\n  category: 'electrical',\r\n  description: 'Socket burned',\r\n  urgency: 'urgent',\r\n  department: 'baking',\r\n  userId: 4,\r\n  status: 'pending',\r\n};\r\n\r\nconst request4 = {\r\n  category: 'electrical',\r\n  description: '',\r\n  urgency: 'urgent',\r\n  department: 'baking',\r\n  userId: 2,\r\n  status: 'pending',\r\n};\r\n\r\nconst message1 = {\r\n  title: 'unresolved request',\r\n  message: 'request to replace wall socket was not attended to',\r\n  userId: 2,\r\n  adminId: 1,\r\n  senderId: 2,\r\n};\r\n\r\nconst message2 = {\r\n  title: 'Apologise',\r\n  message: 'Please we will attend to it right away',\r\n  userId: 2,\r\n  adminId: 1,\r\n  senderId: 1,\r\n};\r\n\r\nconst message3 = {\r\n  title: 'Apologise',\r\n  message: 'Please we will attend to it right away',\r\n  userId: 2,\r\n  adminId: 1,\r\n  senderId: 7,\r\n};\r\n\r\nconst message4 = {\r\n  title: 'Apologise',\r\n  message: 'Please we will attend to it right away',\r\n  userId: 0,\r\n  adminId: 0,\r\n  senderId: 7,\r\n};\r\n\r\nconst message5 = {\r\n  title: 'unresolved request',\r\n  message: ' ',\r\n  userId: 2,\r\n  adminId: 1,\r\n  senderId: 2,\r\n};\r\n\r\nconst createdRequest1 = {};\r\nconst createdRequest2 = {};\r\nconst createdMessage1 = {};\r\nconst createdMessage2 = {};\r\n\r\n// enforce test to run in test env\r\nif (process.env.NODE_ENV !== 'test') {\r\n  /* eslint-disable no-console */\r\n  console.log(`can't run test in non test env. you are in ${process.env.NODE_ENV} environment`);\r\n} else {\r\n  describe('API End Points', () => {\r\n    // test home route\r\n    describe('Home', () => {\r\n      it('should return welcome message', () => {\r\n        return chai.request(app)\r\n          .get('/')\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('Object');\r\n            expect(res.body).to.eql({ message: 'welcome to the maintenance trackers' });\r\n          });\r\n      });\r\n    });\r\n\r\n    describe('Empty request model', () => {\r\n      it('should return an empty array', () => {\r\n        return chai.request(app)\r\n          .get('/api/v1/users/requests')\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n          });\r\n      });\r\n      it('should return not found for the request id', () => {\r\n        return chai.request(app)\r\n          .get('/api/v1/users/requests/1')\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n    });\r\n\r\n    // test for post ../users/requests\r\n    describe('Create requests', () => {\r\n      it('should create a new request', () => {\r\n        return chai.request(app)\r\n          .post('/api/v1/users/requests')\r\n          .send(request1)\r\n          .then((res) => {\r\n            Object.assign(createdRequest1, res.body.request);\r\n            expect(res).to.have.status(201);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.request.id).to.equal(1);\r\n            expect(res.body.request).to.have.any.keys(['description', 'category', 'userId']);\r\n          });\r\n      });\r\n\r\n      it('should create a new request', () => {\r\n        return chai.request(app)\r\n          .post('/api/v1/users/requests')\r\n          .send(request2)\r\n          .then((res) => {\r\n            Object.assign(createdRequest2, res.body.request);\r\n            expect(res).to.have.status(201);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.request.id).to.equal(2);\r\n            expect(res.body.request).to.have.any.keys('description');\r\n            expect(res.body.request).to.have.any.keys('category');\r\n            expect(res.body.request).to.have.any.keys('userId');\r\n          });\r\n      });\r\n      it('should not create request for users that does not exist', () => {\r\n        return chai.request(app)\r\n          .post('/api/v1/users/requests')\r\n          .send(request3)\r\n          .then((res) => {\r\n            expect(res).to.have.status(404);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      });\r\n\r\n      it('should not create request if a required field is not present', () => {\r\n        return chai.request(app)\r\n          .post('/api/v1/users/requests')\r\n          .send(request4)\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n    });\r\n\r\n    // test for get ../users/requests/:requestId\r\n    describe('get one request', () => {\r\n      it('should return a request with the given id for a logged in user', () => {\r\n        const { id, userId } = createdRequest1;\r\n        return chai.request(app)\r\n          .get(`/api/v1/users/requests/${id}?userId=${userId}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.have.any.keys('userId');\r\n          });\r\n      });\r\n\r\n      it('should return not found for requestId that does not exist for a logged in user', () => {\r\n        const { userId } = createdRequest1;\r\n        return chai.request(app)\r\n          .get(`/api/v1/users/requests/5?userId=${userId}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(404);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'request not found' });\r\n          });\r\n      });\r\n\r\n      it('should return not found for the requestId with no matching userId', () => {\r\n        const { id } = createdRequest1;\r\n        return chai.request(app)\r\n          .get(`/api/v1/users/requests/${id}?userId=6`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(404);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'request not found' });\r\n          });\r\n      });\r\n\r\n      it('should return bad request if either userId nor requestId is invalid', () => {\r\n        const { id } = createdRequest1;\r\n        return chai.request(app)\r\n          .get(`/api/v1/users/requests/${id}?userId=0`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n\r\n      it('should return bad request if either userId nor requestId is invalid', () => {\r\n        const { userId } = createdRequest1;\r\n        return chai.request(app)\r\n          .get(`/api/v1/users/requests/0?userId=${userId}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n\r\n      it('should return bad request if neither userId nor requestId is valid', () => {\r\n        return chai.request(app)\r\n          .get('/api/v1/users/requests/0?userId=0')\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n    });\r\n\r\n    // test for get ../users/requests\r\n    describe('get all request', () => {\r\n      it('should return all request for logged in user', () => {\r\n        const { userId } = createdRequest1;\r\n        return chai.request(app)\r\n          .get(`/api/v1/users/requests?userId=${userId}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('array');\r\n            expect(res.body).to.have.length.of.at.least(1);\r\n            expect(res.body).to.deep.include.members([createdRequest1]);\r\n          });\r\n      });\r\n\r\n      it('should return an empty array if no matching userId is found', () => {\r\n        return chai.request(app)\r\n          .get('/api/v1/users/requests?userId=5')\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('array');\r\n            expect(res.body.length).to.equal(0);\r\n          });\r\n      });\r\n\r\n      it('should return bad request if userId is not supplied in query', () => {\r\n        return chai.request(app)\r\n          .get('/api/v1/users/requests')\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n    });\r\n\r\n    // test for delete ../users/requests/:requestId\r\n    describe('delete request', () => {\r\n      it('should delete a request', () => {\r\n        const { id, userId } = createdRequest2;\r\n        return chai.request(app)\r\n          .delete(`/api/v1/users/requests/${id}?userId=${userId}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'request has been deleted' });\r\n          });\r\n      });\r\n\r\n      it('should return not found request that does not exist', () => {\r\n        const { userId } = createdRequest2;\r\n        return chai.request(app)\r\n          .delete(`/api/v1/users/requests/4?userId=${userId}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(404);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'request not found, not action taken' });\r\n          });\r\n      });\r\n\r\n      it('should not delete a request belonging to another person', () => {\r\n        const { userId } = createdRequest2;\r\n        const { id } = createdRequest1;\r\n        return chai.request(app)\r\n          .delete(`/api/v1/users/requests/${id}?userId=${userId}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(404);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'request not found, not action taken' });\r\n          });\r\n      });\r\n\r\n      it('should return bad request if requestId is not specified params', () => {\r\n        const { userId } = createdRequest2;\r\n        return chai.request(app)\r\n          .delete(`/api/v1/users/requests/0?userId=${userId}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n\r\n      it('should return bad request if requestId and userId is invalid', () => {\r\n        return chai.request(app)\r\n          .delete('/api/v1/users/requests/0?userId=0')\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n\r\n      it('should return bad request if requestId is given but userId is not specified in query', () => {\r\n        const { id } = createdRequest2;\r\n        return chai.request(app)\r\n          .delete(`/api/v1/users/requests/${id}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n    });\r\n\r\n    // test for put ../users/requests/:requestId\r\n    describe('update request', () => {\r\n      describe('Users', () => {\r\n        it('users should be able to modify the other field except the status of a request', () => {\r\n          const { id, userId } = createdRequest1;\r\n          return chai.request(app)\r\n            .put(`/api/v1/users/requests/${id}?userId=${userId}`)\r\n            .send({\r\n              description: 'wall socket got burned and need replacement',\r\n            })\r\n            .then((res) => {\r\n              expect(res).to.have.status(200);\r\n              expect(res.body).to.be.an('object');\r\n              expect(res.body.description).to.equal('wall socket got burned and need replacement');\r\n            });\r\n        });\r\n\r\n        it('users should not be able to modify the status of a request', () => {\r\n          const { id, userId } = createdRequest1;\r\n          return chai.request(app)\r\n            .put(`/api/v1/users/requests/${id}?userId=${userId}&isAdmin=`)\r\n            .send({\r\n              status: 'approved',\r\n            })\r\n            .then((res) => {\r\n              expect(res).to.have.status(200);\r\n              expect(res.body).to.be.an('object');\r\n              expect(res.body.status).to.equal('pending');\r\n            });\r\n        });\r\n\r\n        it('should return not found for a request that does not exist', () => {\r\n          const { userId } = createdRequest1;\r\n          return chai.request(app)\r\n            .put(`/api/v1/users/requests/4?userId=${userId}`)\r\n            .send({\r\n              description: 'wall socket got burned and need replacement',\r\n            })\r\n            .then((res) => {\r\n              expect(res).to.have.status(404);\r\n              expect(res.body).to.be.an('object');\r\n            });\r\n        });\r\n\r\n        it('should return not found for a request with no matching userId', () => {\r\n          const { id } = createdRequest1;\r\n          return chai.request(app)\r\n            .put(`/api/v1/users/requests/${id}?userId=10`)\r\n            .send({\r\n              description: 'wall socket got burned and need replacement',\r\n            })\r\n            .then((res) => {\r\n              expect(res).to.have.status(404);\r\n              expect(res.body).to.be.an('object');\r\n            });\r\n        });\r\n      });\r\n\r\n      describe('Admin', () => {\r\n        it('admin should be able to modify the status of a request', () => {\r\n          const { id, userId } = createdRequest1;\r\n          return chai.request(app)\r\n            .put(`/api/v1/users/requests/${id}?userId=${userId}&isAdmin=true`)\r\n            .send({\r\n              status: 'approved',\r\n            })\r\n            .then((res) => {\r\n              expect(res).to.have.status(200);\r\n              expect(res.body).to.be.an('object');\r\n              expect(res.body.status).to.equal('approved');\r\n            });\r\n        });\r\n\r\n        it('admin should not be able to modify the other field except the status of a request', () => {\r\n          const { id, userId } = createdRequest1;\r\n          return chai.request(app)\r\n            .put(`/api/v1/users/requests/${id}?userId=${userId}&isAdmin=true`)\r\n            .send({\r\n              description: 'wall socket is bad and need replacement',\r\n            })\r\n            .then((res) => {\r\n              expect(res).to.have.status(200);\r\n              expect(res.body).to.be.an('object');\r\n              expect(res.body.description).to.equal('wall socket got burned and need replacement');\r\n            });\r\n        });\r\n\r\n        it('admin should not be able to modify a request that does not exist', () => {\r\n          const { userId } = createdRequest1;\r\n          return chai.request(app)\r\n            .put(`/api/v1/users/requests/5?userId=${userId}&isAdmin=true`)\r\n            .send({\r\n              status: 'rejected',\r\n            })\r\n            .then((res) => {\r\n              expect(res).to.have.status(404);\r\n              expect(res.body).to.be.an('object');\r\n            });\r\n        });\r\n\r\n        it('admin should not be able to modify a request with no matching userId', () => {\r\n          const { id } = createdRequest1;\r\n          return chai.request(app)\r\n            .put(`/api/v1/users/requests/${id}?userId=3&isAdmin=true`)\r\n            .send({\r\n              status: 'resolved',\r\n            })\r\n            .then((res) => {\r\n              expect(res).to.have.status(404);\r\n              expect(res.body).to.be.an('object');\r\n            });\r\n        });\r\n      });\r\n\r\n      it('should return bad request if userId is not present in query', () => {\r\n        return chai.request(app)\r\n          .put('/api/v1/users/requests/4')\r\n          .send({\r\n            status: 'approved',\r\n          })\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      });\r\n\r\n      it('should return bad request if requestId is not specified params', () => {\r\n        return chai.request(app)\r\n          .put('/api/v1/users/requests/0?userId={userId}')\r\n          .send({\r\n            status: 'approved',\r\n          })\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n\r\n      it('should return bad request if userId is not specified query', () => {\r\n        const { id } = createdRequest1;\r\n        return chai.request(app)\r\n          .put(`/api/v1/users/requests/${id}?userId=`)\r\n          .send({\r\n            status: 'approved',\r\n          })\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n\r\n      it('should not update if neither userId nor requestId exist', () => {\r\n        return chai.request(app)\r\n          .put('/api/v1/users/requests/6?userId=7')\r\n          .send({\r\n            status: 'approved',\r\n          })\r\n          .then((res) => {\r\n            expect(res).to.have.status(404);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      });\r\n    });\r\n\r\n    // tests for the contact model\r\n    describe('contacts', () => {\r\n      describe('add contacts messages', () => {\r\n        it('users should be able to send message to the admin', () => {\r\n          return chai.request(app)\r\n            .post('/api/v1/contacts')\r\n            .send(message1)\r\n            .then((res) => {\r\n              Object.assign(createdMessage1, res.body);\r\n              expect(res).to.have.status(201);\r\n              expect(res.body).to.be.an('object');\r\n            });\r\n        });\r\n\r\n        it('admin should be able to reply a message', () => {\r\n          return chai.request(app)\r\n            .post('/api/v1/contacts')\r\n            .send(message2)\r\n            .then((res) => {\r\n              Object.assign(createdMessage2, res.body);\r\n              expect(res).to.have.status(201);\r\n              expect(res.body).to.be.an('object');\r\n            });\r\n        });\r\n\r\n        it('should return bad request if required fields are not presents', () => {\r\n          return chai.request(app)\r\n            .post('/api/v1/contacts')\r\n            .send(message3)\r\n            .then((res) => {\r\n              expect(res).to.have.status(404);\r\n              expect(res.body).to.be.an('object');\r\n            });\r\n        });\r\n\r\n        it('should not create a message for a sender that does not exist', () => {\r\n          return chai.request(app)\r\n            .post('/api/v1/contacts')\r\n            .send(message4)\r\n            .then((res) => {\r\n              expect(res).to.have.status(400);\r\n              expect(res.body).to.be.an('object');\r\n            });\r\n        });\r\n\r\n        it('should not create a message if no message is posted', () => {\r\n          return chai.request(app)\r\n            .post('/api/v1/contacts')\r\n            .send(message5)\r\n            .then((res) => {\r\n              expect(res).to.have.status(400);\r\n              expect(res.body).to.be.an('object');\r\n            });\r\n        });\r\n      });\r\n    });\r\n  });\r\n}\r\n"]}