{"version":3,"sources":["../../src/test/endpointTests.js"],"names":["server","Server","app","expressServer","expect","chai","use","chaiHttp","request1","category","description","urgency","department","userId","status","request2","request3","request4","createdRequest1","createdRequest2","process","env","NODE_ENV","console","log","describe","it","request","get","then","res","to","have","body","be","an","eql","message","post","send","Object","assign","id","equal","any","keys","length","of","at","least","deep","include","members","delete","put"],"mappings":"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","file":"endpointTests.js","sourcesContent":["import chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport Server from './../app';\r\n\r\nconst server = new Server();\r\nconst app = server.expressServer();\r\nconst { expect } = chai;\r\nchai.use(chaiHttp);\r\n\r\nconst request1 = {\r\n  category: 'electrical',\r\n  description: 'Socket  burned',\r\n  urgency: 'urgent',\r\n  department: 'baking',\r\n  userId: 1,\r\n  status: 'pending',\r\n};\r\nconst request2 = {\r\n  category: 'electrical',\r\n  description: 'Socket  burned',\r\n  urgency: 'urgent',\r\n  department: 'baking',\r\n  userId: 2,\r\n  status: 'pending',\r\n};\r\n\r\nconst request3 = {\r\n  category: 'electrical',\r\n  description: 'Socket  burned',\r\n  urgency: 'urgent',\r\n  department: 'baking',\r\n  userId: 4,\r\n  status: 'pending',\r\n};\r\n\r\nconst request4 = {\r\n  category: 'electrical',\r\n  description: '',\r\n  urgency: 'urgent',\r\n  department: 'baking',\r\n  userId: 2,\r\n  status: 'pending',\r\n};\r\nconst createdRequest1 = {};\r\nconst createdRequest2 = {};\r\n// enforce test to run in test env\r\nif (process.env.NODE_ENV !== 'test') {\r\n  /* eslint-disable no-console */\r\n  console.log(`can't run test in non test env. you are in ${process.env.NODE_ENV} environment`);\r\n} else {\r\n  describe('API End Points', () => {\r\n    // test home route\r\n    describe('Home', () => {\r\n      it('should return welcome message', () => {\r\n        return chai.request(app)\r\n          .get('/')\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('Object');\r\n            expect(res.body).to.eql({ message: 'welcome to the maintenance trackers' });\r\n          });\r\n      });\r\n    });\r\n\r\n    describe('Empty request model', () => {\r\n      it('should return an empty array', () => {\r\n        return chai.request(app)\r\n          .get('/api/v1/users/requests')\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n          });\r\n      });\r\n      it('should return not found for the request id', () => {\r\n        return chai.request(app)\r\n          .get('/api/v1/users/requests/1')\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n    });\r\n\r\n    // test for post ../users/requests\r\n    describe('Create requests', () => {\r\n      it('should create a new request', () => {\r\n        return chai.request(app)\r\n          .post('/api/v1/users/requests')\r\n          .send(request1)\r\n          .then((res) => {\r\n            Object.assign(createdRequest1, res.body.request);\r\n            expect(res).to.have.status(201);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.request.id).to.equal(1);\r\n            expect(res.body.request).to.have.any.keys(['description', 'category', 'userId']);\r\n          });\r\n      });\r\n\r\n      it('should create a new request', () => {\r\n        return chai.request(app)\r\n          .post('/api/v1/users/requests')\r\n          .send(request2)\r\n          .then((res) => {\r\n            Object.assign(createdRequest2, res.body.request);\r\n            expect(res).to.have.status(201);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.request.id).to.equal(2);\r\n            expect(res.body.request).to.have.any.keys('description');\r\n            expect(res.body.request).to.have.any.keys('category');\r\n            expect(res.body.request).to.have.any.keys('userId');\r\n          });\r\n      });\r\n      it('should not create request for users that does not exist', () => {\r\n        return chai.request(app)\r\n          .post('/api/v1/users/requests')\r\n          .send(request3)\r\n          .then((res) => {\r\n            expect(res).to.have.status(404);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      });\r\n\r\n      it('should not create request if a required field is not present', () => {\r\n        return chai.request(app)\r\n          .post('/api/v1/users/requests')\r\n          .send(request4)\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n    });\r\n\r\n    // test for get ../users/requests/:requestId\r\n    describe('get one request', () => {\r\n      it('should return a request with the given id for a logged in user', () => {\r\n        const { id, userId } = createdRequest1;\r\n        return chai.request(app)\r\n          .get(`/api/v1/users/requests/${id}?userId=${userId}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.have.any.keys('userId');\r\n          });\r\n      });\r\n\r\n      it('should return not found for requestId that does not exist for a logged in user', () => {\r\n        const { userId } = createdRequest1;\r\n        return chai.request(app)\r\n          .get(`/api/v1/users/requests/5?userId=${userId}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(404);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'request not found' });\r\n          });\r\n      });\r\n\r\n      it('should return not found for the requestId with no matching userId', () => {\r\n        const { id } = createdRequest1;\r\n        return chai.request(app)\r\n          .get(`/api/v1/users/requests/${id}?userId=6`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(404);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'request not found' });\r\n          });\r\n      });\r\n\r\n      it('should return bad request if either userId nor requestId is invalid', () => {\r\n        const { id } = createdRequest1;\r\n        return chai.request(app)\r\n          .get(`/api/v1/users/requests/${id}?userId=0`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });;\r\n          });\r\n      });\r\n\r\n      it('should return bad request if either userId nor requestId is invalid', () => {\r\n        const { userId } = createdRequest1;\r\n        return chai.request(app)\r\n          .get(`/api/v1/users/requests/0?userId=${userId}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n\r\n      it('should return bad request if neither userId nor requestId is valid', () => {\r\n        return chai.request(app)\r\n          .get('/api/v1/users/requests/0?userId=0')\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n    });\r\n\r\n    // test for get ../users/requests\r\n    describe('get all request', () => {\r\n      it('should return all request for logged in user', () => {\r\n        const { userId } = createdRequest1;\r\n        return chai.request(app)\r\n          .get(`/api/v1/users/requests?userId=${userId}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('array');\r\n            expect(res.body).to.have.length.of.at.least(1);\r\n            expect(res.body).to.deep.include.members([createdRequest1]);\r\n          });\r\n      });\r\n\r\n      it('should return an empty array if no matching userId is found', () => {\r\n        return chai.request(app)\r\n          .get('/api/v1/users/requests?userId=5')\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('array');\r\n            expect(res.body.length).to.equal(0);\r\n          });\r\n      });\r\n\r\n      it('should return bad request if userId is not supplied in query', () => {\r\n        return chai.request(app)\r\n          .get('/api/v1/users/requests')\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n    });\r\n\r\n    // test for delete ../users/requests/:requestId\r\n    describe('delete request', () => {\r\n      it('should delete a request', () => {\r\n        const { id, userId } = createdRequest2;\r\n        return chai.request(app)\r\n          .delete(`/api/v1/users/requests/${id}?userId=${userId}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'request has been deleted' });\r\n          });\r\n      });\r\n\r\n      it('should return not found request that does not exist', () => {\r\n        const { userId } = createdRequest2;\r\n        return chai.request(app)\r\n          .delete(`/api/v1/users/requests/4?userId=${userId}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(404);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'request not found, not action taken' });\r\n          });\r\n      });\r\n\r\n      it('should not delete a request belonging to another person', () => {\r\n        const { userId } = createdRequest2;\r\n        const { id } = createdRequest1;\r\n        return chai.request(app)\r\n          .delete(`/api/v1/users/requests/${id}?userId=${userId}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(404);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'request not found, not action taken' });\r\n          });\r\n      });\r\n\r\n      it('should return bad request if requestId is not specified params', () => {\r\n        const { userId } = createdRequest2;\r\n        return chai.request(app)\r\n          .delete(`/api/v1/users/requests/0?userId=${userId}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n\r\n      it('should return bad request if requestId and userId is invalid', () => {\r\n        return chai.request(app)\r\n          .delete('/api/v1/users/requests/0?userId=0')\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n\r\n      it('should return bad request if requestId is given but userId is not specified in query', () => {\r\n        const { id } = createdRequest2;\r\n        return chai.request(app)\r\n          .delete(`/api/v1/users/requests/${id}`)\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n    });\r\n\r\n    // test for put ../users/requests/:requestId\r\n    describe('update request', () => {\r\n      it('should update a request', () => {\r\n        const { id } = createdRequest1;\r\n        return chai.request(app)\r\n          .put(`/api/v1/users/requests/${id}`)\r\n          .send({\r\n            status: 'approved',\r\n          })\r\n          .then((res) => {\r\n            expect(res).to.have.status(200);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body.status).to.equal('approved');\r\n          });\r\n      });\r\n\r\n      it('should return not found request that does not exist', () => {\r\n        return chai.request(app)\r\n          .put('/api/v1/users/requests/4')\r\n          .send({\r\n            status: 'approved',\r\n          })\r\n          .then((res) => {\r\n            expect(res).to.have.status(404);\r\n            expect(res.body).to.be.an('object');\r\n          });\r\n      });\r\n\r\n      it('should return bad request if requestId is not specified params', () => {\r\n        return chai.request(app)\r\n          .put('/api/v1/users/requests/0')\r\n          .send({\r\n            status: 'approved',\r\n          })\r\n          .then((res) => {\r\n            expect(res).to.have.status(400);\r\n            expect(res.body).to.be.an('object');\r\n            expect(res.body).to.eql({ message: 'missing required field' });\r\n          });\r\n      });\r\n    });\r\n  });\r\n}\r\n"]}