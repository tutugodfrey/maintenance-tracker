{"version":3,"sources":["../../src/test/userRequestTest.js"],"names":["server","Server","app","expressServer","expect","chai","use","chaiHttp","signedInUser","createdRequest1","createdRequest2","request3","category","description","urgent","address","userId","request4","status","describe","it","request","post","send","username","regularUser1","password","then","res","Object","assign","body","to","have","be","an","property","token","a","get","set","eql","message","request1","id","equal","any","keys","request2","userid","length","of","at","least","deep","include","members","put","delete"],"mappings":"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","file":"userRequestTest.js","sourcesContent":["import chai from 'chai';\r\nimport chaiHttp from 'chai-http';\r\nimport Server from './../app';\r\nimport { regularUser1 } from './signupTest';\r\nimport { createDecipher } from 'crypto';\r\n\r\nconst server = new Server();\r\nconst app = server.expressServer();\r\nconst { expect } = chai;\r\nchai.use(chaiHttp);\r\nconst signedInUser = {};\r\nconst createdRequest1 = {};\r\nconst createdRequest2 = {};\r\n\r\nconst request3 = {\r\n  category: 'electrical',\r\n  description: 'Socket burned',\r\n  urgent: true,\r\n  address: 'somewhere in the world',\r\n  userId: 9,\r\n};\r\n\r\nconst request4 = {\r\n  category: 'electrical',\r\n  description: '',\r\n  urgent: true,\r\n  address: 'somewhere in the world',\r\n  userId: 2,\r\n  status: 'awaiting confirmation',\r\n};\r\n\r\nexport default describe('Users actions', () => {\r\n  it('should signin a User in and give a token', () => {\r\n    return chai.request(app)\r\n      .post('/api/v1/auth/signin')\r\n      .send({\r\n        username: regularUser1.username,\r\n        password: '123456',\r\n      })\r\n      .then((res) => {\r\n        Object.assign(signedInUser, res.body);\r\n        expect(res).to.have.status(200);\r\n        expect(res.body).to.be.an('Object');\r\n        expect(res.body).to.have.property('token');\r\n        expect(res.body.token).to.be.a('string');\r\n      });\r\n  });\r\n\r\n  describe('Empty request model', () => {\r\n    it('should return an empty array', () => {\r\n      return chai.request(app)\r\n        .get('/api/v1/users/requests')\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(400);\r\n        });\r\n    });\r\n\r\n    it('should return not found for the request id', () => {\r\n      return chai.request(app)\r\n        .get('/api/v1/users/requests/1')\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(400);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body).to.eql({ message: 'missing required field' });\r\n        });\r\n    });\r\n  });\r\n\r\n  describe('Create requests', () => {\r\n    it('should create a new request', () => {\r\n      const request1 = {\r\n        category: 'electrical',\r\n        description: 'Socket burned',\r\n        urgent: true,\r\n        address: 'somewhere in the world',\r\n        userId: signedInUser.id,\r\n      };\r\n      return chai.request(app)\r\n        .post('/api/v1/users/requests')\r\n        .set('token', signedInUser.token)\r\n        .send(request1)\r\n        .then((res) => {\r\n          Object.assign(createdRequest1, res.body);\r\n          expect(res).to.have.status(201);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body.id).to.equal(1);\r\n          expect(res.body).to.have.any.keys(['description', 'category', 'userId']);\r\n        });\r\n    });\r\n\r\n    it('should create a new request', () => {\r\n      const request2 = {\r\n        category: 'electrical',\r\n        description: 'Socket burned',\r\n        urgent: true,\r\n        address: 'somewhere in the world',\r\n        userId: signedInUser.id,\r\n      };\r\n      return chai.request(app)\r\n        .post('/api/v1/users/requests')\r\n        .set('token', signedInUser.token)\r\n        .send(request2)\r\n        .then((res) => {\r\n          Object.assign(createdRequest2, res.body);\r\n          expect(res).to.have.status(201);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body.id).to.equal(2);\r\n          expect(res.body).to.have.any.keys('description');\r\n          expect(res.body).to.have.any.keys('category');\r\n          expect(res.body).to.have.any.keys('userid');\r\n        });\r\n        \r\n    });\r\n    it('should not create request for users that does not exist', () => {\r\n      const request3 = {\r\n        category: 'electrical',\r\n        description: 'Socket burned',\r\n        urgent: true,\r\n        address: 'somewhere in the world',\r\n        userid: 9,\r\n      };\r\n      return chai.request(app)\r\n        .post('/api/v1/users/requests')\r\n        .set('token', signedInUser.token)\r\n        .send(request3)\r\n        .then((res) => {\r\n          expect(res).to.have.status(400);\r\n          expect(res.body).to.be.an('object');\r\n        });\r\n    });\r\n\r\n    it('should not create request if a required field is not present', () => {\r\n      return chai.request(app)\r\n        .post('/api/v1/users/requests')\r\n        .set('token', signedInUser.token)\r\n        .send(request4)\r\n        .then((res) => {\r\n          expect(res).to.have.status(400);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body).to.eql({ message: 'missing required field' });\r\n        });\r\n    });\r\n  });\r\n\r\n  // test for get ../users/requests/:requestId\r\n  describe('get one request', () => {\r\n    it('should return a request with the given id for a logged in user', () => {\r\n      const { id, userid } = createdRequest1;\r\n      return chai.request(app)\r\n        .get(`/api/v1/users/requests/${id}?userId=${userid}`)\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(200);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body).to.have.any.keys('userid');\r\n        });\r\n    });\r\n\r\n    it('should return not found for requestId that does not exist for a logged in user', () => {\r\n      const { userid } = createdRequest1;\r\n      return chai.request(app)\r\n        .get(`/api/v1/users/requests/20?userId=${userid}`)\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(404);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body).to.eql({ message: 'request not found' });\r\n        });\r\n    });\r\n\r\n    it('should return not found for the requestId with no matching userId', () => {\r\n      const { id } = createdRequest1;\r\n      return chai.request(app)\r\n        .get(`/api/v1/users/requests/${id}?userId=9`)\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(404);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body).to.eql({ message: 'request not found' });\r\n        });\r\n    });\r\n\r\n    it('should return bad request if either userId nor requestId is invalid', () => {\r\n      const { id } = createdRequest1;\r\n      return chai.request(app)\r\n        .get(`/api/v1/users/requests/${id}?userId=0`)\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(400);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body).to.eql({ message: 'missing required field' });\r\n        });\r\n    });\r\n\r\n    it('should return bad request if either userId nor requestId is invalid', () => {\r\n      const { userid } = createdRequest1;\r\n      return chai.request(app)\r\n        .get(`/api/v1/users/requests/0?userId=${userid}`)\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(400);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body).to.eql({ message: 'missing required field' });\r\n        });\r\n    });\r\n\r\n    it('should return bad request if neither userId nor requestId is valid', () => {\r\n      return chai.request(app)\r\n        .get('/api/v1/users/requests/0?userId=0')\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(400);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body).to.eql({ message: 'missing required field' });\r\n        });\r\n    });\r\n  });\r\n\r\n  // test for get ../users/requests\r\n  describe('get all request', () => {\r\n    it('should return all request for logged in user', () => {\r\n      const { userid } = createdRequest1;\r\n      return chai.request(app)\r\n        .get(`/api/v1/users/requests?userId=${userid}`)\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(200);\r\n          expect(res.body).to.be.an('array');\r\n          expect(res.body).to.have.length.of.at.least(1);\r\n          expect(res.body).to.deep.include.members([createdRequest1]);\r\n        });\r\n    });\r\n\r\n    it('should return an empty array if no matching userId is found', () => {\r\n      return chai.request(app)\r\n        .get('/api/v1/users/requests?userId=10')\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(200);\r\n          expect(res.body).to.be.an('array');\r\n          expect(res.body.length).to.equal(0);\r\n        });\r\n    });\r\n\r\n    it('should return bad request if userId is not supplied in query', () => {\r\n      return chai.request(app)\r\n        .get('/api/v1/users/requests')\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(400);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body).to.eql({ message: 'missing required field' });\r\n        });\r\n    });\r\n  });\r\n\r\n  describe('Users request update', () => {\r\n    it('users should be able to modify the other field except the status of a request', () => {\r\n      const { id, userid } = createdRequest1;\r\n      return chai.request(app)\r\n        .put(`/api/v1/users/requests/${id}?userId=${userid}`)\r\n        .set('token', signedInUser.token)\r\n        .send({\r\n          description: 'wall socket got burned and need replacement',\r\n        })\r\n        .then((res) => {\r\n          expect(res).to.have.status(200);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body.description).to.equal('wall socket got burned and need replacement');\r\n        });\r\n    });\r\n\r\n    it('users should not be able to modify the status of a request', () => {\r\n      const { id, userid } = createdRequest1;\r\n      return chai.request(app)\r\n        .put(`/api/v1/users/requests/${id}?userId=${userid}&isAdmin=`)\r\n        .set('token', signedInUser.token)\r\n        .send({\r\n          status: 'approved',\r\n        })\r\n        .then((res) => {\r\n          expect(res).to.have.status(200);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body.status).to.equal('awaiting confirmation');\r\n        });\r\n    });\r\n    \r\n    it('should return not found for a request that does not exist', () => {\r\n      const { userid } = createdRequest1;\r\n      return chai.request(app)\r\n        .put(`/api/v1/users/requests/20?userId=${userid}`)\r\n        .set('token', signedInUser.token)\r\n        .send({\r\n          description: 'wall socket got burned and need replacement',\r\n        })\r\n        .then((res) => {\r\n          expect(res).to.have.status(404);\r\n          expect(res.body).to.be.an('object');\r\n        });\r\n    });\r\n\r\n    it('should return not found for a request if userId does not match', () => {\r\n      const { id } = createdRequest1;\r\n      return chai.request(app)\r\n        .put(`/api/v1/users/requests/${id}?userId=10`)\r\n        .set('token', signedInUser.token)\r\n        .send({\r\n          description: 'wall socket got burned and need replacement',\r\n        })\r\n        .then((res) => {\r\n          expect(res).to.have.status(404);\r\n          expect(res.body).to.be.an('object');\r\n        });\r\n    });\r\n  });\r\n\r\n  // test for delete ../users/requests/:requestId\r\n  describe('delete request', () => {\r\n    \r\n    it('should delete a request', () => {\r\n      const { id, userid } = createdRequest2;\r\n      return chai.request(app)\r\n        .delete(`/api/v1/users/requests/${id}?userId=${userid}`)\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(200);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body).to.eql({ message: 'request has been deleted' });\r\n        });\r\n    }); \r\n    \r\n    it('should return not found for a request that does not exist', () => {\r\n      const { userid } = createdRequest2;\r\n      return chai.request(app)\r\n        .delete(`/api/v1/users/requests/15?userId=${userid}`)\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(404);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body).to.eql({ message: 'request not found, not action taken' });\r\n        });\r\n    }); \r\n\r\n    it('should return bad request if requestId is not specified params', () => {\r\n      const { userid } = createdRequest2;\r\n      return chai.request(app)\r\n        .delete(`/api/v1/users/requests/0?userId=${userid}`)\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(400);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body).to.eql({ message: 'missing required field' });\r\n        });\r\n    });\r\n\r\n    it('should return bad request if requestId and userId is invalid', () => {\r\n      return chai.request(app)\r\n        .delete('/api/v1/users/requests/0?userId=0')\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(400);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body).to.eql({ message: 'missing required field' });\r\n        });\r\n    });\r\n\r\n    it('should return bad request if requestId is given but userId is not specified in query', () => {\r\n      const { id } = createdRequest2;\r\n      return chai.request(app)\r\n        .delete(`/api/v1/users/requests/${id}`)\r\n        .set('token', signedInUser.token)\r\n        .then((res) => {\r\n          expect(res).to.have.status(400);\r\n          expect(res.body).to.be.an('object');\r\n          expect(res.body).to.eql({ message: 'missing required field' });\r\n        });\r\n    });\r\n  });\r\n});\r\n\r\nexport {\r\n  createdRequest1,\r\n  createdRequest2,\r\n};\r\n"]}